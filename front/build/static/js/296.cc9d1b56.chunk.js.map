{"version":3,"file":"static/js/296.cc9d1b56.chunk.js","mappings":"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","sources":["../node_modules/.pnpm/use-sync-external-store@1.2.0_react@18.2.0/node_modules/use-sync-external-store/cjs/use-sync-external-store-shim.production.min.js","../node_modules/.pnpm/use-sync-external-store@1.2.0_react@18.2.0/node_modules/use-sync-external-store/shim/index.js","../node_modules/.pnpm/@tanstack+query-core@4.24.6/node_modules/@tanstack/query-core/src/queryObserver.ts","../node_modules/.pnpm/@tanstack+react-query@4.24.6_biqbaboplfbrettd7655fr4n2y/node_modules/@tanstack/react-query/src/useSyncExternalStore.ts","../node_modules/.pnpm/@tanstack+react-query@4.24.6_biqbaboplfbrettd7655fr4n2y/node_modules/@tanstack/react-query/src/QueryErrorResetBoundary.tsx","../node_modules/.pnpm/@tanstack+react-query@4.24.6_biqbaboplfbrettd7655fr4n2y/node_modules/@tanstack/react-query/src/isRestoring.tsx","../node_modules/.pnpm/@tanstack+react-query@4.24.6_biqbaboplfbrettd7655fr4n2y/node_modules/@tanstack/react-query/src/errorBoundaryUtils.ts","../node_modules/.pnpm/@tanstack+react-query@4.24.6_biqbaboplfbrettd7655fr4n2y/node_modules/@tanstack/react-query/src/utils.ts","../node_modules/.pnpm/@tanstack+react-query@4.24.6_biqbaboplfbrettd7655fr4n2y/node_modules/@tanstack/react-query/src/useBaseQuery.ts","../node_modules/.pnpm/@tanstack+react-query@4.24.6_biqbaboplfbrettd7655fr4n2y/node_modules/@tanstack/react-query/src/suspense.ts","../node_modules/.pnpm/@tanstack+react-query@4.24.6_biqbaboplfbrettd7655fr4n2y/node_modules/@tanstack/react-query/src/useQuery.ts","../node_modules/.pnpm/@tanstack+react-table@8.7.9_biqbaboplfbrettd7655fr4n2y/node_modules/@tanstack/react-table/src/index.tsx","../node_modules/.pnpm/@tanstack+table-core@8.7.9/node_modules/@tanstack/table-core/src/utils.ts","../node_modules/.pnpm/@tanstack+table-core@8.7.9/node_modules/@tanstack/table-core/src/core/headers.ts","../node_modules/.pnpm/@tanstack+table-core@8.7.9/node_modules/@tanstack/table-core/src/features/ColumnSizing.ts","../node_modules/.pnpm/@tanstack+table-core@8.7.9/node_modules/@tanstack/table-core/src/features/Expanding.ts","../node_modules/.pnpm/@tanstack+table-core@8.7.9/node_modules/@tanstack/table-core/src/filterFns.ts","../node_modules/.pnpm/@tanstack+table-core@8.7.9/node_modules/@tanstack/table-core/src/features/Filters.ts","../node_modules/.pnpm/@tanstack+table-core@8.7.9/node_modules/@tanstack/table-core/src/aggregationFns.ts","../node_modules/.pnpm/@tanstack+table-core@8.7.9/node_modules/@tanstack/table-core/src/features/Ordering.ts","../node_modules/.pnpm/@tanstack+table-core@8.7.9/node_modules/@tanstack/table-core/src/features/RowSelection.ts","../node_modules/.pnpm/@tanstack+table-core@8.7.9/node_modules/@tanstack/table-core/src/sortingFns.ts","../node_modules/.pnpm/@tanstack+table-core@8.7.9/node_modules/@tanstack/table-core/src/core/table.ts","../node_modules/.pnpm/@tanstack+table-core@8.7.9/node_modules/@tanstack/table-core/src/features/Visibility.ts","../node_modules/.pnpm/@tanstack+table-core@8.7.9/node_modules/@tanstack/table-core/src/features/Grouping.ts","../node_modules/.pnpm/@tanstack+table-core@8.7.9/node_modules/@tanstack/table-core/src/features/Pinning.ts","../node_modules/.pnpm/@tanstack+table-core@8.7.9/node_modules/@tanstack/table-core/src/features/Sorting.ts","../node_modules/.pnpm/@tanstack+table-core@8.7.9/node_modules/@tanstack/table-core/src/features/Pagination.ts","../node_modules/.pnpm/@tanstack+table-core@8.7.9/node_modules/@tanstack/table-core/src/core/column.ts","../node_modules/.pnpm/@tanstack+table-core@8.7.9/node_modules/@tanstack/table-core/src/core/row.ts","../node_modules/.pnpm/@tanstack+table-core@8.7.9/node_modules/@tanstack/table-core/src/core/cell.ts","../node_modules/.pnpm/@tanstack+table-core@8.7.9/node_modules/@tanstack/table-core/src/utils/getCoreRowModel.ts","../node_modules/.pnpm/@tanstack+table-core@8.7.9/node_modules/@tanstack/table-core/src/utils/getSortedRowModel.ts","../node_modules/.pnpm/@tanstack+table-core@8.7.9/node_modules/@tanstack/table-core/src/utils/getExpandedRowModel.ts","../node_modules/.pnpm/@tanstack+table-core@8.7.9/node_modules/@tanstack/table-core/src/utils/getPaginationRowModel.ts"],"sourcesContent":["/**\n * @license React\n * use-sync-external-store-shim.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var e=require(\"react\");function h(a,b){return a===b&&(0!==a||1/a===1/b)||a!==a&&b!==b}var k=\"function\"===typeof Object.is?Object.is:h,l=e.useState,m=e.useEffect,n=e.useLayoutEffect,p=e.useDebugValue;function q(a,b){var d=b(),f=l({inst:{value:d,getSnapshot:b}}),c=f[0].inst,g=f[1];n(function(){c.value=d;c.getSnapshot=b;r(c)&&g({inst:c})},[a,d,b]);m(function(){r(c)&&g({inst:c});return a(function(){r(c)&&g({inst:c})})},[a]);p(d);return d}\nfunction r(a){var b=a.getSnapshot;a=a.value;try{var d=b();return!k(a,d)}catch(f){return!0}}function t(a,b){return b()}var u=\"undefined\"===typeof window||\"undefined\"===typeof window.document||\"undefined\"===typeof window.document.createElement?t:q;exports.useSyncExternalStore=void 0!==e.useSyncExternalStore?e.useSyncExternalStore:u;\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('../cjs/use-sync-external-store-shim.production.min.js');\n} else {\n  module.exports = require('../cjs/use-sync-external-store-shim.development.js');\n}\n","import type { DefaultedQueryObserverOptions, RefetchPageFilters } from './types'\nimport {\n  isServer,\n  isValidTimeout,\n  noop,\n  replaceData,\n  shallowEqualObjects,\n  timeUntilStale,\n} from './utils'\nimport { notifyManager } from './notifyManager'\nimport type {\n  PlaceholderDataFunction,\n  QueryKey,\n  QueryObserverBaseResult,\n  QueryObserverOptions,\n  QueryObserverResult,\n  QueryOptions,\n  RefetchOptions,\n} from './types'\nimport type { Query, QueryState, Action, FetchOptions } from './query'\nimport type { QueryClient } from './queryClient'\nimport { focusManager } from './focusManager'\nimport { Subscribable } from './subscribable'\nimport { canFetch, isCancelledError } from './retryer'\n\ntype QueryObserverListener<TData, TError> = (\n  result: QueryObserverResult<TData, TError>,\n) => void\n\nexport interface NotifyOptions {\n  cache?: boolean\n  listeners?: boolean\n  onError?: boolean\n  onSuccess?: boolean\n}\n\nexport interface ObserverFetchOptions extends FetchOptions {\n  throwOnError?: boolean\n}\n\nexport class QueryObserver<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> extends Subscribable<QueryObserverListener<TData, TError>> {\n  options: QueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >\n\n  private client: QueryClient\n  private currentQuery!: Query<TQueryFnData, TError, TQueryData, TQueryKey>\n  private currentQueryInitialState!: QueryState<TQueryData, TError>\n  private currentResult!: QueryObserverResult<TData, TError>\n  private currentResultState?: QueryState<TQueryData, TError>\n  private currentResultOptions?: QueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >\n  private previousQueryResult?: QueryObserverResult<TData, TError>\n  private selectError: TError | null\n  private selectFn?: (data: TQueryData) => TData\n  private selectResult?: TData\n  private staleTimeoutId?: ReturnType<typeof setTimeout>\n  private refetchIntervalId?: ReturnType<typeof setInterval>\n  private currentRefetchInterval?: number | false\n  private trackedProps!: Set<keyof QueryObserverResult>\n\n  constructor(\n    client: QueryClient,\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ) {\n    super()\n\n    this.client = client\n    this.options = options\n    this.trackedProps = new Set()\n    this.selectError = null\n    this.bindMethods()\n    this.setOptions(options)\n  }\n\n  protected bindMethods(): void {\n    this.remove = this.remove.bind(this)\n    this.refetch = this.refetch.bind(this)\n  }\n\n  protected onSubscribe(): void {\n    if (this.listeners.length === 1) {\n      this.currentQuery.addObserver(this)\n\n      if (shouldFetchOnMount(this.currentQuery, this.options)) {\n        this.executeFetch()\n      }\n\n      this.updateTimers()\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.listeners.length) {\n      this.destroy()\n    }\n  }\n\n  shouldFetchOnReconnect(): boolean {\n    return shouldFetchOn(\n      this.currentQuery,\n      this.options,\n      this.options.refetchOnReconnect,\n    )\n  }\n\n  shouldFetchOnWindowFocus(): boolean {\n    return shouldFetchOn(\n      this.currentQuery,\n      this.options,\n      this.options.refetchOnWindowFocus,\n    )\n  }\n\n  destroy(): void {\n    this.listeners = []\n    this.clearStaleTimeout()\n    this.clearRefetchInterval()\n    this.currentQuery.removeObserver(this)\n  }\n\n  setOptions(\n    options?: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n    notifyOptions?: NotifyOptions,\n  ): void {\n    const prevOptions = this.options\n    const prevQuery = this.currentQuery\n\n    this.options = this.client.defaultQueryOptions(options)\n\n    if (\n      process.env.NODE_ENV !== 'production' &&\n      typeof options?.isDataEqual !== 'undefined'\n    ) {\n      this.client\n        .getLogger()\n        .error(\n          `The isDataEqual option has been deprecated and will be removed in the next major version. You can achieve the same functionality by passing a function as the structuralSharing option`,\n        )\n    }\n\n    if (!shallowEqualObjects(prevOptions, this.options)) {\n      this.client.getQueryCache().notify({\n        type: 'observerOptionsUpdated',\n        query: this.currentQuery,\n        observer: this,\n      })\n    }\n\n    if (\n      typeof this.options.enabled !== 'undefined' &&\n      typeof this.options.enabled !== 'boolean'\n    ) {\n      throw new Error('Expected enabled to be a boolean')\n    }\n\n    // Keep previous query key if the user does not supply one\n    if (!this.options.queryKey) {\n      this.options.queryKey = prevOptions.queryKey\n    }\n\n    this.updateQuery()\n\n    const mounted = this.hasListeners()\n\n    // Fetch if there are subscribers\n    if (\n      mounted &&\n      shouldFetchOptionally(\n        this.currentQuery,\n        prevQuery,\n        this.options,\n        prevOptions,\n      )\n    ) {\n      this.executeFetch()\n    }\n\n    // Update result\n    this.updateResult(notifyOptions)\n\n    // Update stale interval if needed\n    if (\n      mounted &&\n      (this.currentQuery !== prevQuery ||\n        this.options.enabled !== prevOptions.enabled ||\n        this.options.staleTime !== prevOptions.staleTime)\n    ) {\n      this.updateStaleTimeout()\n    }\n\n    const nextRefetchInterval = this.computeRefetchInterval()\n\n    // Update refetch interval if needed\n    if (\n      mounted &&\n      (this.currentQuery !== prevQuery ||\n        this.options.enabled !== prevOptions.enabled ||\n        nextRefetchInterval !== this.currentRefetchInterval)\n    ) {\n      this.updateRefetchInterval(nextRefetchInterval)\n    }\n  }\n\n  getOptimisticResult(\n    options: DefaultedQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): QueryObserverResult<TData, TError> {\n    const query = this.client.getQueryCache().build(this.client, options)\n\n    return this.createResult(query, options)\n  }\n\n  getCurrentResult(): QueryObserverResult<TData, TError> {\n    return this.currentResult\n  }\n\n  trackResult(\n    result: QueryObserverResult<TData, TError>,\n  ): QueryObserverResult<TData, TError> {\n    const trackedResult = {} as QueryObserverResult<TData, TError>\n\n    Object.keys(result).forEach((key) => {\n      Object.defineProperty(trackedResult, key, {\n        configurable: false,\n        enumerable: true,\n        get: () => {\n          this.trackedProps.add(key as keyof QueryObserverResult)\n          return result[key as keyof QueryObserverResult]\n        },\n      })\n    })\n\n    return trackedResult\n  }\n\n  getCurrentQuery(): Query<TQueryFnData, TError, TQueryData, TQueryKey> {\n    return this.currentQuery\n  }\n\n  remove(): void {\n    this.client.getQueryCache().remove(this.currentQuery)\n  }\n\n  refetch<TPageData>({\n    refetchPage,\n    ...options\n  }: RefetchOptions & RefetchPageFilters<TPageData> = {}): Promise<\n    QueryObserverResult<TData, TError>\n  > {\n    return this.fetch({\n      ...options,\n      meta: { refetchPage },\n    })\n  }\n\n  fetchOptimistic(\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): Promise<QueryObserverResult<TData, TError>> {\n    const defaultedOptions = this.client.defaultQueryOptions(options)\n\n    const query = this.client\n      .getQueryCache()\n      .build(this.client, defaultedOptions)\n    query.isFetchingOptimistic = true\n\n    return query.fetch().then(() => this.createResult(query, defaultedOptions))\n  }\n\n  protected fetch(\n    fetchOptions: ObserverFetchOptions,\n  ): Promise<QueryObserverResult<TData, TError>> {\n    return this.executeFetch({\n      ...fetchOptions,\n      cancelRefetch: fetchOptions.cancelRefetch ?? true,\n    }).then(() => {\n      this.updateResult()\n      return this.currentResult\n    })\n  }\n\n  private executeFetch(\n    fetchOptions?: ObserverFetchOptions,\n  ): Promise<TQueryData | undefined> {\n    // Make sure we reference the latest query as the current one might have been removed\n    this.updateQuery()\n\n    // Fetch\n    let promise: Promise<TQueryData | undefined> = this.currentQuery.fetch(\n      this.options as QueryOptions<TQueryFnData, TError, TQueryData, TQueryKey>,\n      fetchOptions,\n    )\n\n    if (!fetchOptions?.throwOnError) {\n      promise = promise.catch(noop)\n    }\n\n    return promise\n  }\n\n  private updateStaleTimeout(): void {\n    this.clearStaleTimeout()\n\n    if (\n      isServer ||\n      this.currentResult.isStale ||\n      !isValidTimeout(this.options.staleTime)\n    ) {\n      return\n    }\n\n    const time = timeUntilStale(\n      this.currentResult.dataUpdatedAt,\n      this.options.staleTime,\n    )\n\n    // The timeout is sometimes triggered 1 ms before the stale time expiration.\n    // To mitigate this issue we always add 1 ms to the timeout.\n    const timeout = time + 1\n\n    this.staleTimeoutId = setTimeout(() => {\n      if (!this.currentResult.isStale) {\n        this.updateResult()\n      }\n    }, timeout)\n  }\n\n  private computeRefetchInterval() {\n    return typeof this.options.refetchInterval === 'function'\n      ? this.options.refetchInterval(this.currentResult.data, this.currentQuery)\n      : this.options.refetchInterval ?? false\n  }\n\n  private updateRefetchInterval(nextInterval: number | false): void {\n    this.clearRefetchInterval()\n\n    this.currentRefetchInterval = nextInterval\n\n    if (\n      isServer ||\n      this.options.enabled === false ||\n      !isValidTimeout(this.currentRefetchInterval) ||\n      this.currentRefetchInterval === 0\n    ) {\n      return\n    }\n\n    this.refetchIntervalId = setInterval(() => {\n      if (\n        this.options.refetchIntervalInBackground ||\n        focusManager.isFocused()\n      ) {\n        this.executeFetch()\n      }\n    }, this.currentRefetchInterval)\n  }\n\n  private updateTimers(): void {\n    this.updateStaleTimeout()\n    this.updateRefetchInterval(this.computeRefetchInterval())\n  }\n\n  private clearStaleTimeout(): void {\n    if (this.staleTimeoutId) {\n      clearTimeout(this.staleTimeoutId)\n      this.staleTimeoutId = undefined\n    }\n  }\n\n  private clearRefetchInterval(): void {\n    if (this.refetchIntervalId) {\n      clearInterval(this.refetchIntervalId)\n      this.refetchIntervalId = undefined\n    }\n  }\n\n  protected createResult(\n    query: Query<TQueryFnData, TError, TQueryData, TQueryKey>,\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n  ): QueryObserverResult<TData, TError> {\n    const prevQuery = this.currentQuery\n    const prevOptions = this.options\n    const prevResult = this.currentResult as\n      | QueryObserverResult<TData, TError>\n      | undefined\n    const prevResultState = this.currentResultState\n    const prevResultOptions = this.currentResultOptions\n    const queryChange = query !== prevQuery\n    const queryInitialState = queryChange\n      ? query.state\n      : this.currentQueryInitialState\n    const prevQueryResult = queryChange\n      ? this.currentResult\n      : this.previousQueryResult\n\n    const { state } = query\n    let { dataUpdatedAt, error, errorUpdatedAt, fetchStatus, status } = state\n    let isPreviousData = false\n    let isPlaceholderData = false\n    let data: TData | undefined\n\n    // Optimistically set result in fetching state if needed\n    if (options._optimisticResults) {\n      const mounted = this.hasListeners()\n\n      const fetchOnMount = !mounted && shouldFetchOnMount(query, options)\n\n      const fetchOptionally =\n        mounted && shouldFetchOptionally(query, prevQuery, options, prevOptions)\n\n      if (fetchOnMount || fetchOptionally) {\n        fetchStatus = canFetch(query.options.networkMode)\n          ? 'fetching'\n          : 'paused'\n        if (!dataUpdatedAt) {\n          status = 'loading'\n        }\n      }\n      if (options._optimisticResults === 'isRestoring') {\n        fetchStatus = 'idle'\n      }\n    }\n\n    // Keep previous data if needed\n    if (\n      options.keepPreviousData &&\n      !state.dataUpdatedAt &&\n      prevQueryResult?.isSuccess &&\n      status !== 'error'\n    ) {\n      data = prevQueryResult.data\n      dataUpdatedAt = prevQueryResult.dataUpdatedAt\n      status = prevQueryResult.status\n      isPreviousData = true\n    }\n    // Select data if needed\n    else if (options.select && typeof state.data !== 'undefined') {\n      // Memoize select result\n      if (\n        prevResult &&\n        state.data === prevResultState?.data &&\n        options.select === this.selectFn\n      ) {\n        data = this.selectResult\n      } else {\n        try {\n          this.selectFn = options.select\n          data = options.select(state.data)\n          data = replaceData(prevResult?.data, data, options)\n          this.selectResult = data\n          this.selectError = null\n        } catch (selectError) {\n          if (process.env.NODE_ENV !== 'production') {\n            this.client.getLogger().error(selectError)\n          }\n          this.selectError = selectError as TError\n        }\n      }\n    }\n    // Use query data\n    else {\n      data = state.data as unknown as TData\n    }\n\n    // Show placeholder data if needed\n    if (\n      typeof options.placeholderData !== 'undefined' &&\n      typeof data === 'undefined' &&\n      status === 'loading'\n    ) {\n      let placeholderData\n\n      // Memoize placeholder data\n      if (\n        prevResult?.isPlaceholderData &&\n        options.placeholderData === prevResultOptions?.placeholderData\n      ) {\n        placeholderData = prevResult.data\n      } else {\n        placeholderData =\n          typeof options.placeholderData === 'function'\n            ? (options.placeholderData as PlaceholderDataFunction<TQueryData>)()\n            : options.placeholderData\n        if (options.select && typeof placeholderData !== 'undefined') {\n          try {\n            placeholderData = options.select(placeholderData)\n            this.selectError = null\n          } catch (selectError) {\n            if (process.env.NODE_ENV !== 'production') {\n              this.client.getLogger().error(selectError)\n            }\n            this.selectError = selectError as TError\n          }\n        }\n      }\n\n      if (typeof placeholderData !== 'undefined') {\n        status = 'success'\n        data = replaceData(prevResult?.data, placeholderData, options) as TData\n        isPlaceholderData = true\n      }\n    }\n\n    if (this.selectError) {\n      error = this.selectError as any\n      data = this.selectResult\n      errorUpdatedAt = Date.now()\n      status = 'error'\n    }\n\n    const isFetching = fetchStatus === 'fetching'\n    const isLoading = status === 'loading'\n    const isError = status === 'error'\n\n    const result: QueryObserverBaseResult<TData, TError> = {\n      status,\n      fetchStatus,\n      isLoading,\n      isSuccess: status === 'success',\n      isError,\n      isInitialLoading: isLoading && isFetching,\n      data,\n      dataUpdatedAt,\n      error,\n      errorUpdatedAt,\n      failureCount: state.fetchFailureCount,\n      failureReason: state.fetchFailureReason,\n      errorUpdateCount: state.errorUpdateCount,\n      isFetched: state.dataUpdateCount > 0 || state.errorUpdateCount > 0,\n      isFetchedAfterMount:\n        state.dataUpdateCount > queryInitialState.dataUpdateCount ||\n        state.errorUpdateCount > queryInitialState.errorUpdateCount,\n      isFetching,\n      isRefetching: isFetching && !isLoading,\n      isLoadingError: isError && state.dataUpdatedAt === 0,\n      isPaused: fetchStatus === 'paused',\n      isPlaceholderData,\n      isPreviousData,\n      isRefetchError: isError && state.dataUpdatedAt !== 0,\n      isStale: isStale(query, options),\n      refetch: this.refetch,\n      remove: this.remove,\n    }\n\n    return result as QueryObserverResult<TData, TError>\n  }\n\n  updateResult(notifyOptions?: NotifyOptions): void {\n    const prevResult = this.currentResult as\n      | QueryObserverResult<TData, TError>\n      | undefined\n\n    const nextResult = this.createResult(this.currentQuery, this.options)\n    this.currentResultState = this.currentQuery.state\n    this.currentResultOptions = this.options\n\n    // Only notify and update result if something has changed\n    if (shallowEqualObjects(nextResult, prevResult)) {\n      return\n    }\n\n    this.currentResult = nextResult\n\n    // Determine which callbacks to trigger\n    const defaultNotifyOptions: NotifyOptions = { cache: true }\n\n    const shouldNotifyListeners = (): boolean => {\n      if (!prevResult) {\n        return true\n      }\n\n      const { notifyOnChangeProps } = this.options\n\n      if (\n        notifyOnChangeProps === 'all' ||\n        (!notifyOnChangeProps && !this.trackedProps.size)\n      ) {\n        return true\n      }\n\n      const includedProps = new Set(notifyOnChangeProps ?? this.trackedProps)\n\n      if (this.options.useErrorBoundary) {\n        includedProps.add('error')\n      }\n\n      return Object.keys(this.currentResult).some((key) => {\n        const typedKey = key as keyof QueryObserverResult\n        const changed = this.currentResult[typedKey] !== prevResult[typedKey]\n        return changed && includedProps.has(typedKey)\n      })\n    }\n\n    if (notifyOptions?.listeners !== false && shouldNotifyListeners()) {\n      defaultNotifyOptions.listeners = true\n    }\n\n    this.notify({ ...defaultNotifyOptions, ...notifyOptions })\n  }\n\n  private updateQuery(): void {\n    const query = this.client.getQueryCache().build(this.client, this.options)\n\n    if (query === this.currentQuery) {\n      return\n    }\n\n    const prevQuery = this.currentQuery as\n      | Query<TQueryFnData, TError, TQueryData, TQueryKey>\n      | undefined\n    this.currentQuery = query\n    this.currentQueryInitialState = query.state\n    this.previousQueryResult = this.currentResult\n\n    if (this.hasListeners()) {\n      prevQuery?.removeObserver(this)\n      query.addObserver(this)\n    }\n  }\n\n  onQueryUpdate(action: Action<TData, TError>): void {\n    const notifyOptions: NotifyOptions = {}\n\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = !action.manual\n    } else if (action.type === 'error' && !isCancelledError(action.error)) {\n      notifyOptions.onError = true\n    }\n\n    this.updateResult(notifyOptions)\n\n    if (this.hasListeners()) {\n      this.updateTimers()\n    }\n  }\n\n  private notify(notifyOptions: NotifyOptions): void {\n    notifyManager.batch(() => {\n      // First trigger the configuration callbacks\n      if (notifyOptions.onSuccess) {\n        this.options.onSuccess?.(this.currentResult.data!)\n        this.options.onSettled?.(this.currentResult.data!, null)\n      } else if (notifyOptions.onError) {\n        this.options.onError?.(this.currentResult.error!)\n        this.options.onSettled?.(undefined, this.currentResult.error!)\n      }\n\n      // Then trigger the listeners\n      if (notifyOptions.listeners) {\n        this.listeners.forEach((listener) => {\n          listener(this.currentResult)\n        })\n      }\n\n      // Then the cache listeners\n      if (notifyOptions.cache) {\n        this.client.getQueryCache().notify({\n          query: this.currentQuery,\n          type: 'observerResultsUpdated',\n        })\n      }\n    })\n  }\n}\n\nfunction shouldLoadOnMount(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any>,\n): boolean {\n  return (\n    options.enabled !== false &&\n    !query.state.dataUpdatedAt &&\n    !(query.state.status === 'error' && options.retryOnMount === false)\n  )\n}\n\nfunction shouldFetchOnMount(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return (\n    shouldLoadOnMount(query, options) ||\n    (query.state.dataUpdatedAt > 0 &&\n      shouldFetchOn(query, options, options.refetchOnMount))\n  )\n}\n\nfunction shouldFetchOn(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n  field: typeof options['refetchOnMount'] &\n    typeof options['refetchOnWindowFocus'] &\n    typeof options['refetchOnReconnect'],\n) {\n  if (options.enabled !== false) {\n    const value = typeof field === 'function' ? field(query) : field\n\n    return value === 'always' || (value !== false && isStale(query, options))\n  }\n  return false\n}\n\nfunction shouldFetchOptionally(\n  query: Query<any, any, any, any>,\n  prevQuery: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n  prevOptions: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return (\n    options.enabled !== false &&\n    (query !== prevQuery || prevOptions.enabled === false) &&\n    (!options.suspense || query.state.status !== 'error') &&\n    isStale(query, options)\n  )\n}\n\nfunction isStale(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n): boolean {\n  return query.isStaleByTime(options.staleTime)\n}\n","// Temporary workaround due to an issue with react-native uSES - https://github.com/TanStack/query/pull/3601\nimport { useSyncExternalStore as uSES } from 'use-sync-external-store/shim/index.js'\n\nexport const useSyncExternalStore = uSES\n","'use client'\nimport * as React from 'react'\n\n// CONTEXT\n\nexport interface QueryErrorResetBoundaryValue {\n  clearReset: () => void\n  isReset: () => boolean\n  reset: () => void\n}\n\nfunction createValue(): QueryErrorResetBoundaryValue {\n  let isReset = false\n  return {\n    clearReset: () => {\n      isReset = false\n    },\n    reset: () => {\n      isReset = true\n    },\n    isReset: () => {\n      return isReset\n    },\n  }\n}\n\nconst QueryErrorResetBoundaryContext = React.createContext(createValue())\n\n// HOOK\n\nexport const useQueryErrorResetBoundary = () =>\n  React.useContext(QueryErrorResetBoundaryContext)\n\n// COMPONENT\n\nexport interface QueryErrorResetBoundaryProps {\n  children:\n    | ((value: QueryErrorResetBoundaryValue) => React.ReactNode)\n    | React.ReactNode\n}\n\nexport const QueryErrorResetBoundary = ({\n  children,\n}: QueryErrorResetBoundaryProps) => {\n  const [value] = React.useState(() => createValue())\n  return (\n    <QueryErrorResetBoundaryContext.Provider value={value}>\n      {typeof children === 'function'\n        ? (children as Function)(value)\n        : children}\n    </QueryErrorResetBoundaryContext.Provider>\n  )\n}\n","'use client'\nimport * as React from 'react'\n\nconst IsRestoringContext = React.createContext(false)\n\nexport const useIsRestoring = () => React.useContext(IsRestoringContext)\nexport const IsRestoringProvider = IsRestoringContext.Provider\n","import type {\n  DefaultedQueryObserverOptions,\n  Query,\n  QueryKey,\n  QueryObserverResult,\n  UseErrorBoundary,\n} from '@tanstack/query-core'\nimport type { QueryErrorResetBoundaryValue } from './QueryErrorResetBoundary'\nimport * as React from 'react'\nimport { shouldThrowError } from './utils'\n\nexport const ensurePreventErrorBoundaryRetry = <\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>(\n  options: DefaultedQueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >,\n  errorResetBoundary: QueryErrorResetBoundaryValue,\n) => {\n  if (options.suspense || options.useErrorBoundary) {\n    // Prevent retrying failed query if the error boundary has not been reset yet\n    if (!errorResetBoundary.isReset()) {\n      options.retryOnMount = false\n    }\n  }\n}\n\nexport const useClearResetErrorBoundary = (\n  errorResetBoundary: QueryErrorResetBoundaryValue,\n) => {\n  React.useEffect(() => {\n    errorResetBoundary.clearReset()\n  }, [errorResetBoundary])\n}\n\nexport const getHasError = <\n  TData,\n  TError,\n  TQueryFnData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>({\n  result,\n  errorResetBoundary,\n  useErrorBoundary,\n  query,\n}: {\n  result: QueryObserverResult<TData, TError>\n  errorResetBoundary: QueryErrorResetBoundaryValue\n  useErrorBoundary: UseErrorBoundary<\n    TQueryFnData,\n    TError,\n    TQueryData,\n    TQueryKey\n  >\n  query: Query<TQueryFnData, TError, TQueryData, TQueryKey>\n}) => {\n  return (\n    result.isError &&\n    !errorResetBoundary.isReset() &&\n    !result.isFetching &&\n    shouldThrowError(useErrorBoundary, [result.error, query])\n  )\n}\n","export function shouldThrowError<T extends (...args: any[]) => boolean>(\n  _useErrorBoundary: boolean | T | undefined,\n  params: Parameters<T>,\n): boolean {\n  // Allow useErrorBoundary function to override throwing behavior on a per-error basis\n  if (typeof _useErrorBoundary === 'function') {\n    return _useErrorBoundary(...params)\n  }\n\n  return !!_useErrorBoundary\n}\n","import * as React from 'react'\nimport { useSyncExternalStore } from './useSyncExternalStore'\n\nimport type { QueryKey, QueryObserver } from '@tanstack/query-core'\nimport { notifyManager } from '@tanstack/query-core'\nimport { useQueryErrorResetBoundary } from './QueryErrorResetBoundary'\nimport { useQueryClient } from './QueryClientProvider'\nimport type { UseBaseQueryOptions } from './types'\nimport { useIsRestoring } from './isRestoring'\nimport {\n  ensurePreventErrorBoundaryRetry,\n  getHasError,\n  useClearResetErrorBoundary,\n} from './errorBoundaryUtils'\nimport { ensureStaleTime, shouldSuspend, fetchOptimistic } from './suspense'\n\nexport function useBaseQuery<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>(\n  options: UseBaseQueryOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >,\n  Observer: typeof QueryObserver,\n) {\n  const queryClient = useQueryClient({ context: options.context })\n  const isRestoring = useIsRestoring()\n  const errorResetBoundary = useQueryErrorResetBoundary()\n  const defaultedOptions = queryClient.defaultQueryOptions(options)\n\n  // Make sure results are optimistically set in fetching state before subscribing or updating options\n  defaultedOptions._optimisticResults = isRestoring\n    ? 'isRestoring'\n    : 'optimistic'\n\n  // Include callbacks in batch renders\n  if (defaultedOptions.onError) {\n    defaultedOptions.onError = notifyManager.batchCalls(\n      defaultedOptions.onError,\n    )\n  }\n\n  if (defaultedOptions.onSuccess) {\n    defaultedOptions.onSuccess = notifyManager.batchCalls(\n      defaultedOptions.onSuccess,\n    )\n  }\n\n  if (defaultedOptions.onSettled) {\n    defaultedOptions.onSettled = notifyManager.batchCalls(\n      defaultedOptions.onSettled,\n    )\n  }\n\n  ensureStaleTime(defaultedOptions)\n  ensurePreventErrorBoundaryRetry(defaultedOptions, errorResetBoundary)\n\n  useClearResetErrorBoundary(errorResetBoundary)\n\n  const [observer] = React.useState(\n    () =>\n      new Observer<TQueryFnData, TError, TData, TQueryData, TQueryKey>(\n        queryClient,\n        defaultedOptions,\n      ),\n  )\n\n  const result = observer.getOptimisticResult(defaultedOptions)\n\n  useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) =>\n        isRestoring\n          ? () => undefined\n          : observer.subscribe(notifyManager.batchCalls(onStoreChange)),\n      [observer, isRestoring],\n    ),\n    () => observer.getCurrentResult(),\n    () => observer.getCurrentResult(),\n  )\n\n  React.useEffect(() => {\n    // Do not notify on updates because of changes in the options because\n    // these changes should already be reflected in the optimistic result.\n    observer.setOptions(defaultedOptions, { listeners: false })\n  }, [defaultedOptions, observer])\n\n  // Handle suspense\n  if (shouldSuspend(defaultedOptions, result, isRestoring)) {\n    throw fetchOptimistic(defaultedOptions, observer, errorResetBoundary)\n  }\n\n  // Handle error boundary\n  if (\n    getHasError({\n      result,\n      errorResetBoundary,\n      useErrorBoundary: defaultedOptions.useErrorBoundary,\n      query: observer.getCurrentQuery(),\n    })\n  ) {\n    throw result.error\n  }\n\n  // Handle result property usage tracking\n  return !defaultedOptions.notifyOnChangeProps\n    ? observer.trackResult(result)\n    : result\n}\n","import type { DefaultedQueryObserverOptions } from '@tanstack/query-core'\nimport type { QueryObserver } from '@tanstack/query-core'\nimport type { QueryErrorResetBoundaryValue } from './QueryErrorResetBoundary'\nimport type { QueryObserverResult } from '@tanstack/query-core'\nimport type { QueryKey } from '@tanstack/query-core'\n\nexport const ensureStaleTime = (\n  defaultedOptions: DefaultedQueryObserverOptions<any, any, any, any, any>,\n) => {\n  if (defaultedOptions.suspense) {\n    // Always set stale time when using suspense to prevent\n    // fetching again when directly mounting after suspending\n    if (typeof defaultedOptions.staleTime !== 'number') {\n      defaultedOptions.staleTime = 1000\n    }\n  }\n}\n\nexport const willFetch = (\n  result: QueryObserverResult<any, any>,\n  isRestoring: boolean,\n) => result.isLoading && result.isFetching && !isRestoring\n\nexport const shouldSuspend = (\n  defaultedOptions:\n    | DefaultedQueryObserverOptions<any, any, any, any, any>\n    | undefined,\n  result: QueryObserverResult<any, any>,\n  isRestoring: boolean,\n) => defaultedOptions?.suspense && willFetch(result, isRestoring)\n\nexport const fetchOptimistic = <\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>(\n  defaultedOptions: DefaultedQueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >,\n  observer: QueryObserver<TQueryFnData, TError, TData, TQueryData, TQueryKey>,\n  errorResetBoundary: QueryErrorResetBoundaryValue,\n) =>\n  observer\n    .fetchOptimistic(defaultedOptions)\n    .then(({ data }) => {\n      defaultedOptions.onSuccess?.(data as TData)\n      defaultedOptions.onSettled?.(data, null)\n    })\n    .catch((error) => {\n      errorResetBoundary.clearReset()\n      defaultedOptions.onError?.(error)\n      defaultedOptions.onSettled?.(undefined, error)\n    })\n","import type { QueryFunction, QueryKey } from '@tanstack/query-core'\nimport { parseQueryArgs, QueryObserver } from '@tanstack/query-core'\nimport type {\n  DefinedUseQueryResult,\n  UseQueryOptions,\n  UseQueryResult,\n} from './types'\nimport { useBaseQuery } from './useBaseQuery'\n\n// HOOK\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'initialData'\n  > & { initialData?: () => undefined },\n): UseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'initialData'\n  > & { initialData: TQueryFnData | (() => TQueryFnData) },\n): DefinedUseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  options: UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n): UseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey' | 'initialData'\n  > & { initialData?: () => undefined },\n): UseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey' | 'initialData'\n  > & { initialData: TQueryFnData | (() => TQueryFnData) },\n): DefinedUseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey'\n  >,\n): UseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey' | 'queryFn' | 'initialData'\n  > & { initialData?: () => undefined },\n): UseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey' | 'queryFn' | 'initialData'\n  > & { initialData: TQueryFnData | (() => TQueryFnData) },\n): DefinedUseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n  options?: Omit<\n    UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    'queryKey' | 'queryFn'\n  >,\n): UseQueryResult<TData, TError>\n\nexport function useQuery<\n  TQueryFnData,\n  TError,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  arg1: TQueryKey | UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  arg2?:\n    | QueryFunction<TQueryFnData, TQueryKey>\n    | UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n  arg3?: UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n): UseQueryResult<TData, TError> {\n  const parsedOptions = parseQueryArgs(arg1, arg2, arg3)\n  return useBaseQuery(parsedOptions, QueryObserver)\n}\n","import * as React from 'react'\nexport * from '@tanstack/table-core'\n\nimport {\n  TableOptions,\n  TableOptionsResolved,\n  RowData,\n  createTable,\n} from '@tanstack/table-core'\n\nexport type Renderable<TProps> = React.ReactNode | React.ComponentType<TProps>\n\n//\n\nexport function flexRender<TProps extends object>(\n  Comp: Renderable<TProps>,\n  props: TProps\n): React.ReactNode | JSX.Element {\n  return !Comp ? null : isReactComponent<TProps>(Comp) ? (\n    <Comp {...props} />\n  ) : (\n    Comp\n  )\n}\n\nfunction isReactComponent<TProps>(\n  component: unknown\n): component is React.ComponentType<TProps> {\n  return (\n    isClassComponent(component) ||\n    typeof component === 'function' ||\n    isExoticComponent(component)\n  )\n}\n\nfunction isClassComponent(component: any) {\n  return (\n    typeof component === 'function' &&\n    (() => {\n      const proto = Object.getPrototypeOf(component)\n      return proto.prototype && proto.prototype.isReactComponent\n    })()\n  )\n}\n\nfunction isExoticComponent(component: any) {\n  return (\n    typeof component === 'object' &&\n    typeof component.$$typeof === 'symbol' &&\n    ['react.memo', 'react.forward_ref'].includes(component.$$typeof.description)\n  )\n}\n\nexport function useReactTable<TData extends RowData>(\n  options: TableOptions<TData>\n) {\n  // Compose in the generic options to the user options\n  const resolvedOptions: TableOptionsResolved<TData> = {\n    state: {}, // Dummy state\n    onStateChange: () => {}, // noop\n    renderFallbackValue: null,\n    ...options,\n  }\n\n  // Create a new table and store it in state\n  const [tableRef] = React.useState(() => ({\n    current: createTable<TData>(resolvedOptions),\n  }))\n\n  // By default, manage table state here using the table's initial state\n  const [state, setState] = React.useState(() => tableRef.current.initialState)\n\n  // Compose the default state above with any user state. This will allow the user\n  // to only control a subset of the state if desired.\n  tableRef.current.setOptions(prev => ({\n    ...prev,\n    ...options,\n    state: {\n      ...state,\n      ...options.state,\n    },\n    // Similarly, we'll maintain both our internal state and any user-provided\n    // state.\n    onStateChange: updater => {\n      setState(updater)\n      options.onStateChange?.(updater)\n    },\n  }))\n\n  return tableRef.current\n}\n","import { TableState, Updater } from './types'\n\nexport type PartialKeys<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>\nexport type RequiredKeys<T, K extends keyof T> = Omit<T, K> &\n  Required<Pick<T, K>>\nexport type Overwrite<T, U extends { [TKey in keyof T]?: any }> = Omit<\n  T,\n  keyof U\n> &\n  U\n\nexport type UnionToIntersection<T> = (\n  T extends any ? (x: T) => any : never\n) extends (x: infer R) => any\n  ? R\n  : never\n\nexport type IsAny<T, Y, N> = 1 extends 0 & T ? Y : N\nexport type IsKnown<T, Y, N> = unknown extends T ? N : Y\n\ntype ComputeRange<\n  N extends number,\n  Result extends Array<unknown> = []\n> = Result['length'] extends N\n  ? Result\n  : ComputeRange<N, [...Result, Result['length']]>\ntype Index40 = ComputeRange<40>[number]\n\n// Is this type a tuple?\ntype IsTuple<T> = T extends readonly any[] & { length: infer Length }\n  ? Length extends Index40\n    ? T\n    : never\n  : never\n\n// If this type is a tuple, what indices are allowed?\ntype AllowedIndexes<\n  Tuple extends ReadonlyArray<any>,\n  Keys extends number = never\n> = Tuple extends readonly []\n  ? Keys\n  : Tuple extends readonly [infer _, ...infer Tail]\n  ? AllowedIndexes<Tail, Keys | Tail['length']>\n  : Keys\n\nexport type DeepKeys<T> = unknown extends T\n  ? keyof T\n  : object extends T\n  ? string\n  : T extends readonly any[] & IsTuple<T>\n  ? AllowedIndexes<T> | DeepKeysPrefix<T, AllowedIndexes<T>>\n  : T extends any[]\n  ? never & 'Dynamic length array indexing is not supported'\n  : T extends Date\n  ? never\n  : T extends object\n  ? (keyof T & string) | DeepKeysPrefix<T, keyof T>\n  : never\n\ntype DeepKeysPrefix<T, TPrefix> = TPrefix extends keyof T & (number | string)\n  ? `${TPrefix}.${DeepKeys<T[TPrefix]> & string}`\n  : never\n\nexport type DeepValue<T, TProp> = T extends Record<string | number, any>\n  ? TProp extends `${infer TBranch}.${infer TDeepProp}`\n    ? DeepValue<T[TBranch], TDeepProp>\n    : T[TProp & string]\n  : never\n\nexport type NoInfer<T> = [T][T extends any ? 0 : never]\n\nexport type Getter<TValue> = <TTValue = TValue>() => NoInfer<TTValue>\n\n///\n\nexport function functionalUpdate<T>(updater: Updater<T>, input: T): T {\n  return typeof updater === 'function'\n    ? (updater as (input: T) => T)(input)\n    : updater\n}\n\nexport function noop() {\n  //\n}\n\nexport function makeStateUpdater<K extends keyof TableState>(\n  key: K,\n  instance: unknown\n) {\n  return (updater: Updater<TableState[K]>) => {\n    ;(instance as any).setState(<TTableState>(old: TTableState) => {\n      return {\n        ...old,\n        [key]: functionalUpdate(updater, (old as any)[key]),\n      }\n    })\n  }\n}\n\ntype AnyFunction = (...args: any) => any\n\nexport function isFunction<T extends AnyFunction>(d: any): d is T {\n  return d instanceof Function\n}\n\nexport function flattenBy<TNode>(\n  arr: TNode[],\n  getChildren: (item: TNode) => TNode[]\n) {\n  const flat: TNode[] = []\n\n  const recurse = (subArr: TNode[]) => {\n    subArr.forEach(item => {\n      flat.push(item)\n      const children = getChildren(item)\n      if (children?.length) {\n        recurse(children)\n      }\n    })\n  }\n\n  recurse(arr)\n\n  return flat\n}\n\nexport function memo<TDeps extends readonly any[], TResult>(\n  getDeps: () => [...TDeps],\n  fn: (...args: NoInfer<[...TDeps]>) => TResult,\n  opts: {\n    key: any\n    debug?: () => any\n    onChange?: (result: TResult) => void\n  }\n): () => TResult {\n  let deps: any[] = []\n  let result: TResult | undefined\n\n  return () => {\n    let depTime: number\n    if (opts.key && opts.debug) depTime = Date.now()\n\n    const newDeps = getDeps()\n\n    const depsChanged =\n      newDeps.length !== deps.length ||\n      newDeps.some((dep: any, index: number) => deps[index] !== dep)\n\n    if (!depsChanged) {\n      return result!\n    }\n\n    deps = newDeps\n\n    let resultTime: number\n    if (opts.key && opts.debug) resultTime = Date.now()\n\n    result = fn(...newDeps)\n    opts?.onChange?.(result)\n\n    if (opts.key && opts.debug) {\n      if (opts?.debug()) {\n        const depEndTime = Math.round((Date.now() - depTime!) * 100) / 100\n        const resultEndTime = Math.round((Date.now() - resultTime!) * 100) / 100\n        const resultFpsPercentage = resultEndTime / 16\n\n        const pad = (str: number | string, num: number) => {\n          str = String(str)\n          while (str.length < num) {\n            str = ' ' + str\n          }\n          return str\n        }\n\n        console.info(\n          `%c⏱ ${pad(resultEndTime, 5)} /${pad(depEndTime, 5)} ms`,\n          `\n            font-size: .6rem;\n            font-weight: bold;\n            color: hsl(${Math.max(\n              0,\n              Math.min(120 - 120 * resultFpsPercentage, 120)\n            )}deg 100% 31%);`,\n          opts?.key\n        )\n      }\n    }\n\n    return result!\n  }\n}\n","import { RowData, Column, Header, HeaderGroup, Table } from '../types'\nimport { memo } from '../utils'\nimport { TableFeature } from './table'\n\nexport interface CoreHeaderGroup<TData extends RowData> {\n  id: string\n  depth: number\n  headers: Header<TData, unknown>[]\n}\n\nexport interface HeaderContext<TData, TValue> {\n  table: Table<TData>\n  header: Header<TData, TValue>\n  column: Column<TData, TValue>\n}\n\nexport interface CoreHeader<TData extends RowData, TValue> {\n  id: string\n  index: number\n  depth: number\n  column: Column<TData, TValue>\n  headerGroup: HeaderGroup<TData>\n  subHeaders: Header<TData, TValue>[]\n  colSpan: number\n  rowSpan: number\n  getLeafHeaders: () => Header<TData, unknown>[]\n  isPlaceholder: boolean\n  placeholderId?: string\n  getContext: () => HeaderContext<TData, TValue>\n}\n\nexport interface HeadersInstance<TData extends RowData> {\n  getHeaderGroups: () => HeaderGroup<TData>[]\n  getLeftHeaderGroups: () => HeaderGroup<TData>[]\n  getCenterHeaderGroups: () => HeaderGroup<TData>[]\n  getRightHeaderGroups: () => HeaderGroup<TData>[]\n\n  getFooterGroups: () => HeaderGroup<TData>[]\n  getLeftFooterGroups: () => HeaderGroup<TData>[]\n  getCenterFooterGroups: () => HeaderGroup<TData>[]\n  getRightFooterGroups: () => HeaderGroup<TData>[]\n\n  getFlatHeaders: () => Header<TData, unknown>[]\n  getLeftFlatHeaders: () => Header<TData, unknown>[]\n  getCenterFlatHeaders: () => Header<TData, unknown>[]\n  getRightFlatHeaders: () => Header<TData, unknown>[]\n\n  getLeafHeaders: () => Header<TData, unknown>[]\n  getLeftLeafHeaders: () => Header<TData, unknown>[]\n  getCenterLeafHeaders: () => Header<TData, unknown>[]\n  getRightLeafHeaders: () => Header<TData, unknown>[]\n}\n\n//\n\nfunction createHeader<TData extends RowData, TValue>(\n  table: Table<TData>,\n  column: Column<TData, TValue>,\n  options: {\n    id?: string\n    isPlaceholder?: boolean\n    placeholderId?: string\n    index: number\n    depth: number\n  }\n): Header<TData, TValue> {\n  const id = options.id ?? column.id\n\n  let header: CoreHeader<TData, TValue> = {\n    id,\n    column,\n    index: options.index,\n    isPlaceholder: !!options.isPlaceholder,\n    placeholderId: options.placeholderId,\n    depth: options.depth,\n    subHeaders: [],\n    colSpan: 0,\n    rowSpan: 0,\n    headerGroup: null!,\n    getLeafHeaders: (): Header<TData, unknown>[] => {\n      const leafHeaders: Header<TData, unknown>[] = []\n\n      const recurseHeader = (h: CoreHeader<TData, any>) => {\n        if (h.subHeaders && h.subHeaders.length) {\n          h.subHeaders.map(recurseHeader)\n        }\n        leafHeaders.push(h as Header<TData, unknown>)\n      }\n\n      recurseHeader(header)\n\n      return leafHeaders\n    },\n    getContext: () => ({\n      table,\n      header: header as Header<TData, TValue>,\n      column,\n    }),\n  }\n\n  table._features.forEach(feature => {\n    Object.assign(header, feature.createHeader?.(header, table))\n  })\n\n  return header as Header<TData, TValue>\n}\n\nexport const Headers: TableFeature = {\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): HeadersInstance<TData> => {\n    return {\n      // Header Groups\n\n      getHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, left, right) => {\n          const leftColumns =\n            left\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          const rightColumns =\n            right\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          const centerColumns = leafColumns.filter(\n            column => !left?.includes(column.id) && !right?.includes(column.id)\n          )\n\n          const headerGroups = buildHeaderGroups(\n            allColumns,\n            [...leftColumns, ...centerColumns, ...rightColumns],\n            table\n          )\n\n          return headerGroups\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getCenterHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, left, right) => {\n          leafColumns = leafColumns.filter(\n            column => !left?.includes(column.id) && !right?.includes(column.id)\n          )\n          return buildHeaderGroups(allColumns, leafColumns, table, 'center')\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'development' && 'getCenterHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.left,\n        ],\n        (allColumns, leafColumns, left) => {\n          const orderedLeafColumns =\n            left\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          return buildHeaderGroups(\n            allColumns,\n            orderedLeafColumns,\n            table,\n            'left'\n          )\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, right) => {\n          const orderedLeafColumns =\n            right\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          return buildHeaderGroups(\n            allColumns,\n            orderedLeafColumns,\n            table,\n            'right'\n          )\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      // Footer Groups\n\n      getFooterGroups: memo(\n        () => [table.getHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftFooterGroups: memo(\n        () => [table.getLeftHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getCenterFooterGroups: memo(\n        () => [table.getCenterHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'development' && 'getCenterFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightFooterGroups: memo(\n        () => [table.getRightHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      // Flat Headers\n\n      getFlatHeaders: memo(\n        () => [table.getHeaderGroups()],\n        headerGroups => {\n          return headerGroups\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftFlatHeaders: memo(\n        () => [table.getLeftHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getCenterFlatHeaders: memo(\n        () => [table.getCenterHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightFlatHeaders: memo(\n        () => [table.getRightHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      // Leaf Headers\n\n      getCenterLeafHeaders: memo(\n        () => [table.getCenterFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftLeafHeaders: memo(\n        () => [table.getLeftFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightLeafHeaders: memo(\n        () => [table.getRightFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeafHeaders: memo(\n        () => [\n          table.getLeftHeaderGroups(),\n          table.getCenterHeaderGroups(),\n          table.getRightHeaderGroups(),\n        ],\n        (left, center, right) => {\n          return [\n            ...(left[0]?.headers ?? []),\n            ...(center[0]?.headers ?? []),\n            ...(right[0]?.headers ?? []),\n          ]\n            .map(header => {\n              return header.getLeafHeaders()\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n    }\n  },\n}\n\nexport function buildHeaderGroups<TData extends RowData>(\n  allColumns: Column<TData, unknown>[],\n  columnsToGroup: Column<TData, unknown>[],\n  table: Table<TData>,\n  headerFamily?: 'center' | 'left' | 'right'\n) {\n  // Find the max depth of the columns:\n  // build the leaf column row\n  // build each buffer row going up\n  //    placeholder for non-existent level\n  //    real column for existing level\n\n  let maxDepth = 0\n\n  const findMaxDepth = (columns: Column<TData, unknown>[], depth = 1) => {\n    maxDepth = Math.max(maxDepth, depth)\n\n    columns\n      .filter(column => column.getIsVisible())\n      .forEach(column => {\n        if (column.columns?.length) {\n          findMaxDepth(column.columns, depth + 1)\n        }\n      }, 0)\n  }\n\n  findMaxDepth(allColumns)\n\n  let headerGroups: HeaderGroup<TData>[] = []\n\n  const createHeaderGroup = (\n    headersToGroup: Header<TData, unknown>[],\n    depth: number\n  ) => {\n    // The header group we are creating\n    const headerGroup: HeaderGroup<TData> = {\n      depth,\n      id: [headerFamily, `${depth}`].filter(Boolean).join('_'),\n      headers: [],\n    }\n\n    // The parent columns we're going to scan next\n    const pendingParentHeaders: Header<TData, unknown>[] = []\n\n    // Scan each column for parents\n    headersToGroup.forEach(headerToGroup => {\n      // What is the latest (last) parent column?\n\n      const latestPendingParentHeader = [...pendingParentHeaders].reverse()[0]\n\n      const isLeafHeader = headerToGroup.column.depth === headerGroup.depth\n\n      let column: Column<TData, unknown>\n      let isPlaceholder = false\n\n      if (isLeafHeader && headerToGroup.column.parent) {\n        // The parent header is new\n        column = headerToGroup.column.parent\n      } else {\n        // The parent header is repeated\n        column = headerToGroup.column\n        isPlaceholder = true\n      }\n\n      if (\n        latestPendingParentHeader &&\n        latestPendingParentHeader?.column === column\n      ) {\n        // This column is repeated. Add it as a sub header to the next batch\n        latestPendingParentHeader.subHeaders.push(headerToGroup)\n      } else {\n        // This is a new header. Let's create it\n        const header = createHeader(table, column, {\n          id: [headerFamily, depth, column.id, headerToGroup?.id]\n            .filter(Boolean)\n            .join('_'),\n          isPlaceholder,\n          placeholderId: isPlaceholder\n            ? `${pendingParentHeaders.filter(d => d.column === column).length}`\n            : undefined,\n          depth,\n          index: pendingParentHeaders.length,\n        })\n\n        // Add the headerToGroup as a subHeader of the new header\n        header.subHeaders.push(headerToGroup)\n        // Add the new header to the pendingParentHeaders to get grouped\n        // in the next batch\n        pendingParentHeaders.push(header)\n      }\n\n      headerGroup.headers.push(headerToGroup)\n      headerToGroup.headerGroup = headerGroup\n    })\n\n    headerGroups.push(headerGroup)\n\n    if (depth > 0) {\n      createHeaderGroup(pendingParentHeaders, depth - 1)\n    }\n  }\n\n  const bottomHeaders = columnsToGroup.map((column, index) =>\n    createHeader(table, column, {\n      depth: maxDepth,\n      index,\n    })\n  )\n\n  createHeaderGroup(bottomHeaders, maxDepth - 1)\n\n  headerGroups.reverse()\n\n  // headerGroups = headerGroups.filter(headerGroup => {\n  //   return !headerGroup.headers.every(header => header.isPlaceholder)\n  // })\n\n  const recurseHeadersForSpans = (\n    headers: Header<TData, unknown>[]\n  ): { colSpan: number; rowSpan: number }[] => {\n    const filteredHeaders = headers.filter(header =>\n      header.column.getIsVisible()\n    )\n\n    return filteredHeaders.map(header => {\n      let colSpan = 0\n      let rowSpan = 0\n      let childRowSpans = [0]\n\n      if (header.subHeaders && header.subHeaders.length) {\n        childRowSpans = []\n\n        recurseHeadersForSpans(header.subHeaders).forEach(\n          ({ colSpan: childColSpan, rowSpan: childRowSpan }) => {\n            colSpan += childColSpan\n            childRowSpans.push(childRowSpan)\n          }\n        )\n      } else {\n        colSpan = 1\n      }\n\n      const minChildRowSpan = Math.min(...childRowSpans)\n      rowSpan = rowSpan + minChildRowSpan\n\n      header.colSpan = colSpan\n      header.rowSpan = rowSpan\n\n      return { colSpan, rowSpan }\n    })\n  }\n\n  recurseHeadersForSpans(headerGroups[0]?.headers ?? [])\n\n  return headerGroups\n}\n","import { TableFeature } from '../core/table'\nimport { RowData, Column, Header, OnChangeFn, Table, Updater } from '../types'\nimport { makeStateUpdater } from '../utils'\nimport { ColumnPinningPosition } from './Pinning'\n\n//\n\nexport interface ColumnSizingTableState {\n  columnSizing: ColumnSizingState\n  columnSizingInfo: ColumnSizingInfoState\n}\n\nexport type ColumnSizingState = Record<string, number>\n\nexport interface ColumnSizingInfoState {\n  startOffset: null | number\n  startSize: null | number\n  deltaOffset: null | number\n  deltaPercentage: null | number\n  isResizingColumn: false | string\n  columnSizingStart: [string, number][]\n}\n\nexport type ColumnResizeMode = 'onChange' | 'onEnd'\n\nexport interface ColumnSizingOptions {\n  enableColumnResizing?: boolean\n  columnResizeMode?: ColumnResizeMode\n  onColumnSizingChange?: OnChangeFn<ColumnSizingState>\n  onColumnSizingInfoChange?: OnChangeFn<ColumnSizingInfoState>\n}\n\nexport interface ColumnSizingDefaultOptions {\n  columnResizeMode: ColumnResizeMode\n  onColumnSizingChange: OnChangeFn<ColumnSizingState>\n  onColumnSizingInfoChange: OnChangeFn<ColumnSizingInfoState>\n}\n\nexport interface ColumnSizingInstance {\n  setColumnSizing: (updater: Updater<ColumnSizingState>) => void\n  setColumnSizingInfo: (updater: Updater<ColumnSizingInfoState>) => void\n  resetColumnSizing: (defaultState?: boolean) => void\n  resetHeaderSizeInfo: (defaultState?: boolean) => void\n  getTotalSize: () => number\n  getLeftTotalSize: () => number\n  getCenterTotalSize: () => number\n  getRightTotalSize: () => number\n}\n\nexport interface ColumnSizingColumnDef {\n  enableResizing?: boolean\n  size?: number\n  minSize?: number\n  maxSize?: number\n}\n\nexport interface ColumnSizingColumn {\n  getSize: () => number\n  getStart: (position?: ColumnPinningPosition) => number\n  getCanResize: () => boolean\n  getIsResizing: () => boolean\n  resetSize: () => void\n}\n\nexport interface ColumnSizingHeader {\n  getSize: () => number\n  getStart: (position?: ColumnPinningPosition) => number\n  getResizeHandler: () => (event: unknown) => void\n}\n\n//\n\nexport const defaultColumnSizing = {\n  size: 150,\n  minSize: 20,\n  maxSize: Number.MAX_SAFE_INTEGER,\n}\n\nconst getDefaultColumnSizingInfoState = (): ColumnSizingInfoState => ({\n  startOffset: null,\n  startSize: null,\n  deltaOffset: null,\n  deltaPercentage: null,\n  isResizingColumn: false,\n  columnSizingStart: [],\n})\n\nexport const ColumnSizing: TableFeature = {\n  getDefaultColumnDef: (): ColumnSizingColumnDef => {\n    return defaultColumnSizing\n  },\n  getInitialState: (state): ColumnSizingTableState => {\n    return {\n      columnSizing: {},\n      columnSizingInfo: getDefaultColumnSizingInfoState(),\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnSizingDefaultOptions => {\n    return {\n      columnResizeMode: 'onEnd',\n      onColumnSizingChange: makeStateUpdater('columnSizing', table),\n      onColumnSizingInfoChange: makeStateUpdater('columnSizingInfo', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): ColumnSizingColumn => {\n    return {\n      getSize: () => {\n        const columnSize = table.getState().columnSizing[column.id]\n\n        return Math.min(\n          Math.max(\n            column.columnDef.minSize ?? defaultColumnSizing.minSize,\n            columnSize ?? column.columnDef.size ?? defaultColumnSizing.size\n          ),\n          column.columnDef.maxSize ?? defaultColumnSizing.maxSize\n        )\n      },\n      getStart: position => {\n        const columns = !position\n          ? table.getVisibleLeafColumns()\n          : position === 'left'\n          ? table.getLeftVisibleLeafColumns()\n          : table.getRightVisibleLeafColumns()\n\n        const index = columns.findIndex(d => d.id === column.id)\n\n        if (index > 0) {\n          const prevSiblingColumn = columns[index - 1]!\n\n          return (\n            prevSiblingColumn.getStart(position) + prevSiblingColumn.getSize()\n          )\n        }\n\n        return 0\n      },\n      resetSize: () => {\n        table.setColumnSizing(({ [column.id]: _, ...rest }) => {\n          return rest\n        })\n      },\n      getCanResize: () => {\n        return (\n          (column.columnDef.enableResizing ?? true) &&\n          (table.options.enableColumnResizing ?? true)\n        )\n      },\n      getIsResizing: () => {\n        return table.getState().columnSizingInfo.isResizingColumn === column.id\n      },\n    }\n  },\n\n  createHeader: <TData extends RowData, TValue>(\n    header: Header<TData, TValue>,\n    table: Table<TData>\n  ): ColumnSizingHeader => {\n    return {\n      getSize: () => {\n        let sum = 0\n\n        const recurse = (header: Header<TData, TValue>) => {\n          if (header.subHeaders.length) {\n            header.subHeaders.forEach(recurse)\n          } else {\n            sum += header.column.getSize() ?? 0\n          }\n        }\n\n        recurse(header)\n\n        return sum\n      },\n      getStart: () => {\n        if (header.index > 0) {\n          const prevSiblingHeader =\n            header.headerGroup.headers[header.index - 1]!\n          return prevSiblingHeader.getStart() + prevSiblingHeader.getSize()\n        }\n\n        return 0\n      },\n      getResizeHandler: () => {\n        const column = table.getColumn(header.column.id)\n        const canResize = column?.getCanResize()\n\n        return (e: unknown) => {\n          if (!column || !canResize) {\n            return\n          }\n\n          ;(e as any).persist?.()\n\n          if (isTouchStartEvent(e)) {\n            // lets not respond to multiple touches (e.g. 2 or 3 fingers)\n            if (e.touches && e.touches.length > 1) {\n              return\n            }\n          }\n\n          const startSize = header.getSize()\n\n          const columnSizingStart: [string, number][] = header\n            ? header\n                .getLeafHeaders()\n                .map(d => [d.column.id, d.column.getSize()])\n            : [[column.id, column.getSize()]]\n\n          const clientX = isTouchStartEvent(e)\n            ? Math.round(e.touches[0]!.clientX)\n            : (e as MouseEvent).clientX\n\n          const newColumnSizing: ColumnSizingState = {}\n\n          const updateOffset = (\n            eventType: 'move' | 'end',\n            clientXPos?: number\n          ) => {\n            if (typeof clientXPos !== 'number') {\n              return\n            }\n\n            table.setColumnSizingInfo(old => {\n              const deltaOffset = clientXPos - (old?.startOffset ?? 0)\n              const deltaPercentage = Math.max(\n                deltaOffset / (old?.startSize ?? 0),\n                -0.999999\n              )\n\n              old.columnSizingStart.forEach(([columnId, headerSize]) => {\n                newColumnSizing[columnId] =\n                  Math.round(\n                    Math.max(headerSize + headerSize * deltaPercentage, 0) * 100\n                  ) / 100\n              })\n\n              return {\n                ...old,\n                deltaOffset,\n                deltaPercentage,\n              }\n            })\n\n            if (\n              table.options.columnResizeMode === 'onChange' ||\n              eventType === 'end'\n            ) {\n              table.setColumnSizing(old => ({\n                ...old,\n                ...newColumnSizing,\n              }))\n            }\n          }\n\n          const onMove = (clientXPos?: number) =>\n            updateOffset('move', clientXPos)\n\n          const onEnd = (clientXPos?: number) => {\n            updateOffset('end', clientXPos)\n\n            table.setColumnSizingInfo(old => ({\n              ...old,\n              isResizingColumn: false,\n              startOffset: null,\n              startSize: null,\n              deltaOffset: null,\n              deltaPercentage: null,\n              columnSizingStart: [],\n            }))\n          }\n\n          const mouseEvents = {\n            moveHandler: (e: MouseEvent) => onMove(e.clientX),\n            upHandler: (e: MouseEvent) => {\n              document.removeEventListener('mousemove', mouseEvents.moveHandler)\n              document.removeEventListener('mouseup', mouseEvents.upHandler)\n              onEnd(e.clientX)\n            },\n          }\n\n          const touchEvents = {\n            moveHandler: (e: TouchEvent) => {\n              if (e.cancelable) {\n                e.preventDefault()\n                e.stopPropagation()\n              }\n              onMove(e.touches[0]!.clientX)\n              return false\n            },\n            upHandler: (e: TouchEvent) => {\n              document.removeEventListener('touchmove', touchEvents.moveHandler)\n              document.removeEventListener('touchend', touchEvents.upHandler)\n              if (e.cancelable) {\n                e.preventDefault()\n                e.stopPropagation()\n              }\n              onEnd(e.touches[0]?.clientX)\n            },\n          }\n\n          const passiveIfSupported = passiveEventSupported()\n            ? { passive: false }\n            : false\n\n          if (isTouchStartEvent(e)) {\n            document.addEventListener(\n              'touchmove',\n              touchEvents.moveHandler,\n              passiveIfSupported\n            )\n            document.addEventListener(\n              'touchend',\n              touchEvents.upHandler,\n              passiveIfSupported\n            )\n          } else {\n            document.addEventListener(\n              'mousemove',\n              mouseEvents.moveHandler,\n              passiveIfSupported\n            )\n            document.addEventListener(\n              'mouseup',\n              mouseEvents.upHandler,\n              passiveIfSupported\n            )\n          }\n\n          table.setColumnSizingInfo(old => ({\n            ...old,\n            startOffset: clientX,\n            startSize,\n            deltaOffset: 0,\n            deltaPercentage: 0,\n            columnSizingStart,\n            isResizingColumn: column.id,\n          }))\n        }\n      },\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnSizingInstance => {\n    return {\n      setColumnSizing: updater => table.options.onColumnSizingChange?.(updater),\n      setColumnSizingInfo: updater =>\n        table.options.onColumnSizingInfoChange?.(updater),\n      resetColumnSizing: defaultState => {\n        table.setColumnSizing(\n          defaultState ? {} : table.initialState.columnSizing ?? {}\n        )\n      },\n      resetHeaderSizeInfo: defaultState => {\n        table.setColumnSizingInfo(\n          defaultState\n            ? getDefaultColumnSizingInfoState()\n            : table.initialState.columnSizingInfo ??\n                getDefaultColumnSizingInfoState()\n        )\n      },\n      getTotalSize: () =>\n        table.getHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n      getLeftTotalSize: () =>\n        table.getLeftHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n      getCenterTotalSize: () =>\n        table.getCenterHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n      getRightTotalSize: () =>\n        table.getRightHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n    }\n  },\n}\n\nlet passiveSupported: boolean | null = null\nexport function passiveEventSupported() {\n  if (typeof passiveSupported === 'boolean') return passiveSupported\n\n  let supported = false\n  try {\n    const options = {\n      get passive() {\n        supported = true\n        return false\n      },\n    }\n\n    const noop = () => {}\n\n    window.addEventListener('test', noop, options)\n    window.removeEventListener('test', noop)\n  } catch (err) {\n    supported = false\n  }\n  passiveSupported = supported\n  return passiveSupported\n}\n\nfunction isTouchStartEvent(e: unknown): e is TouchEvent {\n  return (e as TouchEvent).type === 'touchstart'\n}\n","import { RowModel } from '..'\nimport { TableFeature } from '../core/table'\nimport { OnChangeFn, Table, Row, Updater, RowData } from '../types'\nimport { makeStateUpdater } from '../utils'\n\nexport type ExpandedStateList = Record<string, boolean>\nexport type ExpandedState = true | Record<string, boolean>\nexport interface ExpandedTableState {\n  expanded: ExpandedState\n}\n\nexport interface ExpandedRow {\n  toggleExpanded: (expanded?: boolean) => void\n  getIsExpanded: () => boolean\n  getCanExpand: () => boolean\n  getToggleExpandedHandler: () => () => void\n}\n\nexport interface ExpandedOptions<TData extends RowData> {\n  manualExpanding?: boolean\n  onExpandedChange?: OnChangeFn<ExpandedState>\n  autoResetExpanded?: boolean\n  enableExpanding?: boolean\n  getExpandedRowModel?: (table: Table<any>) => () => RowModel<any>\n  getIsRowExpanded?: (row: Row<TData>) => boolean\n  getRowCanExpand?: (row: Row<TData>) => boolean\n  paginateExpandedRows?: boolean\n}\n\nexport interface ExpandedInstance<TData extends RowData> {\n  _autoResetExpanded: () => void\n  setExpanded: (updater: Updater<ExpandedState>) => void\n  toggleAllRowsExpanded: (expanded?: boolean) => void\n  resetExpanded: (defaultState?: boolean) => void\n  getCanSomeRowsExpand: () => boolean\n  getToggleAllRowsExpandedHandler: () => (event: unknown) => void\n  getIsSomeRowsExpanded: () => boolean\n  getIsAllRowsExpanded: () => boolean\n  getExpandedDepth: () => number\n  getExpandedRowModel: () => RowModel<TData>\n  _getExpandedRowModel?: () => RowModel<TData>\n  getPreExpandedRowModel: () => RowModel<TData>\n}\n\n//\n\nexport const Expanding: TableFeature = {\n  getInitialState: (state): ExpandedTableState => {\n    return {\n      expanded: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ExpandedOptions<TData> => {\n    return {\n      onExpandedChange: makeStateUpdater('expanded', table),\n      paginateExpandedRows: true,\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ExpandedInstance<TData> => {\n    let registered = false\n    let queued = false\n\n    return {\n      _autoResetExpanded: () => {\n        if (!registered) {\n          table._queue(() => {\n            registered = true\n          })\n          return\n        }\n\n        if (\n          table.options.autoResetAll ??\n          table.options.autoResetExpanded ??\n          !table.options.manualExpanding\n        ) {\n          if (queued) return\n          queued = true\n          table._queue(() => {\n            table.resetExpanded()\n            queued = false\n          })\n        }\n      },\n      setExpanded: updater => table.options.onExpandedChange?.(updater),\n      toggleAllRowsExpanded: expanded => {\n        if (expanded ?? !table.getIsAllRowsExpanded()) {\n          table.setExpanded(true)\n        } else {\n          table.setExpanded({})\n        }\n      },\n      resetExpanded: defaultState => {\n        table.setExpanded(\n          defaultState ? {} : table.initialState?.expanded ?? {}\n        )\n      },\n      getCanSomeRowsExpand: () => {\n        return table.getRowModel().flatRows.some(row => row.getCanExpand())\n      },\n      getToggleAllRowsExpandedHandler: () => {\n        return (e: unknown) => {\n          ;(e as any).persist?.()\n          table.toggleAllRowsExpanded()\n        }\n      },\n      getIsSomeRowsExpanded: () => {\n        const expanded = table.getState().expanded\n        return expanded === true || Object.values(expanded).some(Boolean)\n      },\n      getIsAllRowsExpanded: () => {\n        const expanded = table.getState().expanded\n\n        // If expanded is true, save some cycles and return true\n        if (typeof expanded === 'boolean') {\n          return expanded === true\n        }\n\n        if (!Object.keys(expanded).length) {\n          return false\n        }\n\n        // If any row is not expanded, return false\n        if (table.getRowModel().flatRows.some(row => !row.getIsExpanded())) {\n          return false\n        }\n\n        // They must all be expanded :shrug:\n        return true\n      },\n      getExpandedDepth: () => {\n        let maxDepth = 0\n\n        const rowIds =\n          table.getState().expanded === true\n            ? Object.keys(table.getRowModel().rowsById)\n            : Object.keys(table.getState().expanded)\n\n        rowIds.forEach(id => {\n          const splitId = id.split('.')\n          maxDepth = Math.max(maxDepth, splitId.length)\n        })\n\n        return maxDepth\n      },\n      getPreExpandedRowModel: () => table.getSortedRowModel(),\n      getExpandedRowModel: () => {\n        if (!table._getExpandedRowModel && table.options.getExpandedRowModel) {\n          table._getExpandedRowModel = table.options.getExpandedRowModel(table)\n        }\n\n        if (table.options.manualExpanding || !table._getExpandedRowModel) {\n          return table.getPreExpandedRowModel()\n        }\n\n        return table._getExpandedRowModel()\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): ExpandedRow => {\n    return {\n      toggleExpanded: expanded => {\n        table.setExpanded(old => {\n          const exists = old === true ? true : !!old?.[row.id]\n\n          let oldExpanded: ExpandedStateList = {}\n\n          if (old === true) {\n            Object.keys(table.getRowModel().rowsById).forEach(rowId => {\n              oldExpanded[rowId] = true\n            })\n          } else {\n            oldExpanded = old\n          }\n\n          expanded = expanded ?? !exists\n\n          if (!exists && expanded) {\n            return {\n              ...oldExpanded,\n              [row.id]: true,\n            }\n          }\n\n          if (exists && !expanded) {\n            const { [row.id]: _, ...rest } = oldExpanded\n            return rest\n          }\n\n          return old\n        })\n      },\n      getIsExpanded: () => {\n        const expanded = table.getState().expanded\n\n        return !!(\n          table.options.getIsRowExpanded?.(row) ??\n          (expanded === true || expanded?.[row.id])\n        )\n      },\n      getCanExpand: () => {\n        return (\n          table.options.getRowCanExpand?.(row) ??\n          ((table.options.enableExpanding ?? true) && !!row.subRows?.length)\n        )\n      },\n      getToggleExpandedHandler: () => {\n        const canExpand = row.getCanExpand()\n\n        return () => {\n          if (!canExpand) return\n          row.toggleExpanded()\n        }\n      },\n    }\n  },\n}\n","import { FilterFn } from './features/Filters'\n\nconst includesString: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  const search = filterValue.toLowerCase()\n  return Boolean(row.getValue<string>(columnId)?.toLowerCase().includes(search))\n}\n\nincludesString.autoRemove = (val: any) => testFalsey(val)\n\nconst includesStringSensitive: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  return Boolean(row.getValue<string>(columnId)?.includes(filterValue))\n}\n\nincludesStringSensitive.autoRemove = (val: any) => testFalsey(val)\n\nconst equalsString: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  return (\n    row.getValue<string>(columnId)?.toLowerCase() === filterValue.toLowerCase()\n  )\n}\n\nequalsString.autoRemove = (val: any) => testFalsey(val)\n\nconst arrIncludes: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown\n) => {\n  return row.getValue<unknown[]>(columnId)?.includes(filterValue)\n}\n\narrIncludes.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst arrIncludesAll: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown[]\n) => {\n  return !filterValue.some(\n    val => !row.getValue<unknown[]>(columnId)?.includes(val)\n  )\n}\n\narrIncludesAll.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst arrIncludesSome: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown[]\n) => {\n  return filterValue.some(val =>\n    row.getValue<unknown[]>(columnId)?.includes(val)\n  )\n}\n\narrIncludesSome.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst equals: FilterFn<any> = (row, columnId: string, filterValue: unknown) => {\n  return row.getValue(columnId) === filterValue\n}\n\nequals.autoRemove = (val: any) => testFalsey(val)\n\nconst weakEquals: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown\n) => {\n  return row.getValue(columnId) == filterValue\n}\n\nweakEquals.autoRemove = (val: any) => testFalsey(val)\n\nconst inNumberRange: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: [number, number]\n) => {\n  let [min, max] = filterValue\n\n  const rowValue = row.getValue<number>(columnId)\n  return rowValue >= min && rowValue <= max\n}\n\ninNumberRange.resolveFilterValue = (val: [any, any]) => {\n  let [unsafeMin, unsafeMax] = val\n\n  let parsedMin =\n    typeof unsafeMin !== 'number' ? parseFloat(unsafeMin as string) : unsafeMin\n  let parsedMax =\n    typeof unsafeMax !== 'number' ? parseFloat(unsafeMax as string) : unsafeMax\n\n  let min =\n    unsafeMin === null || Number.isNaN(parsedMin) ? -Infinity : parsedMin\n  let max = unsafeMax === null || Number.isNaN(parsedMax) ? Infinity : parsedMax\n\n  if (min > max) {\n    const temp = min\n    min = max\n    max = temp\n  }\n\n  return [min, max] as const\n}\n\ninNumberRange.autoRemove = (val: any) =>\n  testFalsey(val) || (testFalsey(val[0]) && testFalsey(val[1]))\n\n// Export\n\nexport const filterFns = {\n  includesString,\n  includesStringSensitive,\n  equalsString,\n  arrIncludes,\n  arrIncludesAll,\n  arrIncludesSome,\n  equals,\n  weakEquals,\n  inNumberRange,\n}\n\nexport type BuiltInFilterFn = keyof typeof filterFns\n\n// Utils\n\nfunction testFalsey(val: any) {\n  return val === undefined || val === null || val === ''\n}\n","import { RowModel } from '..'\nimport { TableFeature } from '../core/table'\nimport { BuiltInFilterFn, filterFns } from '../filterFns'\nimport {\n  Column,\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  RowData,\n  FilterMeta,\n  FilterFns,\n} from '../types'\nimport { functionalUpdate, isFunction, makeStateUpdater } from '../utils'\n\nexport interface FiltersTableState {\n  columnFilters: ColumnFiltersState\n  globalFilter: any\n}\n\nexport type ColumnFiltersState = ColumnFilter[]\n\nexport interface ColumnFilter {\n  id: string\n  value: unknown\n}\n\nexport interface ResolvedColumnFilter<TData extends RowData> {\n  id: string\n  resolvedValue: unknown\n  filterFn: FilterFn<TData>\n}\n\nexport interface FilterFn<TData extends RowData> {\n  (\n    row: Row<TData>,\n    columnId: string,\n    filterValue: any,\n    addMeta: (meta: FilterMeta) => void\n  ): boolean\n\n  resolveFilterValue?: TransformFilterValueFn<TData>\n  autoRemove?: ColumnFilterAutoRemoveTestFn<TData>\n}\n\nexport type TransformFilterValueFn<TData extends RowData> = (\n  value: any,\n  column?: Column<TData, unknown>\n) => unknown\n\nexport type ColumnFilterAutoRemoveTestFn<TData extends RowData> = (\n  value: any,\n  column?: Column<TData, unknown>\n) => boolean\n\nexport type CustomFilterFns<TData extends RowData> = Record<\n  string,\n  FilterFn<TData>\n>\n\nexport type FilterFnOption<TData extends RowData> =\n  | 'auto'\n  | BuiltInFilterFn\n  | keyof FilterFns\n  | FilterFn<TData>\n\nexport interface FiltersColumnDef<TData extends RowData> {\n  filterFn?: FilterFnOption<TData>\n  enableColumnFilter?: boolean\n  enableGlobalFilter?: boolean\n}\n\nexport interface FiltersColumn<TData extends RowData> {\n  getAutoFilterFn: () => FilterFn<TData> | undefined\n  getFilterFn: () => FilterFn<TData> | undefined\n  setFilterValue: (updater: Updater<any>) => void\n  getCanFilter: () => boolean\n  getCanGlobalFilter: () => boolean\n  getFacetedRowModel: () => RowModel<TData>\n  _getFacetedRowModel?: () => RowModel<TData>\n  getIsFiltered: () => boolean\n  getFilterValue: () => unknown\n  getFilterIndex: () => number\n  getFacetedUniqueValues: () => Map<any, number>\n  _getFacetedUniqueValues?: () => Map<any, number>\n  getFacetedMinMaxValues: () => undefined | [number, number]\n  _getFacetedMinMaxValues?: () => undefined | [number, number]\n}\n\nexport interface FiltersRow<TData extends RowData> {\n  columnFilters: Record<string, boolean>\n  columnFiltersMeta: Record<string, FilterMeta>\n}\n\ninterface FiltersOptionsBase<TData extends RowData> {\n  enableFilters?: boolean\n  manualFiltering?: boolean\n  filterFromLeafRows?: boolean\n  maxLeafRowFilterDepth?: number\n  getFilteredRowModel?: (table: Table<any>) => () => RowModel<any>\n\n  // Column\n  onColumnFiltersChange?: OnChangeFn<ColumnFiltersState>\n  enableColumnFilters?: boolean\n\n  // Global\n  globalFilterFn?: FilterFnOption<TData>\n  onGlobalFilterChange?: OnChangeFn<any>\n  enableGlobalFilter?: boolean\n  getColumnCanGlobalFilter?: (column: Column<TData, unknown>) => boolean\n\n  // Faceting\n  getFacetedRowModel?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => RowModel<TData>\n  getFacetedUniqueValues?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => Map<any, number>\n  getFacetedMinMaxValues?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => undefined | [number, number]\n}\n\ntype ResolvedFilterFns = keyof FilterFns extends never\n  ? {\n      filterFns?: Record<string, FilterFn<any>>\n    }\n  : {\n      filterFns: Record<keyof FilterFns, FilterFn<any>>\n    }\n\nexport interface FiltersOptions<TData extends RowData>\n  extends FiltersOptionsBase<TData>,\n    ResolvedFilterFns {}\n\nexport interface FiltersInstance<TData extends RowData> {\n  setColumnFilters: (updater: Updater<ColumnFiltersState>) => void\n\n  resetColumnFilters: (defaultState?: boolean) => void\n\n  // Column Filters\n  getPreFilteredRowModel: () => RowModel<TData>\n  getFilteredRowModel: () => RowModel<TData>\n  _getFilteredRowModel?: () => RowModel<TData>\n\n  // Global Filters\n  setGlobalFilter: (updater: Updater<any>) => void\n  resetGlobalFilter: (defaultState?: boolean) => void\n  getGlobalAutoFilterFn: () => FilterFn<TData> | undefined\n  getGlobalFilterFn: () => FilterFn<TData> | undefined\n  getGlobalFacetedRowModel: () => RowModel<TData>\n  _getGlobalFacetedRowModel?: () => RowModel<TData>\n  getGlobalFacetedUniqueValues: () => Map<any, number>\n  _getGlobalFacetedUniqueValues?: () => Map<any, number>\n  getGlobalFacetedMinMaxValues: () => undefined | [number, number]\n  _getGlobalFacetedMinMaxValues?: () => undefined | [number, number]\n}\n\n//\n\nexport const Filters: TableFeature = {\n  getDefaultColumnDef: <TData extends RowData>(): FiltersColumnDef<TData> => {\n    return {\n      filterFn: 'auto',\n    }\n  },\n\n  getInitialState: (state): FiltersTableState => {\n    return {\n      columnFilters: [],\n      globalFilter: undefined,\n      // filtersProgress: 1,\n      // facetProgress: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): FiltersOptions<TData> => {\n    return {\n      onColumnFiltersChange: makeStateUpdater('columnFilters', table),\n      onGlobalFilterChange: makeStateUpdater('globalFilter', table),\n      filterFromLeafRows: false,\n      maxLeafRowFilterDepth: 100,\n      globalFilterFn: 'auto',\n      getColumnCanGlobalFilter: column => {\n        const value = table\n          .getCoreRowModel()\n          .flatRows[0]?._getAllCellsByColumnId()\n          [column.id]?.getValue()\n\n        return typeof value === 'string' || typeof value === 'number'\n      },\n    } as FiltersOptions<TData>\n  },\n\n  createColumn: <TData extends RowData>(\n    column: Column<TData, unknown>,\n    table: Table<TData>\n  ): FiltersColumn<TData> => {\n    return {\n      getAutoFilterFn: () => {\n        const firstRow = table.getCoreRowModel().flatRows[0]\n\n        const value = firstRow?.getValue(column.id)\n\n        if (typeof value === 'string') {\n          return filterFns.includesString\n        }\n\n        if (typeof value === 'number') {\n          return filterFns.inNumberRange\n        }\n\n        if (typeof value === 'boolean') {\n          return filterFns.equals\n        }\n\n        if (value !== null && typeof value === 'object') {\n          return filterFns.equals\n        }\n\n        if (Array.isArray(value)) {\n          return filterFns.arrIncludes\n        }\n\n        return filterFns.weakEquals\n      },\n      getFilterFn: () => {\n        return isFunction(column.columnDef.filterFn)\n          ? column.columnDef.filterFn\n          : column.columnDef.filterFn === 'auto'\n          ? column.getAutoFilterFn()\n          // @ts-ignore \n          : table.options.filterFns?.[column.columnDef.filterFn as string] ??\n            filterFns[column.columnDef.filterFn as BuiltInFilterFn]\n      },\n      getCanFilter: () => {\n        return (\n          (column.columnDef.enableColumnFilter ?? true) &&\n          (table.options.enableColumnFilters ?? true) &&\n          (table.options.enableFilters ?? true) &&\n          !!column.accessorFn\n        )\n      },\n\n      getCanGlobalFilter: () => {\n        return (\n          (column.columnDef.enableGlobalFilter ?? true) &&\n          (table.options.enableGlobalFilter ?? true) &&\n          (table.options.enableFilters ?? true) &&\n          (table.options.getColumnCanGlobalFilter?.(column) ?? true) &&\n          !!column.accessorFn\n        )\n      },\n\n      getIsFiltered: () => column.getFilterIndex() > -1,\n\n      getFilterValue: () =>\n        table.getState().columnFilters?.find(d => d.id === column.id)?.value,\n\n      getFilterIndex: () =>\n        table.getState().columnFilters?.findIndex(d => d.id === column.id) ??\n        -1,\n\n      setFilterValue: value => {\n        table.setColumnFilters(old => {\n          const filterFn = column.getFilterFn()\n          const previousfilter = old?.find(d => d.id === column.id)\n\n          const newFilter = functionalUpdate(\n            value,\n            previousfilter ? previousfilter.value : undefined\n          )\n\n          //\n          if (\n            shouldAutoRemoveFilter(\n              filterFn as FilterFn<TData>,\n              newFilter,\n              column\n            )\n          ) {\n            return old?.filter(d => d.id !== column.id) ?? []\n          }\n\n          const newFilterObj = { id: column.id, value: newFilter }\n\n          if (previousfilter) {\n            return (\n              old?.map(d => {\n                if (d.id === column.id) {\n                  return newFilterObj\n                }\n                return d\n              }) ?? []\n            )\n          }\n\n          if (old?.length) {\n            return [...old, newFilterObj]\n          }\n\n          return [newFilterObj]\n        })\n      },\n      _getFacetedRowModel:\n        table.options.getFacetedRowModel &&\n        table.options.getFacetedRowModel(table, column.id),\n      getFacetedRowModel: () => {\n        if (!column._getFacetedRowModel) {\n          return table.getPreFilteredRowModel()\n        }\n\n        return column._getFacetedRowModel()\n      },\n      _getFacetedUniqueValues:\n        table.options.getFacetedUniqueValues &&\n        table.options.getFacetedUniqueValues(table, column.id),\n      getFacetedUniqueValues: () => {\n        if (!column._getFacetedUniqueValues) {\n          return new Map()\n        }\n\n        return column._getFacetedUniqueValues()\n      },\n      _getFacetedMinMaxValues:\n        table.options.getFacetedMinMaxValues &&\n        table.options.getFacetedMinMaxValues(table, column.id),\n      getFacetedMinMaxValues: () => {\n        if (!column._getFacetedMinMaxValues) {\n          return undefined\n        }\n\n        return column._getFacetedMinMaxValues()\n      },\n      // () => [column.getFacetedRowModel()],\n      // facetedRowModel => getRowModelMinMaxValues(facetedRowModel, column.id),\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): FiltersRow<TData> => {\n    return {\n      columnFilters: {},\n      columnFiltersMeta: {},\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): FiltersInstance<TData> => {\n    return {\n      getGlobalAutoFilterFn: () => {\n        return filterFns.includesString\n      },\n\n      getGlobalFilterFn: () => {\n        const { globalFilterFn: globalFilterFn } = table.options\n\n        return isFunction(globalFilterFn)\n          ? globalFilterFn\n          : globalFilterFn === 'auto'\n          ? table.getGlobalAutoFilterFn()\n          // @ts-ignore\n          : table.options.filterFns?.[globalFilterFn as string] ??\n            filterFns[globalFilterFn as BuiltInFilterFn]\n      },\n\n      setColumnFilters: (updater: Updater<ColumnFiltersState>) => {\n        const leafColumns = table.getAllLeafColumns()\n\n        const updateFn = (old: ColumnFiltersState) => {\n          return functionalUpdate(updater, old)?.filter(filter => {\n            const column = leafColumns.find(d => d.id === filter.id)\n\n            if (column) {\n              const filterFn = column.getFilterFn()\n\n              if (shouldAutoRemoveFilter(filterFn, filter.value, column)) {\n                return false\n              }\n            }\n\n            return true\n          })\n        }\n\n        table.options.onColumnFiltersChange?.(updateFn)\n      },\n\n      setGlobalFilter: updater => {\n        table.options.onGlobalFilterChange?.(updater)\n      },\n\n      resetGlobalFilter: defaultState => {\n        table.setGlobalFilter(\n          defaultState ? undefined : table.initialState.globalFilter\n        )\n      },\n\n      resetColumnFilters: defaultState => {\n        table.setColumnFilters(\n          defaultState ? [] : table.initialState?.columnFilters ?? []\n        )\n      },\n\n      getPreFilteredRowModel: () => table.getCoreRowModel(),\n      getFilteredRowModel: () => {\n        if (!table._getFilteredRowModel && table.options.getFilteredRowModel) {\n          table._getFilteredRowModel = table.options.getFilteredRowModel(table)\n        }\n\n        if (table.options.manualFiltering || !table._getFilteredRowModel) {\n          return table.getPreFilteredRowModel()\n        }\n\n        return table._getFilteredRowModel()\n      },\n\n      _getGlobalFacetedRowModel:\n        table.options.getFacetedRowModel &&\n        table.options.getFacetedRowModel(table, '__global__'),\n\n      getGlobalFacetedRowModel: () => {\n        if (table.options.manualFiltering || !table._getGlobalFacetedRowModel) {\n          return table.getPreFilteredRowModel()\n        }\n\n        return table._getGlobalFacetedRowModel()\n      },\n\n      _getGlobalFacetedUniqueValues:\n        table.options.getFacetedUniqueValues &&\n        table.options.getFacetedUniqueValues(table, '__global__'),\n      getGlobalFacetedUniqueValues: () => {\n        if (!table._getGlobalFacetedUniqueValues) {\n          return new Map()\n        }\n\n        return table._getGlobalFacetedUniqueValues()\n      },\n\n      _getGlobalFacetedMinMaxValues:\n        table.options.getFacetedMinMaxValues &&\n        table.options.getFacetedMinMaxValues(table, '__global__'),\n      getGlobalFacetedMinMaxValues: () => {\n        if (!table._getGlobalFacetedMinMaxValues) {\n          return\n        }\n\n        return table._getGlobalFacetedMinMaxValues()\n      },\n    }\n  },\n}\n\nexport function shouldAutoRemoveFilter<TData extends RowData>(\n  filterFn?: FilterFn<TData>,\n  value?: any,\n  column?: Column<TData, unknown>\n) {\n  return (\n    (filterFn && filterFn.autoRemove\n      ? filterFn.autoRemove(value, column)\n      : false) ||\n    typeof value === 'undefined' ||\n    (typeof value === 'string' && !value)\n  )\n}\n","import { AggregationFn } from './features/Grouping'\n\nconst sum: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  // It's faster to just add the aggregations together instead of\n  // process leaf nodes individually\n  return childRows.reduce((sum, next) => {\n    const nextValue = next.getValue(columnId)\n    return sum + (typeof nextValue === 'number' ? nextValue : 0)\n  }, 0)\n}\n\nconst min: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let min: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n\n    if (\n      value != null &&\n      (min! > value || (min === undefined && value >= value))\n    ) {\n      min = value\n    }\n  })\n\n  return min\n}\n\nconst max: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let max: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n    if (\n      value != null &&\n      (max! < value || (max === undefined && value >= value))\n    ) {\n      max = value\n    }\n  })\n\n  return max\n}\n\nconst extent: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let min: number | undefined\n  let max: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n    if (value != null) {\n      if (min === undefined) {\n        if (value >= value) min = max = value\n      } else {\n        if (min > value) min = value\n        if (max! < value) max = value\n      }\n    }\n  })\n\n  return [min, max]\n}\n\nconst mean: AggregationFn<any> = (columnId, leafRows) => {\n  let count = 0\n  let sum = 0\n\n  leafRows.forEach(row => {\n    let value = row.getValue<number>(columnId)\n    if (value != null && (value = +value) >= value) {\n      ++count, (sum += value)\n    }\n  })\n\n  if (count) return sum / count\n\n  return\n}\n\nconst median: AggregationFn<any> = (columnId, leafRows) => {\n  if (!leafRows.length) {\n    return\n  }\n\n  let min = 0\n  let max = 0\n\n  leafRows.forEach(row => {\n    let value = row.getValue(columnId)\n    if (typeof value === 'number') {\n      min = Math.min(min, value)\n      max = Math.max(max, value)\n    }\n  })\n\n  return (min + max) / 2\n}\n\nconst unique: AggregationFn<any> = (columnId, leafRows) => {\n  return Array.from(new Set(leafRows.map(d => d.getValue(columnId))).values())\n}\n\nconst uniqueCount: AggregationFn<any> = (columnId, leafRows) => {\n  return new Set(leafRows.map(d => d.getValue(columnId))).size\n}\n\nconst count: AggregationFn<any> = (_columnId, leafRows) => {\n  return leafRows.length\n}\n\nexport const aggregationFns = {\n  sum,\n  min,\n  max,\n  extent,\n  mean,\n  median,\n  unique,\n  uniqueCount,\n  count,\n}\n\nexport type BuiltInAggregationFn = keyof typeof aggregationFns\n","import { makeStateUpdater, memo } from '../utils'\n\nimport { Table, OnChangeFn, Updater, Column, RowData } from '../types'\n\nimport { orderColumns } from './Grouping'\nimport { TableFeature } from '../core/table'\n\nexport interface ColumnOrderTableState {\n  columnOrder: ColumnOrderState\n}\n\nexport type ColumnOrderState = string[]\n\nexport interface ColumnOrderOptions {\n  onColumnOrderChange?: OnChangeFn<ColumnOrderState>\n}\n\nexport interface ColumnOrderDefaultOptions {\n  onColumnOrderChange: OnChangeFn<ColumnOrderState>\n}\n\nexport interface ColumnOrderInstance<TData extends RowData> {\n  setColumnOrder: (updater: Updater<ColumnOrderState>) => void\n  resetColumnOrder: (defaultState?: boolean) => void\n  _getOrderColumnsFn: () => (\n    columns: Column<TData, unknown>[]\n  ) => Column<TData, unknown>[]\n}\n\n//\n\nexport const Ordering: TableFeature = {\n  getInitialState: (state): ColumnOrderTableState => {\n    return {\n      columnOrder: [],\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnOrderDefaultOptions => {\n    return {\n      onColumnOrderChange: makeStateUpdater('columnOrder', table),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnOrderInstance<TData> => {\n    return {\n      setColumnOrder: updater => table.options.onColumnOrderChange?.(updater),\n      resetColumnOrder: defaultState => {\n        table.setColumnOrder(\n          defaultState ? [] : table.initialState.columnOrder ?? []\n        )\n      },\n      _getOrderColumnsFn: memo(\n        () => [\n          table.getState().columnOrder,\n          table.getState().grouping,\n          table.options.groupedColumnMode,\n        ],\n        (columnOrder, grouping, groupedColumnMode) => columns => {\n          // Sort grouped columns to the start of the column list\n          // before the headers are built\n          let orderedColumns: Column<TData, unknown>[] = []\n\n          // If there is no order, return the normal columns\n          if (!columnOrder?.length) {\n            orderedColumns = columns\n          } else {\n            const columnOrderCopy = [...columnOrder]\n\n            // If there is an order, make a copy of the columns\n            const columnsCopy = [...columns]\n\n            // And make a new ordered array of the columns\n\n            // Loop over the columns and place them in order into the new array\n            while (columnsCopy.length && columnOrderCopy.length) {\n              const targetColumnId = columnOrderCopy.shift()\n              const foundIndex = columnsCopy.findIndex(\n                d => d.id === targetColumnId\n              )\n              if (foundIndex > -1) {\n                orderedColumns.push(columnsCopy.splice(foundIndex, 1)[0]!)\n              }\n            }\n\n            // If there are any columns left, add them to the end\n            orderedColumns = [...orderedColumns, ...columnsCopy]\n          }\n\n          return orderColumns(orderedColumns, grouping, groupedColumnMode)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getOrderColumnsFn',\n          // debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n    }\n  },\n}\n","import { TableFeature } from '../core/table'\nimport { OnChangeFn, Table, Row, RowModel, Updater, RowData } from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type RowSelectionState = Record<string, boolean>\n\nexport interface RowSelectionTableState {\n  rowSelection: RowSelectionState\n}\n\nexport interface RowSelectionOptions<TData extends RowData> {\n  enableRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  enableMultiRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  enableSubRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  onRowSelectionChange?: OnChangeFn<RowSelectionState>\n  // enableGroupingRowSelection?:\n  //   | boolean\n  //   | ((\n  //       row: Row<TData>\n  //     ) => boolean)\n  // isAdditiveSelectEvent?: (e: unknown) => boolean\n  // isInclusiveSelectEvent?: (e: unknown) => boolean\n  // selectRowsFn?: (\n  //   table: Table<TData>,\n  //   rowModel: RowModel<TData>\n  // ) => RowModel<TData>\n}\n\nexport interface RowSelectionRow {\n  getIsSelected: () => boolean\n  getIsSomeSelected: () => boolean\n  getIsAllSubRowsSelected: () => boolean\n  getCanSelect: () => boolean\n  getCanMultiSelect: () => boolean\n  getCanSelectSubRows: () => boolean\n  toggleSelected: (value?: boolean) => void\n  getToggleSelectedHandler: () => (event: unknown) => void\n}\n\nexport interface RowSelectionInstance<TData extends RowData> {\n  getToggleAllRowsSelectedHandler: () => (event: unknown) => void\n  getToggleAllPageRowsSelectedHandler: () => (event: unknown) => void\n  setRowSelection: (updater: Updater<RowSelectionState>) => void\n  resetRowSelection: (defaultState?: boolean) => void\n  getIsAllRowsSelected: () => boolean\n  getIsAllPageRowsSelected: () => boolean\n  getIsSomeRowsSelected: () => boolean\n  getIsSomePageRowsSelected: () => boolean\n  toggleAllRowsSelected: (value?: boolean) => void\n  toggleAllPageRowsSelected: (value?: boolean) => void\n  getPreSelectedRowModel: () => RowModel<TData>\n  getSelectedRowModel: () => RowModel<TData>\n  getFilteredSelectedRowModel: () => RowModel<TData>\n  getGroupedSelectedRowModel: () => RowModel<TData>\n}\n\n//\n\nexport const RowSelection: TableFeature = {\n  getInitialState: (state): RowSelectionTableState => {\n    return {\n      rowSelection: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): RowSelectionOptions<TData> => {\n    return {\n      onRowSelectionChange: makeStateUpdater('rowSelection', table),\n      enableRowSelection: true,\n      enableMultiRowSelection: true,\n      enableSubRowSelection: true,\n      // enableGroupingRowSelection: false,\n      // isAdditiveSelectEvent: (e: unknown) => !!e.metaKey,\n      // isInclusiveSelectEvent: (e: unknown) => !!e.shiftKey,\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): RowSelectionInstance<TData> => {\n    return {\n      setRowSelection: updater => table.options.onRowSelectionChange?.(updater),\n      resetRowSelection: defaultState =>\n        table.setRowSelection(\n          defaultState ? {} : table.initialState.rowSelection ?? {}\n        ),\n      toggleAllRowsSelected: value => {\n        table.setRowSelection(old => {\n          value =\n            typeof value !== 'undefined' ? value : !table.getIsAllRowsSelected()\n\n          const rowSelection = { ...old }\n\n          const preGroupedFlatRows = table.getPreGroupedRowModel().flatRows\n\n          // We don't use `mutateRowIsSelected` here for performance reasons.\n          // All of the rows are flat already, so it wouldn't be worth it\n          if (value) {\n            preGroupedFlatRows.forEach(row => {\n              if (!row.getCanSelect()) {\n                return\n              }\n              rowSelection[row.id] = true\n            })\n          } else {\n            preGroupedFlatRows.forEach(row => {\n              delete rowSelection[row.id]\n            })\n          }\n\n          return rowSelection\n        })\n      },\n      toggleAllPageRowsSelected: value =>\n        table.setRowSelection(old => {\n          const resolvedValue =\n            typeof value !== 'undefined'\n              ? value\n              : !table.getIsAllPageRowsSelected()\n\n          const rowSelection: RowSelectionState = { ...old }\n\n          table.getRowModel().rows.forEach(row => {\n            mutateRowIsSelected(rowSelection, row.id, resolvedValue, table)\n          })\n\n          return rowSelection\n        }),\n\n      // addRowSelectionRange: rowId => {\n      //   const {\n      //     rows,\n      //     rowsById,\n      //     options: { selectGroupingRows, selectSubRows },\n      //   } = table\n\n      //   const findSelectedRow = (rows: Row[]) => {\n      //     let found\n      //     rows.find(d => {\n      //       if (d.getIsSelected()) {\n      //         found = d\n      //         return true\n      //       }\n      //       const subFound = findSelectedRow(d.subRows || [])\n      //       if (subFound) {\n      //         found = subFound\n      //         return true\n      //       }\n      //       return false\n      //     })\n      //     return found\n      //   }\n\n      //   const firstRow = findSelectedRow(rows) || rows[0]\n      //   const lastRow = rowsById[rowId]\n\n      //   let include = false\n      //   const selectedRowIds = {}\n\n      //   const addRow = (row: Row) => {\n      //     mutateRowIsSelected(selectedRowIds, row.id, true, {\n      //       rowsById,\n      //       selectGroupingRows: selectGroupingRows!,\n      //       selectSubRows: selectSubRows!,\n      //     })\n      //   }\n\n      //   table.rows.forEach(row => {\n      //     const isFirstRow = row.id === firstRow.id\n      //     const isLastRow = row.id === lastRow.id\n\n      //     if (isFirstRow || isLastRow) {\n      //       if (!include) {\n      //         include = true\n      //       } else if (include) {\n      //         addRow(row)\n      //         include = false\n      //       }\n      //     }\n\n      //     if (include) {\n      //       addRow(row)\n      //     }\n      //   })\n\n      //   table.setRowSelection(selectedRowIds)\n      // },\n      getPreSelectedRowModel: () => table.getCoreRowModel(),\n      getSelectedRowModel: memo(\n        () => [table.getState().rowSelection, table.getCoreRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(table, rowModel)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getSelectedRowModel',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      getFilteredSelectedRowModel: memo(\n        () => [table.getState().rowSelection, table.getFilteredRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(table, rowModel)\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'getFilteredSelectedRowModel',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      getGroupedSelectedRowModel: memo(\n        () => [table.getState().rowSelection, table.getSortedRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(table, rowModel)\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'getGroupedSelectedRowModel',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      ///\n\n      // getGroupingRowCanSelect: rowId => {\n      //   const row = table.getRow(rowId)\n\n      //   if (!row) {\n      //     throw new Error()\n      //   }\n\n      //   if (typeof table.options.enableGroupingRowSelection === 'function') {\n      //     return table.options.enableGroupingRowSelection(row)\n      //   }\n\n      //   return table.options.enableGroupingRowSelection ?? false\n      // },\n\n      getIsAllRowsSelected: () => {\n        const preGroupedFlatRows = table.getFilteredRowModel().flatRows\n        const { rowSelection } = table.getState()\n\n        let isAllRowsSelected = Boolean(\n          preGroupedFlatRows.length && Object.keys(rowSelection).length\n        )\n\n        if (isAllRowsSelected) {\n          if (\n            preGroupedFlatRows.some(\n              row => row.getCanSelect() && !rowSelection[row.id]\n            )\n          ) {\n            isAllRowsSelected = false\n          }\n        }\n\n        return isAllRowsSelected\n      },\n\n      getIsAllPageRowsSelected: () => {\n        const paginationFlatRows = table.getPaginationRowModel().flatRows\n        const { rowSelection } = table.getState()\n\n        let isAllPageRowsSelected = !!paginationFlatRows.length\n\n        if (\n          isAllPageRowsSelected &&\n          paginationFlatRows.some(\n            row => row.getCanSelect() && !rowSelection[row.id]\n          )\n        ) {\n          isAllPageRowsSelected = false\n        }\n\n        return isAllPageRowsSelected\n      },\n\n      getIsSomeRowsSelected: () => {\n        const totalSelected = Object.keys(\n          table.getState().rowSelection ?? {}\n        ).length\n        return (\n          totalSelected > 0 &&\n          totalSelected < table.getFilteredRowModel().flatRows.length\n        )\n      },\n\n      getIsSomePageRowsSelected: () => {\n        const paginationFlatRows = table.getPaginationRowModel().flatRows\n        return table.getIsAllPageRowsSelected()\n          ? false\n          : paginationFlatRows.some(\n              d => d.getIsSelected() || d.getIsSomeSelected()\n            )\n      },\n\n      getToggleAllRowsSelectedHandler: () => {\n        return (e: unknown) => {\n          table.toggleAllRowsSelected(\n            ((e as MouseEvent).target as HTMLInputElement).checked\n          )\n        }\n      },\n\n      getToggleAllPageRowsSelectedHandler: () => {\n        return (e: unknown) => {\n          table.toggleAllPageRowsSelected(\n            ((e as MouseEvent).target as HTMLInputElement).checked\n          )\n        }\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): RowSelectionRow => {\n    return {\n      toggleSelected: value => {\n        const isSelected = row.getIsSelected()\n\n        table.setRowSelection(old => {\n          value = typeof value !== 'undefined' ? value : !isSelected\n\n          if (isSelected === value) {\n            return old\n          }\n\n          const selectedRowIds = { ...old }\n\n          mutateRowIsSelected(selectedRowIds, row.id, value, table)\n\n          return selectedRowIds\n        })\n      },\n      getIsSelected: () => {\n        const { rowSelection } = table.getState()\n        return isRowSelected(row, rowSelection)\n      },\n\n      getIsSomeSelected: () => {\n        const { rowSelection } = table.getState()\n        return isSubRowSelected(row, rowSelection, table) === 'some'\n      },\n\n      getIsAllSubRowsSelected: () => {\n        const { rowSelection } = table.getState()\n        return isSubRowSelected(row, rowSelection, table) === 'all'\n      },\n\n      getCanSelect: () => {\n        if (typeof table.options.enableRowSelection === 'function') {\n          return table.options.enableRowSelection(row)\n        }\n\n        return table.options.enableRowSelection ?? true\n      },\n\n      getCanSelectSubRows: () => {\n        if (typeof table.options.enableSubRowSelection === 'function') {\n          return table.options.enableSubRowSelection(row)\n        }\n\n        return table.options.enableSubRowSelection ?? true\n      },\n\n      getCanMultiSelect: () => {\n        if (typeof table.options.enableMultiRowSelection === 'function') {\n          return table.options.enableMultiRowSelection(row)\n        }\n\n        return table.options.enableMultiRowSelection ?? true\n      },\n      getToggleSelectedHandler: () => {\n        const canSelect = row.getCanSelect()\n\n        return (e: unknown) => {\n          if (!canSelect) return\n          row.toggleSelected(\n            ((e as MouseEvent).target as HTMLInputElement)?.checked\n          )\n        }\n      },\n    }\n  },\n}\n\nconst mutateRowIsSelected = <TData extends RowData>(\n  selectedRowIds: Record<string, boolean>,\n  id: string,\n  value: boolean,\n  table: Table<TData>\n) => {\n  const row = table.getRow(id)\n\n  // const isGrouped = row.getIsGrouped()\n\n  // if ( // TODO: enforce grouping row selection rules\n  //   !isGrouped ||\n  //   (isGrouped && table.options.enableGroupingRowSelection)\n  // ) {\n  if (value) {\n    if (!row.getCanMultiSelect()) {\n      Object.keys(selectedRowIds).forEach(key => delete selectedRowIds[key])\n    }\n    if (row.getCanSelect()) {\n      selectedRowIds[id] = true\n    }\n  } else {\n    delete selectedRowIds[id]\n  }\n  // }\n\n  if (row.subRows?.length && row.getCanSelectSubRows()) {\n    row.subRows.forEach(row =>\n      mutateRowIsSelected(selectedRowIds, row.id, value, table)\n    )\n  }\n}\n\nexport function selectRowsFn<TData extends RowData>(\n  table: Table<TData>,\n  rowModel: RowModel<TData>\n): RowModel<TData> {\n  const rowSelection = table.getState().rowSelection\n\n  const newSelectedFlatRows: Row<TData>[] = []\n  const newSelectedRowsById: Record<string, Row<TData>> = {}\n\n  // Filters top level and nested rows\n  const recurseRows = (rows: Row<TData>[], depth = 0): Row<TData>[] => {\n    return rows\n      .map(row => {\n        const isSelected = isRowSelected(row, rowSelection)\n\n        if (isSelected) {\n          newSelectedFlatRows.push(row)\n          newSelectedRowsById[row.id] = row\n        }\n\n        if (row.subRows?.length) {\n          row = {\n            ...row,\n            subRows: recurseRows(row.subRows, depth + 1),\n          }\n        }\n\n        if (isSelected) {\n          return row\n        }\n      })\n      .filter(Boolean) as Row<TData>[]\n  }\n\n  return {\n    rows: recurseRows(rowModel.rows),\n    flatRows: newSelectedFlatRows,\n    rowsById: newSelectedRowsById,\n  }\n}\n\nexport function isRowSelected<TData extends RowData>(\n  row: Row<TData>,\n  selection: Record<string, boolean>\n): boolean {\n  return selection[row.id] ?? false\n}\n\nexport function isSubRowSelected<TData extends RowData>(\n  row: Row<TData>,\n  selection: Record<string, boolean>,\n  table: Table<TData>\n): boolean | 'some' | 'all' {\n  if (row.subRows && row.subRows.length) {\n    let allChildrenSelected = true\n    let someSelected = false\n\n    row.subRows.forEach(subRow => {\n      // Bail out early if we know both of these\n      if (someSelected && !allChildrenSelected) {\n        return\n      }\n\n      if (isRowSelected(subRow, selection)) {\n        someSelected = true\n      } else {\n        allChildrenSelected = false\n      }\n    })\n\n    return allChildrenSelected ? 'all' : someSelected ? 'some' : false\n  }\n\n  return false\n}\n","import { SortingFn } from './features/Sorting'\n\nexport const reSplitAlphaNumeric = /([0-9]+)/gm\n\nconst alphanumeric: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(\n    toString(rowA.getValue(columnId)).toLowerCase(),\n    toString(rowB.getValue(columnId)).toLowerCase()\n  )\n}\n\nconst alphanumericCaseSensitive: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(\n    toString(rowA.getValue(columnId)),\n    toString(rowB.getValue(columnId))\n  )\n}\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nconst text: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(\n    toString(rowA.getValue(columnId)).toLowerCase(),\n    toString(rowB.getValue(columnId)).toLowerCase()\n  )\n}\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nconst textCaseSensitive: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(\n    toString(rowA.getValue(columnId)),\n    toString(rowB.getValue(columnId))\n  )\n}\n\nconst datetime: SortingFn<any> = (rowA, rowB, columnId) => {\n  const a = rowA.getValue<Date>(columnId)\n  const b = rowB.getValue<Date>(columnId)\n\n  // Can handle nullish values\n  // Use > and < because == (and ===) doesn't work with\n  // Date objects (would require calling getTime()).\n  return a > b ? 1 : a < b ? -1 : 0\n}\n\nconst basic: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(rowA.getValue(columnId), rowB.getValue(columnId))\n}\n\n// Utils\n\nfunction compareBasic(a: any, b: any) {\n  return a === b ? 0 : a > b ? 1 : -1\n}\n\nfunction toString(a: any) {\n  if (typeof a === 'number') {\n    if (isNaN(a) || a === Infinity || a === -Infinity) {\n      return ''\n    }\n    return String(a)\n  }\n  if (typeof a === 'string') {\n    return a\n  }\n  return ''\n}\n\n// Mixed sorting is slow, but very inclusive of many edge cases.\n// It handles numbers, mixed alphanumeric combinations, and even\n// null, undefined, and Infinity\nfunction compareAlphanumeric(aStr: string, bStr: string) {\n  // Split on number groups, but keep the delimiter\n  // Then remove falsey split values\n  const a = aStr.split(reSplitAlphaNumeric).filter(Boolean)\n  const b = bStr.split(reSplitAlphaNumeric).filter(Boolean)\n\n  // While\n  while (a.length && b.length) {\n    const aa = a.shift()!\n    const bb = b.shift()!\n\n    const an = parseInt(aa, 10)\n    const bn = parseInt(bb, 10)\n\n    const combo = [an, bn].sort()\n\n    // Both are string\n    if (isNaN(combo[0]!)) {\n      if (aa > bb) {\n        return 1\n      }\n      if (bb > aa) {\n        return -1\n      }\n      continue\n    }\n\n    // One is a string, one is a number\n    if (isNaN(combo[1]!)) {\n      return isNaN(an) ? -1 : 1\n    }\n\n    // Both are numbers\n    if (an > bn) {\n      return 1\n    }\n    if (bn > an) {\n      return -1\n    }\n  }\n\n  return a.length - b.length\n}\n\n// Exports\n\nexport const sortingFns = {\n  alphanumeric,\n  alphanumericCaseSensitive,\n  text,\n  textCaseSensitive,\n  datetime,\n  basic,\n}\n\nexport type BuiltInSortingFn = keyof typeof sortingFns\n","import { functionalUpdate, memo, RequiredKeys } from '../utils'\n\nimport {\n  Updater,\n  TableOptionsResolved,\n  TableState,\n  Table,\n  InitialTableState,\n  Row,\n  Column,\n  RowModel,\n  ColumnDef,\n  TableOptions,\n  RowData,\n  TableMeta,\n  ColumnDefResolved,\n  GroupColumnDef,\n} from '../types'\n\n//\nimport { createColumn } from './column'\nimport { Headers } from './headers'\n//\n\nimport { ColumnSizing } from '../features/ColumnSizing'\nimport { Expanding } from '../features/Expanding'\nimport { Filters } from '../features/Filters'\nimport { Grouping } from '../features/Grouping'\nimport { Ordering } from '../features/Ordering'\nimport { Pagination } from '../features/Pagination'\nimport { Pinning } from '../features/Pinning'\nimport { RowSelection } from '../features/RowSelection'\nimport { Sorting } from '../features/Sorting'\nimport { Visibility } from '../features/Visibility'\n\nexport interface TableFeature {\n  getDefaultOptions?: (table: any) => any\n  getInitialState?: (initialState?: InitialTableState) => any\n  createTable?: (table: any) => any\n  getDefaultColumnDef?: () => any\n  createColumn?: (column: any, table: any) => any\n  createHeader?: (column: any, table: any) => any\n  createCell?: (cell: any, column: any, row: any, table: any) => any\n  createRow?: (row: any, table: any) => any\n}\n\nconst features = [\n  Headers,\n  Visibility,\n  Ordering,\n  Pinning,\n  Filters,\n  Sorting,\n  Grouping,\n  Expanding,\n  Pagination,\n  RowSelection,\n  ColumnSizing,\n] as const\n\n//\n\nexport interface CoreTableState {}\n\nexport interface CoreOptions<TData extends RowData> {\n  data: TData[]\n  state: Partial<TableState>\n  onStateChange: (updater: Updater<TableState>) => void\n  debugAll?: boolean\n  debugTable?: boolean\n  debugHeaders?: boolean\n  debugColumns?: boolean\n  debugRows?: boolean\n  initialState?: InitialTableState\n  autoResetAll?: boolean\n  mergeOptions?: (\n    defaultOptions: TableOptions<TData>,\n    options: Partial<TableOptions<TData>>\n  ) => TableOptions<TData>\n  meta?: TableMeta<TData>\n  getCoreRowModel: (table: Table<any>) => () => RowModel<any>\n  getSubRows?: (originalRow: TData, index: number) => undefined | TData[]\n  getRowId?: (originalRow: TData, index: number, parent?: Row<TData>) => string\n  columns: ColumnDef<TData, any>[]\n  defaultColumn?: Partial<ColumnDef<TData, unknown>>\n  renderFallbackValue: any\n}\n\nexport interface CoreInstance<TData extends RowData> {\n  initialState: TableState\n  reset: () => void\n  options: RequiredKeys<TableOptionsResolved<TData>, 'state'>\n  setOptions: (newOptions: Updater<TableOptionsResolved<TData>>) => void\n  getState: () => TableState\n  setState: (updater: Updater<TableState>) => void\n  _features: readonly TableFeature[]\n  _queue: (cb: () => void) => void\n  _getRowId: (_: TData, index: number, parent?: Row<TData>) => string\n  getCoreRowModel: () => RowModel<TData>\n  _getCoreRowModel?: () => RowModel<TData>\n  getRowModel: () => RowModel<TData>\n  getRow: (id: string) => Row<TData>\n  _getDefaultColumnDef: () => Partial<ColumnDef<TData, unknown>>\n  _getColumnDefs: () => ColumnDef<TData, unknown>[]\n  _getAllFlatColumnsById: () => Record<string, Column<TData, unknown>>\n  getAllColumns: () => Column<TData, unknown>[]\n  getAllFlatColumns: () => Column<TData, unknown>[]\n  getAllLeafColumns: () => Column<TData, unknown>[]\n  getColumn: (columnId: string) => Column<TData, unknown> | undefined\n}\n\nexport function createTable<TData extends RowData>(\n  options: TableOptionsResolved<TData>\n): Table<TData> {\n  if (options.debugAll || options.debugTable) {\n    console.info('Creating Table Instance...')\n  }\n\n  let table = { _features: features } as unknown as Table<TData>\n\n  const defaultOptions = table._features.reduce((obj, feature) => {\n    return Object.assign(obj, feature.getDefaultOptions?.(table))\n  }, {}) as TableOptionsResolved<TData>\n\n  const mergeOptions = (options: TableOptionsResolved<TData>) => {\n    if (table.options.mergeOptions) {\n      return table.options.mergeOptions(defaultOptions, options)\n    }\n\n    return {\n      ...defaultOptions,\n      ...options,\n    }\n  }\n\n  const coreInitialState: CoreTableState = {}\n\n  let initialState = {\n    ...coreInitialState,\n    ...(options.initialState ?? {}),\n  } as TableState\n\n  table._features.forEach(feature => {\n    initialState = feature.getInitialState?.(initialState) ?? initialState\n  })\n\n  const queued: (() => void)[] = []\n  let queuedTimeout = false\n\n  const coreInstance: CoreInstance<TData> = {\n    _features: features,\n    options: {\n      ...defaultOptions,\n      ...options,\n    },\n    initialState,\n    _queue: cb => {\n      queued.push(cb)\n\n      if (!queuedTimeout) {\n        queuedTimeout = true\n\n        // Schedule a microtask to run the queued callbacks after\n        // the current call stack (render, etc) has finished.\n        Promise.resolve()\n          .then(() => {\n            while (queued.length) {\n              queued.shift()!()\n            }\n            queuedTimeout = false\n          })\n          .catch(error =>\n            setTimeout(() => {\n              throw error\n            })\n          )\n      }\n    },\n    reset: () => {\n      table.setState(table.initialState)\n    },\n    setOptions: updater => {\n      const newOptions = functionalUpdate(updater, table.options)\n      table.options = mergeOptions(newOptions) as RequiredKeys<\n        TableOptionsResolved<TData>,\n        'state'\n      >\n    },\n\n    getState: () => {\n      return table.options.state as TableState\n    },\n\n    setState: (updater: Updater<TableState>) => {\n      table.options.onStateChange?.(updater)\n    },\n\n    _getRowId: (row: TData, index: number, parent?: Row<TData>) =>\n      table.options.getRowId?.(row, index, parent) ??\n      `${parent ? [parent.id, index].join('.') : index}`,\n\n    getCoreRowModel: () => {\n      if (!table._getCoreRowModel) {\n        table._getCoreRowModel = table.options.getCoreRowModel(table)\n      }\n\n      return table._getCoreRowModel!()\n    },\n\n    // The final calls start at the bottom of the model,\n    // expanded rows, which then work their way up\n\n    getRowModel: () => {\n      return table.getPaginationRowModel()\n    },\n    getRow: (id: string) => {\n      const row = table.getRowModel().rowsById[id]\n\n      if (!row) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(`getRow expected an ID, but got ${id}`)\n        }\n        throw new Error()\n      }\n\n      return row\n    },\n    _getDefaultColumnDef: memo(\n      () => [table.options.defaultColumn],\n      defaultColumn => {\n        defaultColumn = (defaultColumn ?? {}) as Partial<\n          ColumnDef<TData, unknown>\n        >\n\n        return {\n          header: props => {\n            const resolvedColumnDef = props.header.column\n              .columnDef as ColumnDefResolved<TData>\n\n            if (resolvedColumnDef.accessorKey) {\n              return resolvedColumnDef.accessorKey\n            }\n\n            if (resolvedColumnDef.accessorFn) {\n              return resolvedColumnDef.id\n            }\n\n            return null\n          },\n          // footer: props => props.header.column.id,\n          cell: props => props.renderValue<any>()?.toString?.() ?? null,\n          ...table._features.reduce((obj, feature) => {\n            return Object.assign(obj, feature.getDefaultColumnDef?.())\n          }, {}),\n          ...defaultColumn,\n        } as Partial<ColumnDef<TData, unknown>>\n      },\n      {\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n        key: process.env.NODE_ENV === 'development' && 'getDefaultColumnDef',\n      }\n    ),\n\n    _getColumnDefs: () => table.options.columns,\n\n    getAllColumns: memo(\n      () => [table._getColumnDefs()],\n      columnDefs => {\n        const recurseColumns = (\n          columnDefs: ColumnDef<TData, unknown>[],\n          parent?: Column<TData, unknown>,\n          depth = 0\n        ): Column<TData, unknown>[] => {\n          return columnDefs.map(columnDef => {\n            const column = createColumn(table, columnDef, depth, parent)\n\n            const groupingColumnDef = columnDef as GroupColumnDef<\n              TData,\n              unknown\n            >\n\n            column.columns = groupingColumnDef.columns\n              ? recurseColumns(groupingColumnDef.columns, column, depth + 1)\n              : []\n\n            return column\n          })\n        }\n\n        return recurseColumns(columnDefs)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getAllFlatColumns: memo(\n      () => [table.getAllColumns()],\n      allColumns => {\n        return allColumns.flatMap(column => {\n          return column.getFlatColumns()\n        })\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllFlatColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    _getAllFlatColumnsById: memo(\n      () => [table.getAllFlatColumns()],\n      flatColumns => {\n        return flatColumns.reduce((acc, column) => {\n          acc[column.id] = column\n          return acc\n        }, {} as Record<string, Column<TData, unknown>>)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllFlatColumnsById',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getAllLeafColumns: memo(\n      () => [table.getAllColumns(), table._getOrderColumnsFn()],\n      (allColumns, orderColumns) => {\n        let leafColumns = allColumns.flatMap(column => column.getLeafColumns())\n        return orderColumns(leafColumns)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllLeafColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getColumn: columnId => {\n      const column = table._getAllFlatColumnsById()[columnId]\n\n      if (process.env.NODE_ENV !== 'production' && !column) {\n        console.error(`[Table] Column with id '${columnId}' does not exist.`)\n      }\n\n      return column\n    },\n  }\n\n  Object.assign(table, coreInstance)\n\n  table._features.forEach(feature => {\n    return Object.assign(table, feature.createTable?.(table))\n  })\n\n  return table\n}\n","import { TableFeature } from '../core/table'\nimport {\n  Cell,\n  Column,\n  OnChangeFn,\n  Table,\n  Updater,\n  Row,\n  RowData,\n} from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type VisibilityState = Record<string, boolean>\n\nexport interface VisibilityTableState {\n  columnVisibility: VisibilityState\n}\n\nexport interface VisibilityOptions {\n  onColumnVisibilityChange?: OnChangeFn<VisibilityState>\n  enableHiding?: boolean\n}\n\nexport interface VisibilityDefaultOptions {\n  onColumnVisibilityChange: OnChangeFn<VisibilityState>\n}\n\nexport interface VisibilityInstance<TData extends RowData> {\n  getVisibleFlatColumns: () => Column<TData, unknown>[]\n  getVisibleLeafColumns: () => Column<TData, unknown>[]\n  getLeftVisibleLeafColumns: () => Column<TData, unknown>[]\n  getRightVisibleLeafColumns: () => Column<TData, unknown>[]\n  getCenterVisibleLeafColumns: () => Column<TData, unknown>[]\n  setColumnVisibility: (updater: Updater<VisibilityState>) => void\n  resetColumnVisibility: (defaultState?: boolean) => void\n  toggleAllColumnsVisible: (value?: boolean) => void\n  getIsAllColumnsVisible: () => boolean\n  getIsSomeColumnsVisible: () => boolean\n  getToggleAllColumnsVisibilityHandler: () => (event: unknown) => void\n}\n\nexport interface VisibilityColumnDef {\n  enableHiding?: boolean\n}\n\nexport interface VisibilityRow<TData extends RowData> {\n  _getAllVisibleCells: () => Cell<TData, unknown>[]\n  getVisibleCells: () => Cell<TData, unknown>[]\n}\n\nexport interface VisibilityColumn {\n  getCanHide: () => boolean\n  getIsVisible: () => boolean\n  toggleVisibility: (value?: boolean) => void\n  getToggleVisibilityHandler: () => (event: unknown) => void\n}\n\n//\n\nexport const Visibility: TableFeature = {\n  getInitialState: (state): VisibilityTableState => {\n    return {\n      columnVisibility: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): VisibilityDefaultOptions => {\n    return {\n      onColumnVisibilityChange: makeStateUpdater('columnVisibility', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): VisibilityColumn => {\n    return {\n      toggleVisibility: value => {\n        if (column.getCanHide()) {\n          table.setColumnVisibility(old => ({\n            ...old,\n            [column.id]: value ?? !column.getIsVisible(),\n          }))\n        }\n      },\n      getIsVisible: () => {\n        return table.getState().columnVisibility?.[column.id] ?? true\n      },\n\n      getCanHide: () => {\n        return (\n          (column.columnDef.enableHiding ?? true) &&\n          (table.options.enableHiding ?? true)\n        )\n      },\n      getToggleVisibilityHandler: () => {\n        return (e: unknown) => {\n          column.toggleVisibility?.(\n            ((e as MouseEvent).target as HTMLInputElement).checked\n          )\n        }\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): VisibilityRow<TData> => {\n    return {\n      _getAllVisibleCells: memo(\n        () => [row.getAllCells(), table.getState().columnVisibility],\n        cells => {\n          return cells.filter(cell => cell.column.getIsVisible())\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row._getAllVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n      getVisibleCells: memo(\n        () => [\n          row.getLeftVisibleCells(),\n          row.getCenterVisibleCells(),\n          row.getRightVisibleCells(),\n        ],\n        (left, center, right) => [...left, ...center, ...right],\n        {\n          key: process.env.NODE_ENV === 'development' && 'row.getVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): VisibilityInstance<TData> => {\n    const makeVisibleColumnsMethod = (\n      key: string,\n      getColumns: () => Column<TData, unknown>[]\n    ): (() => Column<TData, unknown>[]) => {\n      return memo(\n        () => [\n          getColumns(),\n          getColumns()\n            .filter(d => d.getIsVisible())\n            .map(d => d.id)\n            .join('_'),\n        ],\n        columns => {\n          return columns.filter(d => d.getIsVisible?.())\n        },\n        {\n          key,\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      )\n    }\n\n    return {\n      getVisibleFlatColumns: makeVisibleColumnsMethod(\n        'getVisibleFlatColumns',\n        () => table.getAllFlatColumns()\n      ),\n      getVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getVisibleLeafColumns',\n        () => table.getAllLeafColumns()\n      ),\n      getLeftVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getLeftVisibleLeafColumns',\n        () => table.getLeftLeafColumns()\n      ),\n      getRightVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getRightVisibleLeafColumns',\n        () => table.getRightLeafColumns()\n      ),\n      getCenterVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getCenterVisibleLeafColumns',\n        () => table.getCenterLeafColumns()\n      ),\n\n      setColumnVisibility: updater =>\n        table.options.onColumnVisibilityChange?.(updater),\n\n      resetColumnVisibility: defaultState => {\n        table.setColumnVisibility(\n          defaultState ? {} : table.initialState.columnVisibility ?? {}\n        )\n      },\n\n      toggleAllColumnsVisible: value => {\n        value = value ?? !table.getIsAllColumnsVisible()\n\n        table.setColumnVisibility(\n          table.getAllLeafColumns().reduce(\n            (obj, column) => ({\n              ...obj,\n              [column.id]: !value ? !column.getCanHide?.() : value,\n            }),\n            {}\n          )\n        )\n      },\n\n      getIsAllColumnsVisible: () =>\n        !table.getAllLeafColumns().some(column => !column.getIsVisible?.()),\n\n      getIsSomeColumnsVisible: () =>\n        table.getAllLeafColumns().some(column => column.getIsVisible?.()),\n\n      getToggleAllColumnsVisibilityHandler: () => {\n        return (e: unknown) => {\n          table.toggleAllColumnsVisible(\n            ((e as MouseEvent).target as HTMLInputElement)?.checked\n          )\n        }\n      },\n    }\n  },\n}\n","import { RowModel } from '..'\nimport { BuiltInAggregationFn, aggregationFns } from '../aggregationFns'\nimport { TableFeature } from '../core/table'\nimport {\n  Cell,\n  Column,\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  ColumnDefTemplate,\n  RowData,\n  AggregationFns,\n} from '../types'\nimport { isFunction, makeStateUpdater } from '../utils'\n\nexport type GroupingState = string[]\n\nexport interface GroupingTableState {\n  grouping: GroupingState\n}\n\nexport type AggregationFn<TData extends RowData> = (\n  columnId: string,\n  leafRows: Row<TData>[],\n  childRows: Row<TData>[]\n) => any\n\nexport type CustomAggregationFns = Record<string, AggregationFn<any>>\n\nexport type AggregationFnOption<TData extends RowData> =\n  | 'auto'\n  | keyof AggregationFns\n  | BuiltInAggregationFn\n  | AggregationFn<TData>\n\nexport interface GroupingColumnDef<TData extends RowData, TValue> {\n  aggregationFn?: AggregationFnOption<TData>\n  aggregatedCell?: ColumnDefTemplate<\n    ReturnType<Cell<TData, TValue>['getContext']>\n  >\n  enableGrouping?: boolean\n}\n\nexport interface GroupingColumn<TData extends RowData> {\n  getCanGroup: () => boolean\n  getIsGrouped: () => boolean\n  getGroupedIndex: () => number\n  toggleGrouping: () => void\n  getToggleGroupingHandler: () => () => void\n  getAutoAggregationFn: () => AggregationFn<TData> | undefined\n  getAggregationFn: () => AggregationFn<TData> | undefined\n}\n\nexport interface GroupingRow {\n  groupingColumnId?: string\n  groupingValue?: unknown\n  getIsGrouped: () => boolean\n  _groupingValuesCache: Record<string, any>\n}\n\nexport interface GroupingCell {\n  getIsGrouped: () => boolean\n  getIsPlaceholder: () => boolean\n  getIsAggregated: () => boolean\n}\n\nexport interface ColumnDefaultOptions {\n  // Column\n  onGroupingChange: OnChangeFn<GroupingState>\n  enableGrouping: boolean\n}\n\ninterface GroupingOptionsBase {\n  manualGrouping?: boolean\n  onGroupingChange?: OnChangeFn<GroupingState>\n  enableGrouping?: boolean\n  getGroupedRowModel?: (table: Table<any>) => () => RowModel<any>\n  groupedColumnMode?: false | 'reorder' | 'remove'\n}\n\ntype ResolvedAggregationFns = keyof AggregationFns extends never\n  ? {\n      aggregationFns?: Record<string, AggregationFn<any>>\n    }\n  : {\n      aggregationFns: Record<keyof AggregationFns, AggregationFn<any>>\n    }\n\nexport interface GroupingOptions\n  extends GroupingOptionsBase,\n    ResolvedAggregationFns {}\n\nexport type GroupingColumnMode = false | 'reorder' | 'remove'\n\nexport interface GroupingInstance<TData extends RowData> {\n  setGrouping: (updater: Updater<GroupingState>) => void\n  resetGrouping: (defaultState?: boolean) => void\n  getPreGroupedRowModel: () => RowModel<TData>\n  getGroupedRowModel: () => RowModel<TData>\n  _getGroupedRowModel?: () => RowModel<TData>\n}\n\n//\n\nexport const Grouping: TableFeature = {\n  getDefaultColumnDef: <TData extends RowData>(): GroupingColumnDef<\n    TData,\n    unknown\n  > => {\n    return {\n      aggregatedCell: props => (props.getValue() as any)?.toString?.() ?? null,\n      aggregationFn: 'auto',\n    }\n  },\n\n  getInitialState: (state): GroupingTableState => {\n    return {\n      grouping: [],\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): GroupingOptions => {\n    return {\n      onGroupingChange: makeStateUpdater('grouping', table),\n      groupedColumnMode: 'reorder',\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): GroupingColumn<TData> => {\n    return {\n      toggleGrouping: () => {\n        table.setGrouping(old => {\n          // Find any existing grouping for this column\n          if (old?.includes(column.id)) {\n            return old.filter(d => d !== column.id)\n          }\n\n          return [...(old ?? []), column.id]\n        })\n      },\n\n      getCanGroup: () => {\n        return (\n          column.columnDef.enableGrouping ??\n          true ??\n          table.options.enableGrouping ??\n          true ??\n          !!column.accessorFn\n        )\n      },\n\n      getIsGrouped: () => {\n        return table.getState().grouping?.includes(column.id)\n      },\n\n      getGroupedIndex: () => table.getState().grouping?.indexOf(column.id),\n\n      getToggleGroupingHandler: () => {\n        const canGroup = column.getCanGroup()\n\n        return () => {\n          if (!canGroup) return\n          column.toggleGrouping()\n        }\n      },\n      getAutoAggregationFn: () => {\n        const firstRow = table.getCoreRowModel().flatRows[0]\n\n        const value = firstRow?.getValue(column.id)\n\n        if (typeof value === 'number') {\n          return aggregationFns.sum\n        }\n\n        if (Object.prototype.toString.call(value) === '[object Date]') {\n          return aggregationFns.extent\n        }\n      },\n      getAggregationFn: () => {\n        if (!column) {\n          throw new Error()\n        }\n\n        return isFunction(column.columnDef.aggregationFn)\n          ? column.columnDef.aggregationFn\n          : column.columnDef.aggregationFn === 'auto'\n          ? column.getAutoAggregationFn()\n          : table.options.aggregationFns?.[\n              column.columnDef.aggregationFn as string\n            ] ??\n            aggregationFns[\n              column.columnDef.aggregationFn as BuiltInAggregationFn\n            ]\n      },\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): GroupingInstance<TData> => {\n    return {\n      setGrouping: updater => table.options.onGroupingChange?.(updater),\n\n      resetGrouping: defaultState => {\n        table.setGrouping(\n          defaultState ? [] : table.initialState?.grouping ?? []\n        )\n      },\n\n      getPreGroupedRowModel: () => table.getFilteredRowModel(),\n      getGroupedRowModel: () => {\n        if (!table._getGroupedRowModel && table.options.getGroupedRowModel) {\n          table._getGroupedRowModel = table.options.getGroupedRowModel(table)\n        }\n\n        if (table.options.manualGrouping || !table._getGroupedRowModel) {\n          return table.getPreGroupedRowModel()\n        }\n\n        return table._getGroupedRowModel()\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(row: Row<TData>): GroupingRow => {\n    return {\n      getIsGrouped: () => !!row.groupingColumnId,\n      _groupingValuesCache: {},\n    }\n  },\n\n  createCell: <TData extends RowData, TValue>(\n    cell: Cell<TData, TValue>,\n    column: Column<TData, TValue>,\n    row: Row<TData>,\n    table: Table<TData>\n  ): GroupingCell => {\n    const getRenderValue = () =>\n      cell.getValue() ?? table.options.renderFallbackValue\n\n    return {\n      getIsGrouped: () =>\n        column.getIsGrouped() && column.id === row.groupingColumnId,\n      getIsPlaceholder: () => !cell.getIsGrouped() && column.getIsGrouped(),\n      getIsAggregated: () =>\n        !cell.getIsGrouped() &&\n        !cell.getIsPlaceholder() &&\n        !!row.subRows?.length,\n    }\n  },\n}\n\nexport function orderColumns<TData extends RowData>(\n  leafColumns: Column<TData, unknown>[],\n  grouping: string[],\n  groupedColumnMode?: GroupingColumnMode\n) {\n  if (!grouping?.length || !groupedColumnMode) {\n    return leafColumns\n  }\n\n  const nonGroupingColumns = leafColumns.filter(\n    col => !grouping.includes(col.id)\n  )\n\n  if (groupedColumnMode === 'remove') {\n    return nonGroupingColumns\n  }\n\n  const groupingColumns = grouping\n    .map(g => leafColumns.find(col => col.id === g)!)\n    .filter(Boolean)\n\n  return [...groupingColumns, ...nonGroupingColumns]\n}\n","import { TableFeature } from '../core/table'\nimport {\n  OnChangeFn,\n  Updater,\n  Table,\n  Column,\n  Row,\n  Cell,\n  RowData,\n} from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type ColumnPinningPosition = false | 'left' | 'right'\n\nexport interface ColumnPinningState {\n  left?: string[]\n  right?: string[]\n}\n\nexport interface ColumnPinningTableState {\n  columnPinning: ColumnPinningState\n}\n\nexport interface ColumnPinningOptions {\n  onColumnPinningChange?: OnChangeFn<ColumnPinningState>\n  enablePinning?: boolean\n}\n\nexport interface ColumnPinningDefaultOptions {\n  onColumnPinningChange: OnChangeFn<ColumnPinningState>\n}\n\nexport interface ColumnPinningColumnDef {\n  enablePinning?: boolean\n}\n\nexport interface ColumnPinningColumn {\n  getCanPin: () => boolean\n  getPinnedIndex: () => number\n  getIsPinned: () => ColumnPinningPosition\n  pin: (position: ColumnPinningPosition) => void\n}\n\nexport interface ColumnPinningRow<TData extends RowData> {\n  getLeftVisibleCells: () => Cell<TData, unknown>[]\n  getCenterVisibleCells: () => Cell<TData, unknown>[]\n  getRightVisibleCells: () => Cell<TData, unknown>[]\n}\n\nexport interface ColumnPinningInstance<TData extends RowData> {\n  setColumnPinning: (updater: Updater<ColumnPinningState>) => void\n  resetColumnPinning: (defaultState?: boolean) => void\n  getIsSomeColumnsPinned: (position?: ColumnPinningPosition) => boolean\n  getLeftLeafColumns: () => Column<TData, unknown>[]\n  getRightLeafColumns: () => Column<TData, unknown>[]\n  getCenterLeafColumns: () => Column<TData, unknown>[]\n}\n\n//\n\nconst getDefaultPinningState = (): ColumnPinningState => ({\n  left: [],\n  right: [],\n})\n\nexport const Pinning: TableFeature = {\n  getInitialState: (state): ColumnPinningTableState => {\n    return {\n      columnPinning: getDefaultPinningState(),\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnPinningDefaultOptions => {\n    return {\n      onColumnPinningChange: makeStateUpdater('columnPinning', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): ColumnPinningColumn => {\n    return {\n      pin: position => {\n        const columnIds = column\n          .getLeafColumns()\n          .map(d => d.id)\n          .filter(Boolean) as string[]\n\n        table.setColumnPinning(old => {\n          if (position === 'right') {\n            return {\n              left: (old?.left ?? []).filter(d => !columnIds?.includes(d)),\n              right: [\n                ...(old?.right ?? []).filter(d => !columnIds?.includes(d)),\n                ...columnIds,\n              ],\n            }\n          }\n\n          if (position === 'left') {\n            return {\n              left: [\n                ...(old?.left ?? []).filter(d => !columnIds?.includes(d)),\n                ...columnIds,\n              ],\n              right: (old?.right ?? []).filter(d => !columnIds?.includes(d)),\n            }\n          }\n\n          return {\n            left: (old?.left ?? []).filter(d => !columnIds?.includes(d)),\n            right: (old?.right ?? []).filter(d => !columnIds?.includes(d)),\n          }\n        })\n      },\n\n      getCanPin: () => {\n        const leafColumns = column.getLeafColumns()\n\n        return leafColumns.some(\n          d =>\n            (d.columnDef.enablePinning ?? true) &&\n            (table.options.enablePinning ?? true)\n        )\n      },\n\n      getIsPinned: () => {\n        const leafColumnIds = column.getLeafColumns().map(d => d.id)\n\n        const { left, right } = table.getState().columnPinning\n\n        const isLeft = leafColumnIds.some(d => left?.includes(d))\n        const isRight = leafColumnIds.some(d => right?.includes(d))\n\n        return isLeft ? 'left' : isRight ? 'right' : false\n      },\n\n      getPinnedIndex: () => {\n        const position = column.getIsPinned()\n\n        return position\n          ? table.getState().columnPinning?.[position]?.indexOf(column.id) ?? -1\n          : 0\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): ColumnPinningRow<TData> => {\n    return {\n      getCenterVisibleCells: memo(\n        () => [\n          row._getAllVisibleCells(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allCells, left, right) => {\n          const leftAndRight: string[] = [...(left ?? []), ...(right ?? [])]\n\n          return allCells.filter(d => !leftAndRight.includes(d.column.id))\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'row.getCenterVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n      getLeftVisibleCells: memo(\n        () => [\n          row._getAllVisibleCells(),\n          table.getState().columnPinning.left,\n          ,\n        ],\n        (allCells, left) => {\n          const cells = (left ?? [])\n            .map(\n              columnId => allCells.find(cell => cell.column.id === columnId)!\n            )\n            .filter(Boolean)\n            .map(d => ({ ...d, position: 'left' } as Cell<TData, unknown>))\n\n          return cells\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row.getLeftVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n      getRightVisibleCells: memo(\n        () => [row._getAllVisibleCells(), table.getState().columnPinning.right],\n        (allCells, right) => {\n          const cells = (right ?? [])\n            .map(\n              columnId => allCells.find(cell => cell.column.id === columnId)!\n            )\n            .filter(Boolean)\n            .map(d => ({ ...d, position: 'right' } as Cell<TData, unknown>))\n\n          return cells\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row.getRightVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnPinningInstance<TData> => {\n    return {\n      setColumnPinning: updater =>\n        table.options.onColumnPinningChange?.(updater),\n\n      resetColumnPinning: defaultState =>\n        table.setColumnPinning(\n          defaultState\n            ? getDefaultPinningState()\n            : table.initialState?.columnPinning ?? getDefaultPinningState()\n        ),\n\n      getIsSomeColumnsPinned: position => {\n        const pinningState = table.getState().columnPinning\n\n        if (!position) {\n          return Boolean(\n            pinningState.left?.length || pinningState.right?.length\n          )\n        }\n        return Boolean(pinningState[position]?.length)\n      },\n\n      getLeftLeafColumns: memo(\n        () => [table.getAllLeafColumns(), table.getState().columnPinning.left],\n        (allColumns, left) => {\n          return (left ?? [])\n            .map(columnId => allColumns.find(column => column.id === columnId)!)\n            .filter(Boolean)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftLeafColumns',\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      ),\n\n      getRightLeafColumns: memo(\n        () => [table.getAllLeafColumns(), table.getState().columnPinning.right],\n        (allColumns, right) => {\n          return (right ?? [])\n            .map(columnId => allColumns.find(column => column.id === columnId)!)\n            .filter(Boolean)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightLeafColumns',\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      ),\n\n      getCenterLeafColumns: memo(\n        () => [\n          table.getAllLeafColumns(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, left, right) => {\n          const leftAndRight: string[] = [...(left ?? []), ...(right ?? [])]\n\n          return allColumns.filter(d => !leftAndRight.includes(d.id))\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterLeafColumns',\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      ),\n    }\n  },\n}\n","import { RowModel } from '..'\nimport { TableFeature } from '../core/table'\nimport {\n  BuiltInSortingFn,\n  reSplitAlphaNumeric,\n  sortingFns,\n} from '../sortingFns'\n\nimport {\n  Column,\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  RowData,\n  SortingFns,\n} from '../types'\n\nimport { isFunction, makeStateUpdater } from '../utils'\n\nexport type SortDirection = 'asc' | 'desc'\n\nexport interface ColumnSort {\n  id: string\n  desc: boolean\n}\n\nexport type SortingState = ColumnSort[]\n\nexport interface SortingTableState {\n  sorting: SortingState\n}\n\nexport interface SortingFn<TData extends RowData> {\n  (rowA: Row<TData>, rowB: Row<TData>, columnId: string): number\n}\n\nexport type CustomSortingFns<TData extends RowData> = Record<\n  string,\n  SortingFn<TData>\n>\n\nexport type SortingFnOption<TData extends RowData> =\n  | 'auto'\n  | keyof SortingFns\n  | BuiltInSortingFn\n  | SortingFn<TData>\n\nexport interface SortingColumnDef<TData extends RowData> {\n  sortingFn?: SortingFnOption<TData>\n  sortDescFirst?: boolean\n  enableSorting?: boolean\n  enableMultiSort?: boolean\n  invertSorting?: boolean\n  sortUndefined?: false | -1 | 1\n}\n\nexport interface SortingColumn<TData extends RowData> {\n  getAutoSortingFn: () => SortingFn<TData>\n  getAutoSortDir: () => SortDirection\n  getSortingFn: () => SortingFn<TData>\n  getFirstSortDir: () => SortDirection\n  getNextSortingOrder: () => SortDirection | false\n  getCanSort: () => boolean\n  getCanMultiSort: () => boolean\n  getSortIndex: () => number\n  getIsSorted: () => false | SortDirection\n  clearSorting: () => void\n  toggleSorting: (desc?: boolean, isMulti?: boolean) => void\n  getToggleSortingHandler: () => undefined | ((event: unknown) => void)\n}\n\ninterface SortingOptionsBase {\n  manualSorting?: boolean\n  onSortingChange?: OnChangeFn<SortingState>\n  enableSorting?: boolean\n  enableSortingRemoval?: boolean\n  enableMultiRemove?: boolean\n  enableMultiSort?: boolean\n  sortDescFirst?: boolean\n  getSortedRowModel?: (table: Table<any>) => () => RowModel<any>\n  maxMultiSortColCount?: number\n  isMultiSortEvent?: (e: unknown) => boolean\n}\n\ntype ResolvedSortingFns = keyof SortingFns extends never\n  ? {\n      sortingFns?: Record<string, SortingFn<any>>\n    }\n  : {\n      sortingFns: Record<keyof SortingFns, SortingFn<any>>\n    }\n\nexport interface SortingOptions<TData extends RowData>\n  extends SortingOptionsBase,\n    ResolvedSortingFns {}\n\nexport interface SortingInstance<TData extends RowData> {\n  setSorting: (updater: Updater<SortingState>) => void\n  resetSorting: (defaultState?: boolean) => void\n  getPreSortedRowModel: () => RowModel<TData>\n  getSortedRowModel: () => RowModel<TData>\n  _getSortedRowModel?: () => RowModel<TData>\n}\n\n//\n\nexport const Sorting: TableFeature = {\n  getInitialState: (state): SortingTableState => {\n    return {\n      sorting: [],\n      ...state,\n    }\n  },\n\n  getDefaultColumnDef: <TData extends RowData>(): SortingColumnDef<TData> => {\n    return {\n      sortingFn: 'auto',\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): SortingOptions<TData> => {\n    return {\n      onSortingChange: makeStateUpdater('sorting', table),\n      isMultiSortEvent: (e: unknown) => {\n        return (e as MouseEvent).shiftKey\n      },\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): SortingColumn<TData> => {\n    return {\n      getAutoSortingFn: () => {\n        const firstRows = table.getFilteredRowModel().flatRows.slice(10)\n\n        let isString = false\n\n        for (const row of firstRows) {\n          const value = row?.getValue(column.id)\n\n          if (Object.prototype.toString.call(value) === '[object Date]') {\n            return sortingFns.datetime\n          }\n\n          if (typeof value === 'string') {\n            isString = true\n\n            if (value.split(reSplitAlphaNumeric).length > 1) {\n              return sortingFns.alphanumeric\n            }\n          }\n        }\n\n        if (isString) {\n          return sortingFns.text\n        }\n\n        return sortingFns.basic\n      },\n      getAutoSortDir: () => {\n        const firstRow = table.getFilteredRowModel().flatRows[0]\n\n        const value = firstRow?.getValue(column.id)\n\n        if (typeof value === 'string') {\n          return 'asc'\n        }\n\n        return 'desc'\n      },\n      getSortingFn: () => {\n        if (!column) {\n          throw new Error()\n        }\n\n        return isFunction(column.columnDef.sortingFn)\n          ? column.columnDef.sortingFn\n          : column.columnDef.sortingFn === 'auto'\n          ? column.getAutoSortingFn()\n          : table.options.sortingFns?.[column.columnDef.sortingFn as string] ??\n            sortingFns[column.columnDef.sortingFn as BuiltInSortingFn]\n      },\n      toggleSorting: (desc, multi) => {\n        // if (column.columns.length) {\n        //   column.columns.forEach((c, i) => {\n        //     if (c.id) {\n        //       table.toggleColumnSorting(c.id, undefined, multi || !!i)\n        //     }\n        //   })\n        //   return\n        // }\n\n        // this needs to be outside of table.setSorting to be in sync with rerender\n        const nextSortingOrder = column.getNextSortingOrder()\n        const hasManualValue = typeof desc !== 'undefined' && desc !== null\n\n        table.setSorting(old => {\n          // Find any existing sorting for this column\n          const existingSorting = old?.find(d => d.id === column.id)\n          const existingIndex = old?.findIndex(d => d.id === column.id)\n\n          let newSorting: SortingState = []\n\n          // What should we do with this sort action?\n          let sortAction: 'add' | 'remove' | 'toggle' | 'replace'\n          let nextDesc = hasManualValue ? desc : nextSortingOrder === 'desc'\n\n          // Multi-mode\n          if (old?.length && column.getCanMultiSort() && multi) {\n            if (existingSorting) {\n              sortAction = 'toggle'\n            } else {\n              sortAction = 'add'\n            }\n          } else {\n            // Normal mode\n            if (old?.length && existingIndex !== old.length - 1) {\n              sortAction = 'replace'\n            } else if (existingSorting) {\n              sortAction = 'toggle'\n            } else {\n              sortAction = 'replace'\n            }\n          }\n\n          // Handle toggle states that will remove the sorting\n          if (sortAction === 'toggle') {\n            // If we are \"actually\" toggling (not a manual set value), should we remove the sorting?\n            if (!hasManualValue) {\n              // Is our intention to remove?\n              if (!nextSortingOrder) {\n                sortAction = 'remove'\n              }\n            }\n          }\n\n          if (sortAction === 'add') {\n            newSorting = [\n              ...old,\n              {\n                id: column.id,\n                desc: nextDesc,\n              },\n            ]\n            // Take latest n columns\n            newSorting.splice(\n              0,\n              newSorting.length -\n                (table.options.maxMultiSortColCount ?? Number.MAX_SAFE_INTEGER)\n            )\n          } else if (sortAction === 'toggle') {\n            // This flips (or sets) the\n            newSorting = old.map(d => {\n              if (d.id === column.id) {\n                return {\n                  ...d,\n                  desc: nextDesc,\n                }\n              }\n              return d\n            })\n          } else if (sortAction === 'remove') {\n            newSorting = old.filter(d => d.id !== column.id)\n          } else {\n            newSorting = [\n              {\n                id: column.id,\n                desc: nextDesc,\n              },\n            ]\n          }\n\n          return newSorting\n        })\n      },\n\n      getFirstSortDir: () => {\n        const sortDescFirst =\n          column.columnDef.sortDescFirst ??\n          table.options.sortDescFirst ??\n          column.getAutoSortDir() === 'desc'\n        return sortDescFirst ? 'desc' : 'asc'\n      },\n\n      getNextSortingOrder: (multi?: boolean) => {\n        const firstSortDirection = column.getFirstSortDir()\n        const isSorted = column.getIsSorted()\n\n        if (!isSorted) {\n          return firstSortDirection\n        }\n\n        if (\n          isSorted !== firstSortDirection &&\n          (table.options.enableSortingRemoval ?? true) && // If enableSortRemove, enable in general\n          (multi ? table.options.enableMultiRemove ?? true : true) // If multi, don't allow if enableMultiRemove))\n        ) {\n          return false\n        }\n        return isSorted === 'desc' ? 'asc' : 'desc'\n      },\n\n      getCanSort: () => {\n        return (\n          (column.columnDef.enableSorting ?? true) &&\n          (table.options.enableSorting ?? true) &&\n          !!column.accessorFn\n        )\n      },\n\n      getCanMultiSort: () => {\n        return (\n          column.columnDef.enableMultiSort ??\n          table.options.enableMultiSort ??\n          !!column.accessorFn\n        )\n      },\n\n      getIsSorted: () => {\n        const columnSort = table\n          .getState()\n          .sorting?.find(d => d.id === column.id)\n\n        return !columnSort ? false : columnSort.desc ? 'desc' : 'asc'\n      },\n\n      getSortIndex: () =>\n        table.getState().sorting?.findIndex(d => d.id === column.id) ?? -1,\n\n      clearSorting: () => {\n        //clear sorting for just 1 column\n        table.setSorting(old =>\n          old?.length ? old.filter(d => d.id !== column.id) : []\n        )\n      },\n\n      getToggleSortingHandler: () => {\n        const canSort = column.getCanSort()\n\n        return (e: unknown) => {\n          if (!canSort) return\n          ;(e as any).persist?.()\n          column.toggleSorting?.(\n            undefined,\n            column.getCanMultiSort()\n              ? table.options.isMultiSortEvent?.(e)\n              : false\n          )\n        }\n      },\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): SortingInstance<TData> => {\n    return {\n      setSorting: updater => table.options.onSortingChange?.(updater),\n      resetSorting: defaultState => {\n        table.setSorting(defaultState ? [] : table.initialState?.sorting ?? [])\n      },\n      getPreSortedRowModel: () => table.getGroupedRowModel(),\n      getSortedRowModel: () => {\n        if (!table._getSortedRowModel && table.options.getSortedRowModel) {\n          table._getSortedRowModel = table.options.getSortedRowModel(table)\n        }\n\n        if (table.options.manualSorting || !table._getSortedRowModel) {\n          return table.getPreSortedRowModel()\n        }\n\n        return table._getSortedRowModel()\n      },\n    }\n  },\n}\n","import { TableFeature } from '../core/table'\nimport { OnChangeFn, Table, RowModel, Updater, RowData } from '../types'\nimport { functionalUpdate, makeStateUpdater, memo } from '../utils'\n\nexport interface PaginationState {\n  pageIndex: number\n  pageSize: number\n}\n\nexport interface PaginationTableState {\n  pagination: PaginationState\n}\n\nexport interface PaginationInitialTableState {\n  pagination?: Partial<PaginationState>\n}\n\nexport interface PaginationOptions {\n  pageCount?: number\n  manualPagination?: boolean\n  onPaginationChange?: OnChangeFn<PaginationState>\n  autoResetPageIndex?: boolean\n  getPaginationRowModel?: (table: Table<any>) => () => RowModel<any>\n}\n\nexport interface PaginationDefaultOptions {\n  onPaginationChange: OnChangeFn<PaginationState>\n}\n\nexport interface PaginationInstance<TData extends RowData> {\n  _autoResetPageIndex: () => void\n  setPagination: (updater: Updater<PaginationState>) => void\n  resetPagination: (defaultState?: boolean) => void\n  setPageIndex: (updater: Updater<number>) => void\n  resetPageIndex: (defaultState?: boolean) => void\n  setPageSize: (updater: Updater<number>) => void\n  resetPageSize: (defaultState?: boolean) => void\n  setPageCount: (updater: Updater<number>) => void\n  getPageOptions: () => number[]\n  getCanPreviousPage: () => boolean\n  getCanNextPage: () => boolean\n  previousPage: () => void\n  nextPage: () => void\n  getPrePaginationRowModel: () => RowModel<TData>\n  getPaginationRowModel: () => RowModel<TData>\n  _getPaginationRowModel?: () => RowModel<TData>\n  getPageCount: () => number\n}\n\n//\n\nconst defaultPageIndex = 0\nconst defaultPageSize = 10\n\nconst getDefaultPaginationState = (): PaginationState => ({\n  pageIndex: defaultPageIndex,\n  pageSize: defaultPageSize,\n})\n\nexport const Pagination: TableFeature = {\n  getInitialState: (state): PaginationTableState => {\n    return {\n      ...state,\n      pagination: {\n        ...getDefaultPaginationState(),\n        ...state?.pagination,\n      },\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): PaginationDefaultOptions => {\n    return {\n      onPaginationChange: makeStateUpdater('pagination', table),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): PaginationInstance<TData> => {\n    let registered = false\n    let queued = false\n\n    return {\n      _autoResetPageIndex: () => {\n        if (!registered) {\n          table._queue(() => {\n            registered = true\n          })\n          return\n        }\n\n        if (\n          table.options.autoResetAll ??\n          table.options.autoResetPageIndex ??\n          !table.options.manualPagination\n        ) {\n          if (queued) return\n          queued = true\n          table._queue(() => {\n            table.resetPageIndex()\n            queued = false\n          })\n        }\n      },\n      setPagination: updater => {\n        const safeUpdater: Updater<PaginationState> = old => {\n          let newState = functionalUpdate(updater, old)\n\n          return newState\n        }\n\n        return table.options.onPaginationChange?.(safeUpdater)\n      },\n      resetPagination: defaultState => {\n        table.setPagination(\n          defaultState\n            ? getDefaultPaginationState()\n            : table.initialState.pagination ?? getDefaultPaginationState()\n        )\n      },\n      setPageIndex: updater => {\n        table.setPagination(old => {\n          let pageIndex = functionalUpdate(updater, old.pageIndex)\n\n          const maxPageIndex =\n            typeof table.options.pageCount === 'undefined' ||\n            table.options.pageCount === -1\n              ? Number.MAX_SAFE_INTEGER\n              : table.options.pageCount - 1\n\n          pageIndex = Math.max(0, Math.min(pageIndex, maxPageIndex))\n\n          return {\n            ...old,\n            pageIndex,\n          }\n        })\n      },\n      resetPageIndex: defaultState => {\n        table.setPageIndex(\n          defaultState\n            ? defaultPageIndex\n            : table.initialState?.pagination?.pageIndex ?? defaultPageIndex\n        )\n      },\n      resetPageSize: defaultState => {\n        table.setPageSize(\n          defaultState\n            ? defaultPageSize\n            : table.initialState?.pagination?.pageSize ?? defaultPageSize\n        )\n      },\n      setPageSize: updater => {\n        table.setPagination(old => {\n          const pageSize = Math.max(1, functionalUpdate(updater, old.pageSize))\n          const topRowIndex = old.pageSize * old.pageIndex!\n          const pageIndex = Math.floor(topRowIndex / pageSize)\n\n          return {\n            ...old,\n            pageIndex,\n            pageSize,\n          }\n        })\n      },\n      setPageCount: updater =>\n        table.setPagination(old => {\n          let newPageCount = functionalUpdate(\n            updater,\n            table.options.pageCount ?? -1\n          )\n\n          if (typeof newPageCount === 'number') {\n            newPageCount = Math.max(-1, newPageCount)\n          }\n\n          return {\n            ...old,\n            pageCount: newPageCount,\n          }\n        }),\n\n      getPageOptions: memo(\n        () => [table.getPageCount()],\n        pageCount => {\n          let pageOptions: number[] = []\n          if (pageCount && pageCount > 0) {\n            pageOptions = [...new Array(pageCount)].fill(null).map((_, i) => i)\n          }\n          return pageOptions\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getPageOptions',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      getCanPreviousPage: () => table.getState().pagination.pageIndex > 0,\n\n      getCanNextPage: () => {\n        const { pageIndex } = table.getState().pagination\n\n        const pageCount = table.getPageCount()\n\n        if (pageCount === -1) {\n          return true\n        }\n\n        if (pageCount === 0) {\n          return false\n        }\n\n        return pageIndex < pageCount - 1\n      },\n\n      previousPage: () => {\n        return table.setPageIndex(old => old - 1)\n      },\n\n      nextPage: () => {\n        return table.setPageIndex(old => {\n          return old + 1\n        })\n      },\n\n      getPrePaginationRowModel: () => table.getExpandedRowModel(),\n      getPaginationRowModel: () => {\n        if (\n          !table._getPaginationRowModel &&\n          table.options.getPaginationRowModel\n        ) {\n          table._getPaginationRowModel =\n            table.options.getPaginationRowModel(table)\n        }\n\n        if (table.options.manualPagination || !table._getPaginationRowModel) {\n          return table.getPrePaginationRowModel()\n        }\n\n        return table._getPaginationRowModel()\n      },\n\n      getPageCount: () => {\n        return (\n          table.options.pageCount ??\n          Math.ceil(\n            table.getPrePaginationRowModel().rows.length /\n              table.getState().pagination.pageSize\n          )\n        )\n      },\n    }\n  },\n}\n","import {\n  Column,\n  Table,\n  AccessorFn,\n  ColumnDef,\n  RowData,\n  ColumnDefResolved,\n} from '../types'\nimport { memo } from '../utils'\n\nexport interface CoreColumn<TData extends RowData, TValue> {\n  id: string\n  depth: number\n  accessorFn?: AccessorFn<TData, TValue>\n  columnDef: ColumnDef<TData, TValue>\n  columns: Column<TData, TValue>[]\n  parent?: Column<TData, TValue>\n  getFlatColumns: () => Column<TData, TValue>[]\n  getLeafColumns: () => Column<TData, TValue>[]\n}\n\nexport function createColumn<TData extends RowData, TValue>(\n  table: Table<TData>,\n  columnDef: ColumnDef<TData, TValue>,\n  depth: number,\n  parent?: Column<TData, TValue>\n): Column<TData, TValue> {\n  const defaultColumn = table._getDefaultColumnDef()\n\n  const resolvedColumnDef = {\n    ...defaultColumn,\n    ...columnDef,\n  } as ColumnDefResolved<TData>\n\n  const accessorKey = resolvedColumnDef.accessorKey\n\n  let id =\n    resolvedColumnDef.id ??\n    (accessorKey ? accessorKey.replace('.', '_') : undefined) ??\n    (typeof resolvedColumnDef.header === 'string'\n      ? resolvedColumnDef.header\n      : undefined)\n\n  let accessorFn: AccessorFn<TData> | undefined\n\n  if (resolvedColumnDef.accessorFn) {\n    accessorFn = resolvedColumnDef.accessorFn\n  } else if (accessorKey) {\n    // Support deep accessor keys\n    if (accessorKey.includes('.')) {\n      accessorFn = (originalRow: TData) => {\n        let result = originalRow as Record<string, any>\n\n        for (const key of accessorKey.split('.')) {\n          result = result?.[key]\n          if (process.env.NODE_ENV !== 'production' && result === undefined) {\n            console.warn(\n              `\"${key}\" in deeply nested key \"${accessorKey}\" returned undefined.`\n            )\n          }\n        }\n\n        return result\n      }\n    } else {\n      accessorFn = (originalRow: TData) =>\n        (originalRow as any)[resolvedColumnDef.accessorKey]\n    }\n  }\n\n  if (!id) {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        resolvedColumnDef.accessorFn\n          ? `Columns require an id when using an accessorFn`\n          : `Columns require an id when using a non-string header`\n      )\n    }\n    throw new Error()\n  }\n\n  let column: CoreColumn<TData, any> = {\n    id: `${String(id)}`,\n    accessorFn,\n    parent: parent as any,\n    depth,\n    columnDef: resolvedColumnDef as ColumnDef<TData, any>,\n    columns: [],\n    getFlatColumns: memo(\n      () => [true],\n      () => {\n        return [\n          column as Column<TData, TValue>,\n          ...column.columns?.flatMap(d => d.getFlatColumns()),\n        ]\n      },\n      {\n        key: process.env.NODE_ENV === 'production' && 'column.getFlatColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n    getLeafColumns: memo(\n      () => [table._getOrderColumnsFn()],\n      orderColumns => {\n        if (column.columns?.length) {\n          let leafColumns = column.columns.flatMap(column =>\n            column.getLeafColumns()\n          )\n\n          return orderColumns(leafColumns)\n        }\n\n        return [column as Column<TData, TValue>]\n      },\n      {\n        key: process.env.NODE_ENV === 'production' && 'column.getLeafColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n  }\n\n  column = table._features.reduce((obj, feature) => {\n    return Object.assign(obj, feature.createColumn?.(column, table))\n  }, column)\n\n  // Yes, we have to convert table to uknown, because we know more than the compiler here.\n  return column as Column<TData, TValue>\n}\n","import { RowData, Cell, Row, Table } from '../types'\nimport { flattenBy, memo } from '../utils'\nimport { createCell } from './cell'\n\nexport interface CoreRow<TData extends RowData> {\n  id: string\n  index: number\n  original: TData\n  depth: number\n  _valuesCache: Record<string, unknown>\n  _uniqueValuesCache: Record<string, unknown>\n  getValue: <TValue>(columnId: string) => TValue\n  getUniqueValues: <TValue>(columnId: string) => TValue[]\n  renderValue: <TValue>(columnId: string) => TValue\n  subRows: Row<TData>[]\n  getLeafRows: () => Row<TData>[]\n  originalSubRows?: TData[]\n  getAllCells: () => Cell<TData, unknown>[]\n  _getAllCellsByColumnId: () => Record<string, Cell<TData, unknown>>\n}\n\nexport const createRow = <TData extends RowData>(\n  table: Table<TData>,\n  id: string,\n  original: TData,\n  rowIndex: number,\n  depth: number,\n  subRows?: Row<TData>[]\n): Row<TData> => {\n  let row: CoreRow<TData> = {\n    id,\n    index: rowIndex,\n    original,\n    depth,\n    _valuesCache: {},\n    _uniqueValuesCache: {},\n    getValue: columnId => {\n      if (row._valuesCache.hasOwnProperty(columnId)) {\n        return row._valuesCache[columnId]\n      }\n\n      const column = table.getColumn(columnId)\n\n      if (!column?.accessorFn) {\n        return undefined\n      }\n\n      row._valuesCache[columnId] = column.accessorFn(\n        row.original as TData,\n        rowIndex\n      )\n\n      return row._valuesCache[columnId] as any\n    },\n    getUniqueValues: columnId => {\n      if (row._uniqueValuesCache.hasOwnProperty(columnId)) {\n        return row._uniqueValuesCache[columnId]\n      }\n\n      const column = table.getColumn(columnId)\n\n      if (!column?.accessorFn) {\n        return undefined\n      }\n\n      if (!column.columnDef.getUniqueValues) {\n        row._uniqueValuesCache[columnId] = [row.getValue(columnId)]\n        return row._uniqueValuesCache[columnId]\n      }\n\n      row._uniqueValuesCache[columnId] = column.columnDef.getUniqueValues(\n        row.original as TData,\n        rowIndex\n      )\n\n      return row._uniqueValuesCache[columnId] as any\n    },\n    renderValue: columnId =>\n      row.getValue(columnId) ?? table.options.renderFallbackValue,\n    subRows: subRows ?? [],\n    getLeafRows: () => flattenBy(row.subRows, d => d.subRows),\n    getAllCells: memo(\n      () => [table.getAllLeafColumns()],\n      leafColumns => {\n        return leafColumns.map(column => {\n          return createCell(table, row as Row<TData>, column, column.id)\n        })\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'row.getAllCells',\n        debug: () => table.options.debugAll ?? table.options.debugRows,\n      }\n    ),\n\n    _getAllCellsByColumnId: memo(\n      () => [row.getAllCells()],\n      allCells => {\n        return allCells.reduce((acc, cell) => {\n          acc[cell.column.id] = cell\n          return acc\n        }, {} as Record<string, Cell<TData, unknown>>)\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'production' && 'row.getAllCellsByColumnId',\n        debug: () => table.options.debugAll ?? table.options.debugRows,\n      }\n    ),\n  }\n\n  for (let i = 0; i < table._features.length; i++) {\n    const feature = table._features[i]\n    Object.assign(row, feature?.createRow?.(row, table))\n  }\n\n  return row as Row<TData>\n}\n","import { RowData, Cell, Column, Row, Table } from '../types'\nimport { Getter, memo } from '../utils'\n\nexport interface CellContext<TData extends RowData, TValue> {\n  table: Table<TData>\n  column: Column<TData, TValue>\n  row: Row<TData>\n  cell: Cell<TData, TValue>\n  getValue: Getter<TValue>\n  renderValue: Getter<TValue | null>\n}\n\nexport interface CoreCell<TData extends RowData, TValue> {\n  id: string\n  getValue: CellContext<TData, TValue>['getValue']\n  renderValue: CellContext<TData, TValue>['renderValue']\n  row: Row<TData>\n  column: Column<TData, TValue>\n  getContext: () => CellContext<TData, TValue>\n}\n\nexport function createCell<TData extends RowData, TValue>(\n  table: Table<TData>,\n  row: Row<TData>,\n  column: Column<TData, TValue>,\n  columnId: string\n): Cell<TData, TValue> {\n  const getRenderValue = () =>\n    cell.getValue() ?? table.options.renderFallbackValue\n\n  const cell: CoreCell<TData, TValue> = {\n    id: `${row.id}_${column.id}`,\n    row,\n    column,\n    getValue: () => row.getValue(columnId),\n    renderValue: getRenderValue,\n    getContext: memo(\n      () => [table, column, row, cell],\n      (table, column, row, cell) => ({\n        table,\n        column,\n        row,\n        cell: cell as Cell<TData, TValue>,\n        getValue: cell.getValue,\n        renderValue: cell.renderValue,\n      }),\n      {\n        key: process.env.NODE_ENV === 'development' && 'cell.getContext',\n        debug: () => table.options.debugAll,\n      }\n    ),\n  }\n\n  table._features.forEach(feature => {\n    Object.assign(\n      cell,\n      feature.createCell?.(\n        cell as Cell<TData, TValue>,\n        column,\n        row as Row<TData>,\n        table\n      )\n    )\n  }, {})\n\n  return cell as Cell<TData, TValue>\n}\n","import { createRow } from '../core/row'\nimport { Table, Row, RowModel, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getCoreRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.options.data],\n      (\n        data\n      ): {\n        rows: Row<TData>[]\n        flatRows: Row<TData>[]\n        rowsById: Record<string, Row<TData>>\n      } => {\n        const rowModel: RowModel<TData> = {\n          rows: [],\n          flatRows: [],\n          rowsById: {},\n        }\n\n        const accessRows = (\n          originalRows: TData[],\n          depth = 0,\n          parent?: Row<TData>\n        ): Row<TData>[] => {\n          const rows = [] as Row<TData>[]\n\n          for (let i = 0; i < originalRows.length; i++) {\n            // This could be an expensive check at scale, so we should move it somewhere else, but where?\n            // if (!id) {\n            //   if (process.env.NODE_ENV !== 'production') {\n            //     throw new Error(`getRowId expected an ID, but got ${id}`)\n            //   }\n            // }\n\n            // Make the row\n            const row = createRow(\n              table,\n              table._getRowId(originalRows[i]!, i, parent),\n              originalRows[i]!,\n              i,\n              depth\n            )\n\n            // Keep track of every row in a flat array\n            rowModel.flatRows.push(row)\n            // Also keep track of every row by its ID\n            rowModel.rowsById[row.id] = row\n            // Push table row into parent\n            rows.push(row)\n\n            // Get the original subrows\n            if (table.options.getSubRows) {\n              row.originalSubRows = table.options.getSubRows(\n                originalRows[i]!,\n                i\n              )\n\n              // Then recursively access them\n              if (row.originalSubRows?.length) {\n                row.subRows = accessRows(row.originalSubRows, depth + 1, row)\n              }\n            }\n          }\n\n          return rows\n        }\n\n        rowModel.rows = accessRows(data)\n\n        return rowModel\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._autoResetPageIndex()\n        },\n      }\n    )\n}\n","import { Table, Row, RowModel, RowData } from '../types'\nimport { SortingFn } from '../features/Sorting'\nimport { memo } from '../utils'\n\nexport function getSortedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.getState().sorting, table.getPreSortedRowModel()],\n      (sorting, rowModel) => {\n        if (!rowModel.rows.length || !sorting?.length) {\n          return rowModel\n        }\n\n        const sortingState = table.getState().sorting\n\n        const sortedFlatRows: Row<TData>[] = []\n\n        // Filter out sortings that correspond to non existing columns\n        const availableSorting = sortingState.filter(sort =>\n          table.getColumn(sort.id)?.getCanSort()\n        )\n\n        const columnInfoById: Record<\n          string,\n          {\n            sortUndefined?: false | -1 | 1\n            invertSorting?: boolean\n            sortingFn: SortingFn<TData>\n          }\n        > = {}\n\n        availableSorting.forEach(sortEntry => {\n          const column = table.getColumn(sortEntry.id)\n          if(!column) return\n\n          columnInfoById[sortEntry.id] = {\n            sortUndefined: column.columnDef.sortUndefined,\n            invertSorting: column.columnDef.invertSorting,\n            sortingFn: column.getSortingFn(),\n          }\n        })\n\n        const sortData = (rows: Row<TData>[]) => {\n          // This will also perform a stable sorting using the row index\n          // if needed.\n          const sortedData = [...rows]\n\n          sortedData.sort((rowA, rowB) => {\n            for (let i = 0; i < availableSorting.length; i += 1) {\n              const sortEntry = availableSorting[i]!\n              const columnInfo = columnInfoById[sortEntry.id]!\n              const isDesc = sortEntry?.desc ?? false\n\n              if (columnInfo.sortUndefined) {\n                const aValue = rowA.getValue(sortEntry.id)\n                const bValue = rowB.getValue(sortEntry.id)\n\n                const aUndefined = typeof aValue === 'undefined'\n                const bUndefined = typeof bValue === 'undefined'\n\n                if (aUndefined || bUndefined) {\n                  return aUndefined && bUndefined\n                    ? 0\n                    : aUndefined\n                    ? columnInfo.sortUndefined\n                    : -columnInfo.sortUndefined\n                }\n              }\n\n              // This function should always return in ascending order\n              let sortInt = columnInfo.sortingFn(rowA, rowB, sortEntry.id)\n\n              if (sortInt !== 0) {\n                if (isDesc) {\n                  sortInt *= -1\n                }\n\n                if (columnInfo.invertSorting) {\n                  sortInt *= -1\n                }\n\n                return sortInt\n              }\n            }\n\n            return rowA.index - rowB.index\n          })\n\n          // If there are sub-rows, sort them\n          sortedData.forEach(row => {\n            sortedFlatRows.push(row)\n            if (row.subRows?.length) {\n              row.subRows = sortData(row.subRows)\n            }\n          })\n\n          return sortedData\n        }\n\n        return {\n          rows: sortData(rowModel.rows),\n          flatRows: sortedFlatRows,\n          rowsById: rowModel.rowsById,\n        }\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getSortedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._autoResetPageIndex()\n        },\n      }\n    )\n}\n","import { Table, Row, RowModel, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getExpandedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getState().expanded,\n        table.getPreExpandedRowModel(),\n        table.options.paginateExpandedRows,\n      ],\n      (expanded, rowModel, paginateExpandedRows) => {\n        if (\n          !rowModel.rows.length ||\n          (expanded !== true && !Object.keys(expanded ?? {}).length)\n        ) {\n          return rowModel\n        }\n\n        if (!paginateExpandedRows) {\n          // Only expand rows at this point if they are being paginated\n          return rowModel\n        }\n\n        return expandRows(rowModel)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getExpandedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n      }\n    )\n}\n\nexport function expandRows<TData extends RowData>(rowModel: RowModel<TData>) {\n  const expandedRows: Row<TData>[] = []\n\n  const handleRow = (row: Row<TData>) => {\n    expandedRows.push(row)\n\n    if (row.subRows?.length && row.getIsExpanded()) {\n      row.subRows.forEach(handleRow)\n    }\n  }\n\n  rowModel.rows.forEach(handleRow)\n\n  return {\n    rows: expandedRows,\n    flatRows: rowModel.flatRows,\n    rowsById: rowModel.rowsById,\n  }\n}\n","import { Table, RowModel, Row, RowData } from '../types'\nimport { memo } from '../utils'\nimport { expandRows } from './getExpandedRowModel'\n\nexport function getPaginationRowModel<TData extends RowData>(opts?: {\n  initialSync: boolean\n}): (table: Table<TData>) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getState().pagination,\n        table.getPrePaginationRowModel(),\n        table.options.paginateExpandedRows\n          ? undefined\n          : table.getState().expanded,\n      ],\n      (pagination, rowModel) => {\n        if (!rowModel.rows.length) {\n          return rowModel\n        }\n\n        const { pageSize, pageIndex } = pagination\n        let { rows, flatRows, rowsById } = rowModel\n        const pageStart = pageSize * pageIndex\n        const pageEnd = pageStart + pageSize\n\n        rows = rows.slice(pageStart, pageEnd)\n\n        let paginatedRowModel: RowModel<TData>\n\n        if (!table.options.paginateExpandedRows) {\n          paginatedRowModel = expandRows({\n            rows,\n            flatRows,\n            rowsById,\n          })\n        } else {\n          paginatedRowModel = {\n            rows,\n            flatRows,\n            rowsById,\n          }\n        }\n\n        paginatedRowModel.flatRows = []\n\n        const handleRow = (row: Row<TData>) => {\n          paginatedRowModel.flatRows.push(row)\n          if (row.subRows.length) {\n            row.subRows.forEach(handleRow)\n          }\n        }\n\n        paginatedRowModel.rows.forEach(handleRow)\n\n        return paginatedRowModel\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getPaginationRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n      }\n    )\n}\n"],"names":["e","require","k","Object","is","a","b","l","useState","m","useEffect","n","useLayoutEffect","p","useDebugValue","r","getSnapshot","value","d","f","u","window","document","createElement","inst","c","g","exports","useSyncExternalStore","module","QueryObserver","constructor","client","options","trackedProps","Set","selectError","bindMethods","setOptions","this","remove","bind","refetch","onSubscribe","listeners","length","currentQuery","addObserver","shouldFetchOnMount","executeFetch","updateTimers","onUnsubscribe","destroy","shouldFetchOnReconnect","shouldFetchOn","refetchOnReconnect","shouldFetchOnWindowFocus","refetchOnWindowFocus","clearStaleTimeout","clearRefetchInterval","removeObserver","notifyOptions","prevOptions","prevQuery","defaultQueryOptions","shallowEqualObjects","getQueryCache","notify","type","query","observer","enabled","Error","queryKey","updateQuery","mounted","hasListeners","shouldFetchOptionally","updateResult","staleTime","updateStaleTimeout","nextRefetchInterval","computeRefetchInterval","currentRefetchInterval","updateRefetchInterval","getOptimisticResult","build","createResult","getCurrentResult","currentResult","trackResult","result","trackedResult","keys","forEach","key","defineProperty","configurable","enumerable","get","add","getCurrentQuery","refetchPage","fetch","meta","fetchOptimistic","defaultedOptions","isFetchingOptimistic","then","fetchOptions","cancelRefetch","promise","throwOnError","catch","noop","isServer","isStale","isValidTimeout","timeout","timeUntilStale","dataUpdatedAt","staleTimeoutId","setTimeout","refetchInterval","data","nextInterval","refetchIntervalId","setInterval","refetchIntervalInBackground","focusManager","clearTimeout","undefined","clearInterval","prevResult","prevResultState","currentResultState","prevResultOptions","currentResultOptions","queryChange","queryInitialState","state","currentQueryInitialState","prevQueryResult","previousQueryResult","error","errorUpdatedAt","fetchStatus","status","isPreviousData","isPlaceholderData","_optimisticResults","fetchOnMount","fetchOptionally","canFetch","networkMode","keepPreviousData","isSuccess","select","selectFn","selectResult","replaceData","process","placeholderData","Date","now","isFetching","isLoading","isError","isInitialLoading","failureCount","fetchFailureCount","failureReason","fetchFailureReason","errorUpdateCount","isFetched","dataUpdateCount","isFetchedAfterMount","isRefetching","isLoadingError","isPaused","isRefetchError","nextResult","defaultNotifyOptions","cache","notifyOnChangeProps","size","includedProps","useErrorBoundary","some","typedKey","has","shouldNotifyListeners","onQueryUpdate","action","onSuccess","manual","isCancelledError","onError","notifyManager","onSettled","listener","Subscribable","retryOnMount","shouldLoadOnMount","refetchOnMount","field","suspense","isStaleByTime","uSES","createValue","isReset","clearReset","reset","QueryErrorResetBoundaryContext","React","IsRestoringContext","Provider","getHasError","_useErrorBoundary","params","errorResetBoundary","useBaseQuery","Observer","queryClient","useQueryClient","context","isRestoring","ensureStaleTime","ensurePreventErrorBoundaryRetry","useClearResetErrorBoundary","onStoreChange","subscribe","willFetch","shouldSuspend","useQuery","arg1","arg2","arg3","parseQueryArgs","flexRender","Comp","props","component","proto","getPrototypeOf","prototype","isReactComponent","isClassComponent","$$typeof","includes","description","isExoticComponent","useReactTable","resolvedOptions","onStateChange","renderFallbackValue","current","createTable","tableRef","initialState","setState","prev","updater","functionalUpdate","input","makeStateUpdater","instance","old","isFunction","Function","flattenBy","arr","getChildren","flat","subArr","recurse","item","push","children","memo","getDeps","fn","opts","deps","depTime","debug","resultTime","newDeps","dep","index","onChange","depEndTime","Math","round","resultEndTime","resultFpsPercentage","pad","str","num","String","console","info","max","min","createHeader","table","column","header","id","isPlaceholder","placeholderId","depth","subHeaders","colSpan","rowSpan","headerGroup","getLeafHeaders","leafHeaders","h","recurseHeader","map","getContext","_features","feature","assign","Headers","getHeaderGroups","getAllColumns","getVisibleLeafColumns","getState","columnPinning","left","right","allColumns","leafColumns","leftColumns","columnId","find","filter","Boolean","rightColumns","centerColumns","buildHeaderGroups","debugAll","debugHeaders","getCenterHeaderGroups","getLeftHeaderGroups","getRightHeaderGroups","getFooterGroups","headerGroups","reverse","getLeftFooterGroups","getCenterFooterGroups","getRightFooterGroups","getFlatHeaders","headers","getLeftFlatHeaders","getCenterFlatHeaders","getRightFlatHeaders","getCenterLeafHeaders","flatHeaders","_header$subHeaders","getLeftLeafHeaders","_header$subHeaders2","getRightLeafHeaders","_header$subHeaders3","center","_left$","_right$","columnsToGroup","headerFamily","maxDepth","findMaxDepth","columns","getIsVisible","createHeaderGroup","headersToGroup","join","pendingParentHeaders","headerToGroup","latestPendingParentHeader","parent","recurseHeadersForSpans","childRowSpans","childColSpan","_ref","childRowSpan","_headerGroups$","defaultColumnSizing","minSize","maxSize","Number","MAX_SAFE_INTEGER","ColumnSizing","getDefaultColumnDef","getInitialState","columnSizing","columnSizingInfo","startOffset","startSize","deltaOffset","deltaPercentage","isResizingColumn","columnSizingStart","getDefaultOptions","columnResizeMode","onColumnSizingChange","onColumnSizingInfoChange","createColumn","getSize","columnSize","columnDef","getStart","position","getLeftVisibleLeafColumns","getRightVisibleLeafColumns","findIndex","prevSiblingColumn","resetSize","setColumnSizing","_ref2","rest","getCanResize","enableResizing","enableColumnResizing","getIsResizing","sum","prevSiblingHeader","getResizeHandler","getColumn","canResize","persist","isTouchStartEvent","touches","clientX","newColumnSizing","updateOffset","eventType","clientXPos","setColumnSizingInfo","_ref3","headerSize","onMove","onEnd","mouseEvents","moveHandler","upHandler","removeEventListener","touchEvents","cancelable","preventDefault","stopPropagation","_e$touches$","passiveIfSupported","passiveSupported","supported","passive","addEventListener","err","passiveEventSupported","resetColumnSizing","defaultState","resetHeaderSizeInfo","getDefaultColumnSizingInfoState","getTotalSize","_table$getHeaderGroup2","reduce","getLeftTotalSize","_table$getLeftHeaderG2","getCenterTotalSize","_table$getCenterHeade2","getRightTotalSize","_table$getRightHeader2","Expanding","expanded","onExpandedChange","paginateExpandedRows","registered","queued","_autoResetExpanded","autoResetAll","autoResetExpanded","manualExpanding","_queue","resetExpanded","setExpanded","toggleAllRowsExpanded","getIsAllRowsExpanded","getCanSomeRowsExpand","getRowModel","flatRows","row","getCanExpand","getToggleAllRowsExpandedHandler","getIsSomeRowsExpanded","values","getIsExpanded","getExpandedDepth","rowsById","splitId","split","getPreExpandedRowModel","getSortedRowModel","getExpandedRowModel","_getExpandedRowModel","createRow","toggleExpanded","exists","oldExpanded","rowId","getIsRowExpanded","getRowCanExpand","enableExpanding","subRows","_row$subRows","getToggleExpandedHandler","canExpand","includesString","filterValue","search","toLowerCase","getValue","autoRemove","val","testFalsey","includesStringSensitive","_row$getValue2","equalsString","arrIncludes","_row$getValue4","arrIncludesAll","_row$getValue5","arrIncludesSome","_row$getValue6","equals","weakEquals","inNumberRange","rowValue","resolveFilterValue","unsafeMin","unsafeMax","parsedMin","parseFloat","parsedMax","isNaN","Infinity","temp","filterFns","shouldAutoRemoveFilter","filterFn","aggregationFns","_leafRows","childRows","next","nextValue","extent","mean","leafRows","count","median","unique","Array","from","uniqueCount","_columnId","RowSelection","rowSelection","onRowSelectionChange","enableRowSelection","enableMultiRowSelection","enableSubRowSelection","setRowSelection","resetRowSelection","toggleAllRowsSelected","getIsAllRowsSelected","preGroupedFlatRows","getPreGroupedRowModel","getCanSelect","toggleAllPageRowsSelected","resolvedValue","getIsAllPageRowsSelected","rows","mutateRowIsSelected","getPreSelectedRowModel","getCoreRowModel","getSelectedRowModel","rowModel","selectRowsFn","debugTable","getFilteredSelectedRowModel","getFilteredRowModel","getGroupedSelectedRowModel","isAllRowsSelected","paginationFlatRows","getPaginationRowModel","isAllPageRowsSelected","getIsSomeRowsSelected","totalSelected","getIsSomePageRowsSelected","getIsSelected","getIsSomeSelected","getToggleAllRowsSelectedHandler","target","checked","getToggleAllPageRowsSelectedHandler","toggleSelected","isSelected","selectedRowIds","isRowSelected","isSubRowSelected","getIsAllSubRowsSelected","getCanSelectSubRows","getCanMultiSelect","getToggleSelectedHandler","canSelect","_target","getRow","newSelectedFlatRows","newSelectedRowsById","recurseRows","selection","allChildrenSelected","someSelected","subRow","reSplitAlphaNumeric","compareBasic","toString","compareAlphanumeric","aStr","bStr","aa","shift","bb","an","parseInt","bn","combo","sort","sortingFns","alphanumeric","rowA","rowB","alphanumericCaseSensitive","text","textCaseSensitive","datetime","basic","features","columnVisibility","onColumnVisibilityChange","toggleVisibility","getCanHide","setColumnVisibility","enableHiding","getToggleVisibilityHandler","_getAllVisibleCells","getAllCells","cells","cell","debugRows","getVisibleCells","getLeftVisibleCells","getCenterVisibleCells","getRightVisibleCells","makeVisibleColumnsMethod","getColumns","debugColumns","getVisibleFlatColumns","getAllFlatColumns","getAllLeafColumns","getLeftLeafColumns","getRightLeafColumns","getCenterVisibleLeafColumns","getCenterLeafColumns","resetColumnVisibility","toggleAllColumnsVisible","getIsAllColumnsVisible","obj","getIsSomeColumnsVisible","getToggleAllColumnsVisibilityHandler","columnOrder","onColumnOrderChange","setColumnOrder","resetColumnOrder","_getOrderColumnsFn","grouping","groupedColumnMode","orderedColumns","columnOrderCopy","columnsCopy","targetColumnId","foundIndex","splice","nonGroupingColumns","col","groupingColumns","orderColumns","onColumnPinningChange","pin","columnIds","getLeafColumns","setColumnPinning","getCanPin","enablePinning","getIsPinned","leafColumnIds","isLeft","isRight","getPinnedIndex","_table$getState$colum3","indexOf","allCells","leftAndRight","resetColumnPinning","getDefaultPinningState","getIsSomeColumnsPinned","pinningState","_pinningState$positio","columnFilters","globalFilter","onColumnFiltersChange","onGlobalFilterChange","filterFromLeafRows","maxLeafRowFilterDepth","globalFilterFn","getColumnCanGlobalFilter","_table$getCoreRowMode","_getAllCellsByColumnId","_table$getCoreRowMode2","getAutoFilterFn","firstRow","isArray","getFilterFn","getCanFilter","enableColumnFilter","enableColumnFilters","enableFilters","accessorFn","getCanGlobalFilter","enableGlobalFilter","getIsFiltered","getFilterIndex","getFilterValue","_table$getState$colum","_table$getState$colum4","setFilterValue","setColumnFilters","previousfilter","newFilter","newFilterObj","_getFacetedRowModel","getFacetedRowModel","getPreFilteredRowModel","_getFacetedUniqueValues","getFacetedUniqueValues","Map","_getFacetedMinMaxValues","getFacetedMinMaxValues","columnFiltersMeta","getGlobalAutoFilterFn","getGlobalFilterFn","_table$options$filter4","_functionalUpdate","setGlobalFilter","resetGlobalFilter","resetColumnFilters","_getFilteredRowModel","manualFiltering","_getGlobalFacetedRowModel","getGlobalFacetedRowModel","_getGlobalFacetedUniqueValues","getGlobalFacetedUniqueValues","_getGlobalFacetedMinMaxValues","getGlobalFacetedMinMaxValues","sorting","sortingFn","onSortingChange","isMultiSortEvent","shiftKey","getAutoSortingFn","firstRows","slice","isString","call","getAutoSortDir","getSortingFn","toggleSorting","desc","multi","nextSortingOrder","getNextSortingOrder","hasManualValue","setSorting","sortAction","existingSorting","existingIndex","newSorting","nextDesc","getCanMultiSort","maxMultiSortColCount","getFirstSortDir","sortDescFirst","firstSortDirection","isSorted","getIsSorted","enableSortingRemoval","enableMultiRemove","getCanSort","enableSorting","enableMultiSort","columnSort","getSortIndex","_table$getState$sorti3","clearSorting","getToggleSortingHandler","canSort","resetSorting","getPreSortedRowModel","getGroupedRowModel","_getSortedRowModel","manualSorting","aggregatedCell","_props$getValue","aggregationFn","onGroupingChange","toggleGrouping","setGrouping","getCanGroup","enableGrouping","getIsGrouped","getGroupedIndex","getToggleGroupingHandler","canGroup","getAutoAggregationFn","getAggregationFn","resetGrouping","_getGroupedRowModel","manualGrouping","groupingColumnId","_groupingValuesCache","createCell","getIsPlaceholder","getIsAggregated","pagination","pageIndex","pageSize","onPaginationChange","_autoResetPageIndex","autoResetPageIndex","manualPagination","resetPageIndex","setPagination","resetPagination","getDefaultPaginationState","setPageIndex","maxPageIndex","pageCount","_table$initialState","_table$initialState$p3","resetPageSize","setPageSize","_table$initialState2","_table$initialState2$","topRowIndex","floor","setPageCount","newPageCount","getPageOptions","getPageCount","pageOptions","fill","_","i","getCanPreviousPage","getCanNextPage","previousPage","nextPage","getPrePaginationRowModel","_getPaginationRowModel","ceil","defaultOptions","queuedTimeout","coreInstance","cb","Promise","resolve","newOptions","mergeOptions","_getRowId","getRowId","_getCoreRowModel","_getDefaultColumnDef","defaultColumn","resolvedColumnDef","accessorKey","renderValue","_props$renderValue","_getColumnDefs","columnDefs","recurseColumns","replace","originalRow","getFlatColumns","flatMap","groupingColumnDef","_getAllFlatColumnsById","flatColumns","acc","original","rowIndex","_valuesCache","_uniqueValuesCache","hasOwnProperty","getUniqueValues","getLeafRows","accessRows","originalRows","getSubRows","originalSubRows","sortingState","sortedFlatRows","availableSorting","_table$getColumn","columnInfoById","sortEntry","sortUndefined","invertSorting","sortData","sortedData","columnInfo","isDesc","aUndefined","bUndefined","sortInt","expandRows","expandedRows","handleRow","paginatedRowModel","pageStart","pageEnd"],"sourceRoot":""}