{"version":3,"file":"static/js/699.ffc86acd.chunk.js","mappings":"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","sources":["../node_modules/.pnpm/@tanstack+react-table@8.7.9_biqbaboplfbrettd7655fr4n2y/node_modules/@tanstack/react-table/src/index.tsx","../node_modules/.pnpm/@tanstack+table-core@8.7.9/node_modules/@tanstack/table-core/src/utils.ts","../node_modules/.pnpm/@tanstack+table-core@8.7.9/node_modules/@tanstack/table-core/src/core/headers.ts","../node_modules/.pnpm/@tanstack+table-core@8.7.9/node_modules/@tanstack/table-core/src/features/ColumnSizing.ts","../node_modules/.pnpm/@tanstack+table-core@8.7.9/node_modules/@tanstack/table-core/src/features/Expanding.ts","../node_modules/.pnpm/@tanstack+table-core@8.7.9/node_modules/@tanstack/table-core/src/filterFns.ts","../node_modules/.pnpm/@tanstack+table-core@8.7.9/node_modules/@tanstack/table-core/src/features/Filters.ts","../node_modules/.pnpm/@tanstack+table-core@8.7.9/node_modules/@tanstack/table-core/src/aggregationFns.ts","../node_modules/.pnpm/@tanstack+table-core@8.7.9/node_modules/@tanstack/table-core/src/features/Ordering.ts","../node_modules/.pnpm/@tanstack+table-core@8.7.9/node_modules/@tanstack/table-core/src/features/RowSelection.ts","../node_modules/.pnpm/@tanstack+table-core@8.7.9/node_modules/@tanstack/table-core/src/sortingFns.ts","../node_modules/.pnpm/@tanstack+table-core@8.7.9/node_modules/@tanstack/table-core/src/core/table.ts","../node_modules/.pnpm/@tanstack+table-core@8.7.9/node_modules/@tanstack/table-core/src/features/Visibility.ts","../node_modules/.pnpm/@tanstack+table-core@8.7.9/node_modules/@tanstack/table-core/src/features/Grouping.ts","../node_modules/.pnpm/@tanstack+table-core@8.7.9/node_modules/@tanstack/table-core/src/features/Pinning.ts","../node_modules/.pnpm/@tanstack+table-core@8.7.9/node_modules/@tanstack/table-core/src/features/Sorting.ts","../node_modules/.pnpm/@tanstack+table-core@8.7.9/node_modules/@tanstack/table-core/src/features/Pagination.ts","../node_modules/.pnpm/@tanstack+table-core@8.7.9/node_modules/@tanstack/table-core/src/core/column.ts","../node_modules/.pnpm/@tanstack+table-core@8.7.9/node_modules/@tanstack/table-core/src/core/row.ts","../node_modules/.pnpm/@tanstack+table-core@8.7.9/node_modules/@tanstack/table-core/src/core/cell.ts","../node_modules/.pnpm/@tanstack+table-core@8.7.9/node_modules/@tanstack/table-core/src/utils/getCoreRowModel.ts","../node_modules/.pnpm/@tanstack+table-core@8.7.9/node_modules/@tanstack/table-core/src/utils/getSortedRowModel.ts","../node_modules/.pnpm/@tanstack+table-core@8.7.9/node_modules/@tanstack/table-core/src/utils/getExpandedRowModel.ts","../node_modules/.pnpm/@tanstack+table-core@8.7.9/node_modules/@tanstack/table-core/src/utils/getPaginationRowModel.ts"],"sourcesContent":["import * as React from 'react'\nexport * from '@tanstack/table-core'\n\nimport {\n  TableOptions,\n  TableOptionsResolved,\n  RowData,\n  createTable,\n} from '@tanstack/table-core'\n\nexport type Renderable<TProps> = React.ReactNode | React.ComponentType<TProps>\n\n//\n\nexport function flexRender<TProps extends object>(\n  Comp: Renderable<TProps>,\n  props: TProps\n): React.ReactNode | JSX.Element {\n  return !Comp ? null : isReactComponent<TProps>(Comp) ? (\n    <Comp {...props} />\n  ) : (\n    Comp\n  )\n}\n\nfunction isReactComponent<TProps>(\n  component: unknown\n): component is React.ComponentType<TProps> {\n  return (\n    isClassComponent(component) ||\n    typeof component === 'function' ||\n    isExoticComponent(component)\n  )\n}\n\nfunction isClassComponent(component: any) {\n  return (\n    typeof component === 'function' &&\n    (() => {\n      const proto = Object.getPrototypeOf(component)\n      return proto.prototype && proto.prototype.isReactComponent\n    })()\n  )\n}\n\nfunction isExoticComponent(component: any) {\n  return (\n    typeof component === 'object' &&\n    typeof component.$$typeof === 'symbol' &&\n    ['react.memo', 'react.forward_ref'].includes(component.$$typeof.description)\n  )\n}\n\nexport function useReactTable<TData extends RowData>(\n  options: TableOptions<TData>\n) {\n  // Compose in the generic options to the user options\n  const resolvedOptions: TableOptionsResolved<TData> = {\n    state: {}, // Dummy state\n    onStateChange: () => {}, // noop\n    renderFallbackValue: null,\n    ...options,\n  }\n\n  // Create a new table and store it in state\n  const [tableRef] = React.useState(() => ({\n    current: createTable<TData>(resolvedOptions),\n  }))\n\n  // By default, manage table state here using the table's initial state\n  const [state, setState] = React.useState(() => tableRef.current.initialState)\n\n  // Compose the default state above with any user state. This will allow the user\n  // to only control a subset of the state if desired.\n  tableRef.current.setOptions(prev => ({\n    ...prev,\n    ...options,\n    state: {\n      ...state,\n      ...options.state,\n    },\n    // Similarly, we'll maintain both our internal state and any user-provided\n    // state.\n    onStateChange: updater => {\n      setState(updater)\n      options.onStateChange?.(updater)\n    },\n  }))\n\n  return tableRef.current\n}\n","import { TableState, Updater } from './types'\n\nexport type PartialKeys<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>\nexport type RequiredKeys<T, K extends keyof T> = Omit<T, K> &\n  Required<Pick<T, K>>\nexport type Overwrite<T, U extends { [TKey in keyof T]?: any }> = Omit<\n  T,\n  keyof U\n> &\n  U\n\nexport type UnionToIntersection<T> = (\n  T extends any ? (x: T) => any : never\n) extends (x: infer R) => any\n  ? R\n  : never\n\nexport type IsAny<T, Y, N> = 1 extends 0 & T ? Y : N\nexport type IsKnown<T, Y, N> = unknown extends T ? N : Y\n\ntype ComputeRange<\n  N extends number,\n  Result extends Array<unknown> = []\n> = Result['length'] extends N\n  ? Result\n  : ComputeRange<N, [...Result, Result['length']]>\ntype Index40 = ComputeRange<40>[number]\n\n// Is this type a tuple?\ntype IsTuple<T> = T extends readonly any[] & { length: infer Length }\n  ? Length extends Index40\n    ? T\n    : never\n  : never\n\n// If this type is a tuple, what indices are allowed?\ntype AllowedIndexes<\n  Tuple extends ReadonlyArray<any>,\n  Keys extends number = never\n> = Tuple extends readonly []\n  ? Keys\n  : Tuple extends readonly [infer _, ...infer Tail]\n  ? AllowedIndexes<Tail, Keys | Tail['length']>\n  : Keys\n\nexport type DeepKeys<T> = unknown extends T\n  ? keyof T\n  : object extends T\n  ? string\n  : T extends readonly any[] & IsTuple<T>\n  ? AllowedIndexes<T> | DeepKeysPrefix<T, AllowedIndexes<T>>\n  : T extends any[]\n  ? never & 'Dynamic length array indexing is not supported'\n  : T extends Date\n  ? never\n  : T extends object\n  ? (keyof T & string) | DeepKeysPrefix<T, keyof T>\n  : never\n\ntype DeepKeysPrefix<T, TPrefix> = TPrefix extends keyof T & (number | string)\n  ? `${TPrefix}.${DeepKeys<T[TPrefix]> & string}`\n  : never\n\nexport type DeepValue<T, TProp> = T extends Record<string | number, any>\n  ? TProp extends `${infer TBranch}.${infer TDeepProp}`\n    ? DeepValue<T[TBranch], TDeepProp>\n    : T[TProp & string]\n  : never\n\nexport type NoInfer<T> = [T][T extends any ? 0 : never]\n\nexport type Getter<TValue> = <TTValue = TValue>() => NoInfer<TTValue>\n\n///\n\nexport function functionalUpdate<T>(updater: Updater<T>, input: T): T {\n  return typeof updater === 'function'\n    ? (updater as (input: T) => T)(input)\n    : updater\n}\n\nexport function noop() {\n  //\n}\n\nexport function makeStateUpdater<K extends keyof TableState>(\n  key: K,\n  instance: unknown\n) {\n  return (updater: Updater<TableState[K]>) => {\n    ;(instance as any).setState(<TTableState>(old: TTableState) => {\n      return {\n        ...old,\n        [key]: functionalUpdate(updater, (old as any)[key]),\n      }\n    })\n  }\n}\n\ntype AnyFunction = (...args: any) => any\n\nexport function isFunction<T extends AnyFunction>(d: any): d is T {\n  return d instanceof Function\n}\n\nexport function flattenBy<TNode>(\n  arr: TNode[],\n  getChildren: (item: TNode) => TNode[]\n) {\n  const flat: TNode[] = []\n\n  const recurse = (subArr: TNode[]) => {\n    subArr.forEach(item => {\n      flat.push(item)\n      const children = getChildren(item)\n      if (children?.length) {\n        recurse(children)\n      }\n    })\n  }\n\n  recurse(arr)\n\n  return flat\n}\n\nexport function memo<TDeps extends readonly any[], TResult>(\n  getDeps: () => [...TDeps],\n  fn: (...args: NoInfer<[...TDeps]>) => TResult,\n  opts: {\n    key: any\n    debug?: () => any\n    onChange?: (result: TResult) => void\n  }\n): () => TResult {\n  let deps: any[] = []\n  let result: TResult | undefined\n\n  return () => {\n    let depTime: number\n    if (opts.key && opts.debug) depTime = Date.now()\n\n    const newDeps = getDeps()\n\n    const depsChanged =\n      newDeps.length !== deps.length ||\n      newDeps.some((dep: any, index: number) => deps[index] !== dep)\n\n    if (!depsChanged) {\n      return result!\n    }\n\n    deps = newDeps\n\n    let resultTime: number\n    if (opts.key && opts.debug) resultTime = Date.now()\n\n    result = fn(...newDeps)\n    opts?.onChange?.(result)\n\n    if (opts.key && opts.debug) {\n      if (opts?.debug()) {\n        const depEndTime = Math.round((Date.now() - depTime!) * 100) / 100\n        const resultEndTime = Math.round((Date.now() - resultTime!) * 100) / 100\n        const resultFpsPercentage = resultEndTime / 16\n\n        const pad = (str: number | string, num: number) => {\n          str = String(str)\n          while (str.length < num) {\n            str = ' ' + str\n          }\n          return str\n        }\n\n        console.info(\n          `%c⏱ ${pad(resultEndTime, 5)} /${pad(depEndTime, 5)} ms`,\n          `\n            font-size: .6rem;\n            font-weight: bold;\n            color: hsl(${Math.max(\n              0,\n              Math.min(120 - 120 * resultFpsPercentage, 120)\n            )}deg 100% 31%);`,\n          opts?.key\n        )\n      }\n    }\n\n    return result!\n  }\n}\n","import { RowData, Column, Header, HeaderGroup, Table } from '../types'\nimport { memo } from '../utils'\nimport { TableFeature } from './table'\n\nexport interface CoreHeaderGroup<TData extends RowData> {\n  id: string\n  depth: number\n  headers: Header<TData, unknown>[]\n}\n\nexport interface HeaderContext<TData, TValue> {\n  table: Table<TData>\n  header: Header<TData, TValue>\n  column: Column<TData, TValue>\n}\n\nexport interface CoreHeader<TData extends RowData, TValue> {\n  id: string\n  index: number\n  depth: number\n  column: Column<TData, TValue>\n  headerGroup: HeaderGroup<TData>\n  subHeaders: Header<TData, TValue>[]\n  colSpan: number\n  rowSpan: number\n  getLeafHeaders: () => Header<TData, unknown>[]\n  isPlaceholder: boolean\n  placeholderId?: string\n  getContext: () => HeaderContext<TData, TValue>\n}\n\nexport interface HeadersInstance<TData extends RowData> {\n  getHeaderGroups: () => HeaderGroup<TData>[]\n  getLeftHeaderGroups: () => HeaderGroup<TData>[]\n  getCenterHeaderGroups: () => HeaderGroup<TData>[]\n  getRightHeaderGroups: () => HeaderGroup<TData>[]\n\n  getFooterGroups: () => HeaderGroup<TData>[]\n  getLeftFooterGroups: () => HeaderGroup<TData>[]\n  getCenterFooterGroups: () => HeaderGroup<TData>[]\n  getRightFooterGroups: () => HeaderGroup<TData>[]\n\n  getFlatHeaders: () => Header<TData, unknown>[]\n  getLeftFlatHeaders: () => Header<TData, unknown>[]\n  getCenterFlatHeaders: () => Header<TData, unknown>[]\n  getRightFlatHeaders: () => Header<TData, unknown>[]\n\n  getLeafHeaders: () => Header<TData, unknown>[]\n  getLeftLeafHeaders: () => Header<TData, unknown>[]\n  getCenterLeafHeaders: () => Header<TData, unknown>[]\n  getRightLeafHeaders: () => Header<TData, unknown>[]\n}\n\n//\n\nfunction createHeader<TData extends RowData, TValue>(\n  table: Table<TData>,\n  column: Column<TData, TValue>,\n  options: {\n    id?: string\n    isPlaceholder?: boolean\n    placeholderId?: string\n    index: number\n    depth: number\n  }\n): Header<TData, TValue> {\n  const id = options.id ?? column.id\n\n  let header: CoreHeader<TData, TValue> = {\n    id,\n    column,\n    index: options.index,\n    isPlaceholder: !!options.isPlaceholder,\n    placeholderId: options.placeholderId,\n    depth: options.depth,\n    subHeaders: [],\n    colSpan: 0,\n    rowSpan: 0,\n    headerGroup: null!,\n    getLeafHeaders: (): Header<TData, unknown>[] => {\n      const leafHeaders: Header<TData, unknown>[] = []\n\n      const recurseHeader = (h: CoreHeader<TData, any>) => {\n        if (h.subHeaders && h.subHeaders.length) {\n          h.subHeaders.map(recurseHeader)\n        }\n        leafHeaders.push(h as Header<TData, unknown>)\n      }\n\n      recurseHeader(header)\n\n      return leafHeaders\n    },\n    getContext: () => ({\n      table,\n      header: header as Header<TData, TValue>,\n      column,\n    }),\n  }\n\n  table._features.forEach(feature => {\n    Object.assign(header, feature.createHeader?.(header, table))\n  })\n\n  return header as Header<TData, TValue>\n}\n\nexport const Headers: TableFeature = {\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): HeadersInstance<TData> => {\n    return {\n      // Header Groups\n\n      getHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, left, right) => {\n          const leftColumns =\n            left\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          const rightColumns =\n            right\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          const centerColumns = leafColumns.filter(\n            column => !left?.includes(column.id) && !right?.includes(column.id)\n          )\n\n          const headerGroups = buildHeaderGroups(\n            allColumns,\n            [...leftColumns, ...centerColumns, ...rightColumns],\n            table\n          )\n\n          return headerGroups\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getCenterHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, left, right) => {\n          leafColumns = leafColumns.filter(\n            column => !left?.includes(column.id) && !right?.includes(column.id)\n          )\n          return buildHeaderGroups(allColumns, leafColumns, table, 'center')\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'development' && 'getCenterHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.left,\n        ],\n        (allColumns, leafColumns, left) => {\n          const orderedLeafColumns =\n            left\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          return buildHeaderGroups(\n            allColumns,\n            orderedLeafColumns,\n            table,\n            'left'\n          )\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightHeaderGroups: memo(\n        () => [\n          table.getAllColumns(),\n          table.getVisibleLeafColumns(),\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, right) => {\n          const orderedLeafColumns =\n            right\n              ?.map(columnId => leafColumns.find(d => d.id === columnId)!)\n              .filter(Boolean) ?? []\n\n          return buildHeaderGroups(\n            allColumns,\n            orderedLeafColumns,\n            table,\n            'right'\n          )\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightHeaderGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      // Footer Groups\n\n      getFooterGroups: memo(\n        () => [table.getHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftFooterGroups: memo(\n        () => [table.getLeftHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getCenterFooterGroups: memo(\n        () => [table.getCenterHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'development' && 'getCenterFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightFooterGroups: memo(\n        () => [table.getRightHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightFooterGroups',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      // Flat Headers\n\n      getFlatHeaders: memo(\n        () => [table.getHeaderGroups()],\n        headerGroups => {\n          return headerGroups\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftFlatHeaders: memo(\n        () => [table.getLeftHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getCenterFlatHeaders: memo(\n        () => [table.getCenterHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightFlatHeaders: memo(\n        () => [table.getRightHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightFlatHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      // Leaf Headers\n\n      getCenterLeafHeaders: memo(\n        () => [table.getCenterFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeftLeafHeaders: memo(\n        () => [table.getLeftFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getRightLeafHeaders: memo(\n        () => [table.getRightFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n\n      getLeafHeaders: memo(\n        () => [\n          table.getLeftHeaderGroups(),\n          table.getCenterHeaderGroups(),\n          table.getRightHeaderGroups(),\n        ],\n        (left, center, right) => {\n          return [\n            ...(left[0]?.headers ?? []),\n            ...(center[0]?.headers ?? []),\n            ...(right[0]?.headers ?? []),\n          ]\n            .map(header => {\n              return header.getLeafHeaders()\n            })\n            .flat()\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeafHeaders',\n          debug: () => table.options.debugAll ?? table.options.debugHeaders,\n        }\n      ),\n    }\n  },\n}\n\nexport function buildHeaderGroups<TData extends RowData>(\n  allColumns: Column<TData, unknown>[],\n  columnsToGroup: Column<TData, unknown>[],\n  table: Table<TData>,\n  headerFamily?: 'center' | 'left' | 'right'\n) {\n  // Find the max depth of the columns:\n  // build the leaf column row\n  // build each buffer row going up\n  //    placeholder for non-existent level\n  //    real column for existing level\n\n  let maxDepth = 0\n\n  const findMaxDepth = (columns: Column<TData, unknown>[], depth = 1) => {\n    maxDepth = Math.max(maxDepth, depth)\n\n    columns\n      .filter(column => column.getIsVisible())\n      .forEach(column => {\n        if (column.columns?.length) {\n          findMaxDepth(column.columns, depth + 1)\n        }\n      }, 0)\n  }\n\n  findMaxDepth(allColumns)\n\n  let headerGroups: HeaderGroup<TData>[] = []\n\n  const createHeaderGroup = (\n    headersToGroup: Header<TData, unknown>[],\n    depth: number\n  ) => {\n    // The header group we are creating\n    const headerGroup: HeaderGroup<TData> = {\n      depth,\n      id: [headerFamily, `${depth}`].filter(Boolean).join('_'),\n      headers: [],\n    }\n\n    // The parent columns we're going to scan next\n    const pendingParentHeaders: Header<TData, unknown>[] = []\n\n    // Scan each column for parents\n    headersToGroup.forEach(headerToGroup => {\n      // What is the latest (last) parent column?\n\n      const latestPendingParentHeader = [...pendingParentHeaders].reverse()[0]\n\n      const isLeafHeader = headerToGroup.column.depth === headerGroup.depth\n\n      let column: Column<TData, unknown>\n      let isPlaceholder = false\n\n      if (isLeafHeader && headerToGroup.column.parent) {\n        // The parent header is new\n        column = headerToGroup.column.parent\n      } else {\n        // The parent header is repeated\n        column = headerToGroup.column\n        isPlaceholder = true\n      }\n\n      if (\n        latestPendingParentHeader &&\n        latestPendingParentHeader?.column === column\n      ) {\n        // This column is repeated. Add it as a sub header to the next batch\n        latestPendingParentHeader.subHeaders.push(headerToGroup)\n      } else {\n        // This is a new header. Let's create it\n        const header = createHeader(table, column, {\n          id: [headerFamily, depth, column.id, headerToGroup?.id]\n            .filter(Boolean)\n            .join('_'),\n          isPlaceholder,\n          placeholderId: isPlaceholder\n            ? `${pendingParentHeaders.filter(d => d.column === column).length}`\n            : undefined,\n          depth,\n          index: pendingParentHeaders.length,\n        })\n\n        // Add the headerToGroup as a subHeader of the new header\n        header.subHeaders.push(headerToGroup)\n        // Add the new header to the pendingParentHeaders to get grouped\n        // in the next batch\n        pendingParentHeaders.push(header)\n      }\n\n      headerGroup.headers.push(headerToGroup)\n      headerToGroup.headerGroup = headerGroup\n    })\n\n    headerGroups.push(headerGroup)\n\n    if (depth > 0) {\n      createHeaderGroup(pendingParentHeaders, depth - 1)\n    }\n  }\n\n  const bottomHeaders = columnsToGroup.map((column, index) =>\n    createHeader(table, column, {\n      depth: maxDepth,\n      index,\n    })\n  )\n\n  createHeaderGroup(bottomHeaders, maxDepth - 1)\n\n  headerGroups.reverse()\n\n  // headerGroups = headerGroups.filter(headerGroup => {\n  //   return !headerGroup.headers.every(header => header.isPlaceholder)\n  // })\n\n  const recurseHeadersForSpans = (\n    headers: Header<TData, unknown>[]\n  ): { colSpan: number; rowSpan: number }[] => {\n    const filteredHeaders = headers.filter(header =>\n      header.column.getIsVisible()\n    )\n\n    return filteredHeaders.map(header => {\n      let colSpan = 0\n      let rowSpan = 0\n      let childRowSpans = [0]\n\n      if (header.subHeaders && header.subHeaders.length) {\n        childRowSpans = []\n\n        recurseHeadersForSpans(header.subHeaders).forEach(\n          ({ colSpan: childColSpan, rowSpan: childRowSpan }) => {\n            colSpan += childColSpan\n            childRowSpans.push(childRowSpan)\n          }\n        )\n      } else {\n        colSpan = 1\n      }\n\n      const minChildRowSpan = Math.min(...childRowSpans)\n      rowSpan = rowSpan + minChildRowSpan\n\n      header.colSpan = colSpan\n      header.rowSpan = rowSpan\n\n      return { colSpan, rowSpan }\n    })\n  }\n\n  recurseHeadersForSpans(headerGroups[0]?.headers ?? [])\n\n  return headerGroups\n}\n","import { TableFeature } from '../core/table'\nimport { RowData, Column, Header, OnChangeFn, Table, Updater } from '../types'\nimport { makeStateUpdater } from '../utils'\nimport { ColumnPinningPosition } from './Pinning'\n\n//\n\nexport interface ColumnSizingTableState {\n  columnSizing: ColumnSizingState\n  columnSizingInfo: ColumnSizingInfoState\n}\n\nexport type ColumnSizingState = Record<string, number>\n\nexport interface ColumnSizingInfoState {\n  startOffset: null | number\n  startSize: null | number\n  deltaOffset: null | number\n  deltaPercentage: null | number\n  isResizingColumn: false | string\n  columnSizingStart: [string, number][]\n}\n\nexport type ColumnResizeMode = 'onChange' | 'onEnd'\n\nexport interface ColumnSizingOptions {\n  enableColumnResizing?: boolean\n  columnResizeMode?: ColumnResizeMode\n  onColumnSizingChange?: OnChangeFn<ColumnSizingState>\n  onColumnSizingInfoChange?: OnChangeFn<ColumnSizingInfoState>\n}\n\nexport interface ColumnSizingDefaultOptions {\n  columnResizeMode: ColumnResizeMode\n  onColumnSizingChange: OnChangeFn<ColumnSizingState>\n  onColumnSizingInfoChange: OnChangeFn<ColumnSizingInfoState>\n}\n\nexport interface ColumnSizingInstance {\n  setColumnSizing: (updater: Updater<ColumnSizingState>) => void\n  setColumnSizingInfo: (updater: Updater<ColumnSizingInfoState>) => void\n  resetColumnSizing: (defaultState?: boolean) => void\n  resetHeaderSizeInfo: (defaultState?: boolean) => void\n  getTotalSize: () => number\n  getLeftTotalSize: () => number\n  getCenterTotalSize: () => number\n  getRightTotalSize: () => number\n}\n\nexport interface ColumnSizingColumnDef {\n  enableResizing?: boolean\n  size?: number\n  minSize?: number\n  maxSize?: number\n}\n\nexport interface ColumnSizingColumn {\n  getSize: () => number\n  getStart: (position?: ColumnPinningPosition) => number\n  getCanResize: () => boolean\n  getIsResizing: () => boolean\n  resetSize: () => void\n}\n\nexport interface ColumnSizingHeader {\n  getSize: () => number\n  getStart: (position?: ColumnPinningPosition) => number\n  getResizeHandler: () => (event: unknown) => void\n}\n\n//\n\nexport const defaultColumnSizing = {\n  size: 150,\n  minSize: 20,\n  maxSize: Number.MAX_SAFE_INTEGER,\n}\n\nconst getDefaultColumnSizingInfoState = (): ColumnSizingInfoState => ({\n  startOffset: null,\n  startSize: null,\n  deltaOffset: null,\n  deltaPercentage: null,\n  isResizingColumn: false,\n  columnSizingStart: [],\n})\n\nexport const ColumnSizing: TableFeature = {\n  getDefaultColumnDef: (): ColumnSizingColumnDef => {\n    return defaultColumnSizing\n  },\n  getInitialState: (state): ColumnSizingTableState => {\n    return {\n      columnSizing: {},\n      columnSizingInfo: getDefaultColumnSizingInfoState(),\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnSizingDefaultOptions => {\n    return {\n      columnResizeMode: 'onEnd',\n      onColumnSizingChange: makeStateUpdater('columnSizing', table),\n      onColumnSizingInfoChange: makeStateUpdater('columnSizingInfo', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): ColumnSizingColumn => {\n    return {\n      getSize: () => {\n        const columnSize = table.getState().columnSizing[column.id]\n\n        return Math.min(\n          Math.max(\n            column.columnDef.minSize ?? defaultColumnSizing.minSize,\n            columnSize ?? column.columnDef.size ?? defaultColumnSizing.size\n          ),\n          column.columnDef.maxSize ?? defaultColumnSizing.maxSize\n        )\n      },\n      getStart: position => {\n        const columns = !position\n          ? table.getVisibleLeafColumns()\n          : position === 'left'\n          ? table.getLeftVisibleLeafColumns()\n          : table.getRightVisibleLeafColumns()\n\n        const index = columns.findIndex(d => d.id === column.id)\n\n        if (index > 0) {\n          const prevSiblingColumn = columns[index - 1]!\n\n          return (\n            prevSiblingColumn.getStart(position) + prevSiblingColumn.getSize()\n          )\n        }\n\n        return 0\n      },\n      resetSize: () => {\n        table.setColumnSizing(({ [column.id]: _, ...rest }) => {\n          return rest\n        })\n      },\n      getCanResize: () => {\n        return (\n          (column.columnDef.enableResizing ?? true) &&\n          (table.options.enableColumnResizing ?? true)\n        )\n      },\n      getIsResizing: () => {\n        return table.getState().columnSizingInfo.isResizingColumn === column.id\n      },\n    }\n  },\n\n  createHeader: <TData extends RowData, TValue>(\n    header: Header<TData, TValue>,\n    table: Table<TData>\n  ): ColumnSizingHeader => {\n    return {\n      getSize: () => {\n        let sum = 0\n\n        const recurse = (header: Header<TData, TValue>) => {\n          if (header.subHeaders.length) {\n            header.subHeaders.forEach(recurse)\n          } else {\n            sum += header.column.getSize() ?? 0\n          }\n        }\n\n        recurse(header)\n\n        return sum\n      },\n      getStart: () => {\n        if (header.index > 0) {\n          const prevSiblingHeader =\n            header.headerGroup.headers[header.index - 1]!\n          return prevSiblingHeader.getStart() + prevSiblingHeader.getSize()\n        }\n\n        return 0\n      },\n      getResizeHandler: () => {\n        const column = table.getColumn(header.column.id)\n        const canResize = column?.getCanResize()\n\n        return (e: unknown) => {\n          if (!column || !canResize) {\n            return\n          }\n\n          ;(e as any).persist?.()\n\n          if (isTouchStartEvent(e)) {\n            // lets not respond to multiple touches (e.g. 2 or 3 fingers)\n            if (e.touches && e.touches.length > 1) {\n              return\n            }\n          }\n\n          const startSize = header.getSize()\n\n          const columnSizingStart: [string, number][] = header\n            ? header\n                .getLeafHeaders()\n                .map(d => [d.column.id, d.column.getSize()])\n            : [[column.id, column.getSize()]]\n\n          const clientX = isTouchStartEvent(e)\n            ? Math.round(e.touches[0]!.clientX)\n            : (e as MouseEvent).clientX\n\n          const newColumnSizing: ColumnSizingState = {}\n\n          const updateOffset = (\n            eventType: 'move' | 'end',\n            clientXPos?: number\n          ) => {\n            if (typeof clientXPos !== 'number') {\n              return\n            }\n\n            table.setColumnSizingInfo(old => {\n              const deltaOffset = clientXPos - (old?.startOffset ?? 0)\n              const deltaPercentage = Math.max(\n                deltaOffset / (old?.startSize ?? 0),\n                -0.999999\n              )\n\n              old.columnSizingStart.forEach(([columnId, headerSize]) => {\n                newColumnSizing[columnId] =\n                  Math.round(\n                    Math.max(headerSize + headerSize * deltaPercentage, 0) * 100\n                  ) / 100\n              })\n\n              return {\n                ...old,\n                deltaOffset,\n                deltaPercentage,\n              }\n            })\n\n            if (\n              table.options.columnResizeMode === 'onChange' ||\n              eventType === 'end'\n            ) {\n              table.setColumnSizing(old => ({\n                ...old,\n                ...newColumnSizing,\n              }))\n            }\n          }\n\n          const onMove = (clientXPos?: number) =>\n            updateOffset('move', clientXPos)\n\n          const onEnd = (clientXPos?: number) => {\n            updateOffset('end', clientXPos)\n\n            table.setColumnSizingInfo(old => ({\n              ...old,\n              isResizingColumn: false,\n              startOffset: null,\n              startSize: null,\n              deltaOffset: null,\n              deltaPercentage: null,\n              columnSizingStart: [],\n            }))\n          }\n\n          const mouseEvents = {\n            moveHandler: (e: MouseEvent) => onMove(e.clientX),\n            upHandler: (e: MouseEvent) => {\n              document.removeEventListener('mousemove', mouseEvents.moveHandler)\n              document.removeEventListener('mouseup', mouseEvents.upHandler)\n              onEnd(e.clientX)\n            },\n          }\n\n          const touchEvents = {\n            moveHandler: (e: TouchEvent) => {\n              if (e.cancelable) {\n                e.preventDefault()\n                e.stopPropagation()\n              }\n              onMove(e.touches[0]!.clientX)\n              return false\n            },\n            upHandler: (e: TouchEvent) => {\n              document.removeEventListener('touchmove', touchEvents.moveHandler)\n              document.removeEventListener('touchend', touchEvents.upHandler)\n              if (e.cancelable) {\n                e.preventDefault()\n                e.stopPropagation()\n              }\n              onEnd(e.touches[0]?.clientX)\n            },\n          }\n\n          const passiveIfSupported = passiveEventSupported()\n            ? { passive: false }\n            : false\n\n          if (isTouchStartEvent(e)) {\n            document.addEventListener(\n              'touchmove',\n              touchEvents.moveHandler,\n              passiveIfSupported\n            )\n            document.addEventListener(\n              'touchend',\n              touchEvents.upHandler,\n              passiveIfSupported\n            )\n          } else {\n            document.addEventListener(\n              'mousemove',\n              mouseEvents.moveHandler,\n              passiveIfSupported\n            )\n            document.addEventListener(\n              'mouseup',\n              mouseEvents.upHandler,\n              passiveIfSupported\n            )\n          }\n\n          table.setColumnSizingInfo(old => ({\n            ...old,\n            startOffset: clientX,\n            startSize,\n            deltaOffset: 0,\n            deltaPercentage: 0,\n            columnSizingStart,\n            isResizingColumn: column.id,\n          }))\n        }\n      },\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnSizingInstance => {\n    return {\n      setColumnSizing: updater => table.options.onColumnSizingChange?.(updater),\n      setColumnSizingInfo: updater =>\n        table.options.onColumnSizingInfoChange?.(updater),\n      resetColumnSizing: defaultState => {\n        table.setColumnSizing(\n          defaultState ? {} : table.initialState.columnSizing ?? {}\n        )\n      },\n      resetHeaderSizeInfo: defaultState => {\n        table.setColumnSizingInfo(\n          defaultState\n            ? getDefaultColumnSizingInfoState()\n            : table.initialState.columnSizingInfo ??\n                getDefaultColumnSizingInfoState()\n        )\n      },\n      getTotalSize: () =>\n        table.getHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n      getLeftTotalSize: () =>\n        table.getLeftHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n      getCenterTotalSize: () =>\n        table.getCenterHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n      getRightTotalSize: () =>\n        table.getRightHeaderGroups()[0]?.headers.reduce((sum, header) => {\n          return sum + header.getSize()\n        }, 0) ?? 0,\n    }\n  },\n}\n\nlet passiveSupported: boolean | null = null\nexport function passiveEventSupported() {\n  if (typeof passiveSupported === 'boolean') return passiveSupported\n\n  let supported = false\n  try {\n    const options = {\n      get passive() {\n        supported = true\n        return false\n      },\n    }\n\n    const noop = () => {}\n\n    window.addEventListener('test', noop, options)\n    window.removeEventListener('test', noop)\n  } catch (err) {\n    supported = false\n  }\n  passiveSupported = supported\n  return passiveSupported\n}\n\nfunction isTouchStartEvent(e: unknown): e is TouchEvent {\n  return (e as TouchEvent).type === 'touchstart'\n}\n","import { RowModel } from '..'\nimport { TableFeature } from '../core/table'\nimport { OnChangeFn, Table, Row, Updater, RowData } from '../types'\nimport { makeStateUpdater } from '../utils'\n\nexport type ExpandedStateList = Record<string, boolean>\nexport type ExpandedState = true | Record<string, boolean>\nexport interface ExpandedTableState {\n  expanded: ExpandedState\n}\n\nexport interface ExpandedRow {\n  toggleExpanded: (expanded?: boolean) => void\n  getIsExpanded: () => boolean\n  getCanExpand: () => boolean\n  getToggleExpandedHandler: () => () => void\n}\n\nexport interface ExpandedOptions<TData extends RowData> {\n  manualExpanding?: boolean\n  onExpandedChange?: OnChangeFn<ExpandedState>\n  autoResetExpanded?: boolean\n  enableExpanding?: boolean\n  getExpandedRowModel?: (table: Table<any>) => () => RowModel<any>\n  getIsRowExpanded?: (row: Row<TData>) => boolean\n  getRowCanExpand?: (row: Row<TData>) => boolean\n  paginateExpandedRows?: boolean\n}\n\nexport interface ExpandedInstance<TData extends RowData> {\n  _autoResetExpanded: () => void\n  setExpanded: (updater: Updater<ExpandedState>) => void\n  toggleAllRowsExpanded: (expanded?: boolean) => void\n  resetExpanded: (defaultState?: boolean) => void\n  getCanSomeRowsExpand: () => boolean\n  getToggleAllRowsExpandedHandler: () => (event: unknown) => void\n  getIsSomeRowsExpanded: () => boolean\n  getIsAllRowsExpanded: () => boolean\n  getExpandedDepth: () => number\n  getExpandedRowModel: () => RowModel<TData>\n  _getExpandedRowModel?: () => RowModel<TData>\n  getPreExpandedRowModel: () => RowModel<TData>\n}\n\n//\n\nexport const Expanding: TableFeature = {\n  getInitialState: (state): ExpandedTableState => {\n    return {\n      expanded: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ExpandedOptions<TData> => {\n    return {\n      onExpandedChange: makeStateUpdater('expanded', table),\n      paginateExpandedRows: true,\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ExpandedInstance<TData> => {\n    let registered = false\n    let queued = false\n\n    return {\n      _autoResetExpanded: () => {\n        if (!registered) {\n          table._queue(() => {\n            registered = true\n          })\n          return\n        }\n\n        if (\n          table.options.autoResetAll ??\n          table.options.autoResetExpanded ??\n          !table.options.manualExpanding\n        ) {\n          if (queued) return\n          queued = true\n          table._queue(() => {\n            table.resetExpanded()\n            queued = false\n          })\n        }\n      },\n      setExpanded: updater => table.options.onExpandedChange?.(updater),\n      toggleAllRowsExpanded: expanded => {\n        if (expanded ?? !table.getIsAllRowsExpanded()) {\n          table.setExpanded(true)\n        } else {\n          table.setExpanded({})\n        }\n      },\n      resetExpanded: defaultState => {\n        table.setExpanded(\n          defaultState ? {} : table.initialState?.expanded ?? {}\n        )\n      },\n      getCanSomeRowsExpand: () => {\n        return table.getRowModel().flatRows.some(row => row.getCanExpand())\n      },\n      getToggleAllRowsExpandedHandler: () => {\n        return (e: unknown) => {\n          ;(e as any).persist?.()\n          table.toggleAllRowsExpanded()\n        }\n      },\n      getIsSomeRowsExpanded: () => {\n        const expanded = table.getState().expanded\n        return expanded === true || Object.values(expanded).some(Boolean)\n      },\n      getIsAllRowsExpanded: () => {\n        const expanded = table.getState().expanded\n\n        // If expanded is true, save some cycles and return true\n        if (typeof expanded === 'boolean') {\n          return expanded === true\n        }\n\n        if (!Object.keys(expanded).length) {\n          return false\n        }\n\n        // If any row is not expanded, return false\n        if (table.getRowModel().flatRows.some(row => !row.getIsExpanded())) {\n          return false\n        }\n\n        // They must all be expanded :shrug:\n        return true\n      },\n      getExpandedDepth: () => {\n        let maxDepth = 0\n\n        const rowIds =\n          table.getState().expanded === true\n            ? Object.keys(table.getRowModel().rowsById)\n            : Object.keys(table.getState().expanded)\n\n        rowIds.forEach(id => {\n          const splitId = id.split('.')\n          maxDepth = Math.max(maxDepth, splitId.length)\n        })\n\n        return maxDepth\n      },\n      getPreExpandedRowModel: () => table.getSortedRowModel(),\n      getExpandedRowModel: () => {\n        if (!table._getExpandedRowModel && table.options.getExpandedRowModel) {\n          table._getExpandedRowModel = table.options.getExpandedRowModel(table)\n        }\n\n        if (table.options.manualExpanding || !table._getExpandedRowModel) {\n          return table.getPreExpandedRowModel()\n        }\n\n        return table._getExpandedRowModel()\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): ExpandedRow => {\n    return {\n      toggleExpanded: expanded => {\n        table.setExpanded(old => {\n          const exists = old === true ? true : !!old?.[row.id]\n\n          let oldExpanded: ExpandedStateList = {}\n\n          if (old === true) {\n            Object.keys(table.getRowModel().rowsById).forEach(rowId => {\n              oldExpanded[rowId] = true\n            })\n          } else {\n            oldExpanded = old\n          }\n\n          expanded = expanded ?? !exists\n\n          if (!exists && expanded) {\n            return {\n              ...oldExpanded,\n              [row.id]: true,\n            }\n          }\n\n          if (exists && !expanded) {\n            const { [row.id]: _, ...rest } = oldExpanded\n            return rest\n          }\n\n          return old\n        })\n      },\n      getIsExpanded: () => {\n        const expanded = table.getState().expanded\n\n        return !!(\n          table.options.getIsRowExpanded?.(row) ??\n          (expanded === true || expanded?.[row.id])\n        )\n      },\n      getCanExpand: () => {\n        return (\n          table.options.getRowCanExpand?.(row) ??\n          ((table.options.enableExpanding ?? true) && !!row.subRows?.length)\n        )\n      },\n      getToggleExpandedHandler: () => {\n        const canExpand = row.getCanExpand()\n\n        return () => {\n          if (!canExpand) return\n          row.toggleExpanded()\n        }\n      },\n    }\n  },\n}\n","import { FilterFn } from './features/Filters'\n\nconst includesString: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  const search = filterValue.toLowerCase()\n  return Boolean(row.getValue<string>(columnId)?.toLowerCase().includes(search))\n}\n\nincludesString.autoRemove = (val: any) => testFalsey(val)\n\nconst includesStringSensitive: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  return Boolean(row.getValue<string>(columnId)?.includes(filterValue))\n}\n\nincludesStringSensitive.autoRemove = (val: any) => testFalsey(val)\n\nconst equalsString: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: string\n) => {\n  return (\n    row.getValue<string>(columnId)?.toLowerCase() === filterValue.toLowerCase()\n  )\n}\n\nequalsString.autoRemove = (val: any) => testFalsey(val)\n\nconst arrIncludes: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown\n) => {\n  return row.getValue<unknown[]>(columnId)?.includes(filterValue)\n}\n\narrIncludes.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst arrIncludesAll: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown[]\n) => {\n  return !filterValue.some(\n    val => !row.getValue<unknown[]>(columnId)?.includes(val)\n  )\n}\n\narrIncludesAll.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst arrIncludesSome: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown[]\n) => {\n  return filterValue.some(val =>\n    row.getValue<unknown[]>(columnId)?.includes(val)\n  )\n}\n\narrIncludesSome.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nconst equals: FilterFn<any> = (row, columnId: string, filterValue: unknown) => {\n  return row.getValue(columnId) === filterValue\n}\n\nequals.autoRemove = (val: any) => testFalsey(val)\n\nconst weakEquals: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: unknown\n) => {\n  return row.getValue(columnId) == filterValue\n}\n\nweakEquals.autoRemove = (val: any) => testFalsey(val)\n\nconst inNumberRange: FilterFn<any> = (\n  row,\n  columnId: string,\n  filterValue: [number, number]\n) => {\n  let [min, max] = filterValue\n\n  const rowValue = row.getValue<number>(columnId)\n  return rowValue >= min && rowValue <= max\n}\n\ninNumberRange.resolveFilterValue = (val: [any, any]) => {\n  let [unsafeMin, unsafeMax] = val\n\n  let parsedMin =\n    typeof unsafeMin !== 'number' ? parseFloat(unsafeMin as string) : unsafeMin\n  let parsedMax =\n    typeof unsafeMax !== 'number' ? parseFloat(unsafeMax as string) : unsafeMax\n\n  let min =\n    unsafeMin === null || Number.isNaN(parsedMin) ? -Infinity : parsedMin\n  let max = unsafeMax === null || Number.isNaN(parsedMax) ? Infinity : parsedMax\n\n  if (min > max) {\n    const temp = min\n    min = max\n    max = temp\n  }\n\n  return [min, max] as const\n}\n\ninNumberRange.autoRemove = (val: any) =>\n  testFalsey(val) || (testFalsey(val[0]) && testFalsey(val[1]))\n\n// Export\n\nexport const filterFns = {\n  includesString,\n  includesStringSensitive,\n  equalsString,\n  arrIncludes,\n  arrIncludesAll,\n  arrIncludesSome,\n  equals,\n  weakEquals,\n  inNumberRange,\n}\n\nexport type BuiltInFilterFn = keyof typeof filterFns\n\n// Utils\n\nfunction testFalsey(val: any) {\n  return val === undefined || val === null || val === ''\n}\n","import { RowModel } from '..'\nimport { TableFeature } from '../core/table'\nimport { BuiltInFilterFn, filterFns } from '../filterFns'\nimport {\n  Column,\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  RowData,\n  FilterMeta,\n  FilterFns,\n} from '../types'\nimport { functionalUpdate, isFunction, makeStateUpdater } from '../utils'\n\nexport interface FiltersTableState {\n  columnFilters: ColumnFiltersState\n  globalFilter: any\n}\n\nexport type ColumnFiltersState = ColumnFilter[]\n\nexport interface ColumnFilter {\n  id: string\n  value: unknown\n}\n\nexport interface ResolvedColumnFilter<TData extends RowData> {\n  id: string\n  resolvedValue: unknown\n  filterFn: FilterFn<TData>\n}\n\nexport interface FilterFn<TData extends RowData> {\n  (\n    row: Row<TData>,\n    columnId: string,\n    filterValue: any,\n    addMeta: (meta: FilterMeta) => void\n  ): boolean\n\n  resolveFilterValue?: TransformFilterValueFn<TData>\n  autoRemove?: ColumnFilterAutoRemoveTestFn<TData>\n}\n\nexport type TransformFilterValueFn<TData extends RowData> = (\n  value: any,\n  column?: Column<TData, unknown>\n) => unknown\n\nexport type ColumnFilterAutoRemoveTestFn<TData extends RowData> = (\n  value: any,\n  column?: Column<TData, unknown>\n) => boolean\n\nexport type CustomFilterFns<TData extends RowData> = Record<\n  string,\n  FilterFn<TData>\n>\n\nexport type FilterFnOption<TData extends RowData> =\n  | 'auto'\n  | BuiltInFilterFn\n  | keyof FilterFns\n  | FilterFn<TData>\n\nexport interface FiltersColumnDef<TData extends RowData> {\n  filterFn?: FilterFnOption<TData>\n  enableColumnFilter?: boolean\n  enableGlobalFilter?: boolean\n}\n\nexport interface FiltersColumn<TData extends RowData> {\n  getAutoFilterFn: () => FilterFn<TData> | undefined\n  getFilterFn: () => FilterFn<TData> | undefined\n  setFilterValue: (updater: Updater<any>) => void\n  getCanFilter: () => boolean\n  getCanGlobalFilter: () => boolean\n  getFacetedRowModel: () => RowModel<TData>\n  _getFacetedRowModel?: () => RowModel<TData>\n  getIsFiltered: () => boolean\n  getFilterValue: () => unknown\n  getFilterIndex: () => number\n  getFacetedUniqueValues: () => Map<any, number>\n  _getFacetedUniqueValues?: () => Map<any, number>\n  getFacetedMinMaxValues: () => undefined | [number, number]\n  _getFacetedMinMaxValues?: () => undefined | [number, number]\n}\n\nexport interface FiltersRow<TData extends RowData> {\n  columnFilters: Record<string, boolean>\n  columnFiltersMeta: Record<string, FilterMeta>\n}\n\ninterface FiltersOptionsBase<TData extends RowData> {\n  enableFilters?: boolean\n  manualFiltering?: boolean\n  filterFromLeafRows?: boolean\n  maxLeafRowFilterDepth?: number\n  getFilteredRowModel?: (table: Table<any>) => () => RowModel<any>\n\n  // Column\n  onColumnFiltersChange?: OnChangeFn<ColumnFiltersState>\n  enableColumnFilters?: boolean\n\n  // Global\n  globalFilterFn?: FilterFnOption<TData>\n  onGlobalFilterChange?: OnChangeFn<any>\n  enableGlobalFilter?: boolean\n  getColumnCanGlobalFilter?: (column: Column<TData, unknown>) => boolean\n\n  // Faceting\n  getFacetedRowModel?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => RowModel<TData>\n  getFacetedUniqueValues?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => Map<any, number>\n  getFacetedMinMaxValues?: (\n    table: Table<TData>,\n    columnId: string\n  ) => () => undefined | [number, number]\n}\n\ntype ResolvedFilterFns = keyof FilterFns extends never\n  ? {\n      filterFns?: Record<string, FilterFn<any>>\n    }\n  : {\n      filterFns: Record<keyof FilterFns, FilterFn<any>>\n    }\n\nexport interface FiltersOptions<TData extends RowData>\n  extends FiltersOptionsBase<TData>,\n    ResolvedFilterFns {}\n\nexport interface FiltersInstance<TData extends RowData> {\n  setColumnFilters: (updater: Updater<ColumnFiltersState>) => void\n\n  resetColumnFilters: (defaultState?: boolean) => void\n\n  // Column Filters\n  getPreFilteredRowModel: () => RowModel<TData>\n  getFilteredRowModel: () => RowModel<TData>\n  _getFilteredRowModel?: () => RowModel<TData>\n\n  // Global Filters\n  setGlobalFilter: (updater: Updater<any>) => void\n  resetGlobalFilter: (defaultState?: boolean) => void\n  getGlobalAutoFilterFn: () => FilterFn<TData> | undefined\n  getGlobalFilterFn: () => FilterFn<TData> | undefined\n  getGlobalFacetedRowModel: () => RowModel<TData>\n  _getGlobalFacetedRowModel?: () => RowModel<TData>\n  getGlobalFacetedUniqueValues: () => Map<any, number>\n  _getGlobalFacetedUniqueValues?: () => Map<any, number>\n  getGlobalFacetedMinMaxValues: () => undefined | [number, number]\n  _getGlobalFacetedMinMaxValues?: () => undefined | [number, number]\n}\n\n//\n\nexport const Filters: TableFeature = {\n  getDefaultColumnDef: <TData extends RowData>(): FiltersColumnDef<TData> => {\n    return {\n      filterFn: 'auto',\n    }\n  },\n\n  getInitialState: (state): FiltersTableState => {\n    return {\n      columnFilters: [],\n      globalFilter: undefined,\n      // filtersProgress: 1,\n      // facetProgress: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): FiltersOptions<TData> => {\n    return {\n      onColumnFiltersChange: makeStateUpdater('columnFilters', table),\n      onGlobalFilterChange: makeStateUpdater('globalFilter', table),\n      filterFromLeafRows: false,\n      maxLeafRowFilterDepth: 100,\n      globalFilterFn: 'auto',\n      getColumnCanGlobalFilter: column => {\n        const value = table\n          .getCoreRowModel()\n          .flatRows[0]?._getAllCellsByColumnId()\n          [column.id]?.getValue()\n\n        return typeof value === 'string' || typeof value === 'number'\n      },\n    } as FiltersOptions<TData>\n  },\n\n  createColumn: <TData extends RowData>(\n    column: Column<TData, unknown>,\n    table: Table<TData>\n  ): FiltersColumn<TData> => {\n    return {\n      getAutoFilterFn: () => {\n        const firstRow = table.getCoreRowModel().flatRows[0]\n\n        const value = firstRow?.getValue(column.id)\n\n        if (typeof value === 'string') {\n          return filterFns.includesString\n        }\n\n        if (typeof value === 'number') {\n          return filterFns.inNumberRange\n        }\n\n        if (typeof value === 'boolean') {\n          return filterFns.equals\n        }\n\n        if (value !== null && typeof value === 'object') {\n          return filterFns.equals\n        }\n\n        if (Array.isArray(value)) {\n          return filterFns.arrIncludes\n        }\n\n        return filterFns.weakEquals\n      },\n      getFilterFn: () => {\n        return isFunction(column.columnDef.filterFn)\n          ? column.columnDef.filterFn\n          : column.columnDef.filterFn === 'auto'\n          ? column.getAutoFilterFn()\n          // @ts-ignore \n          : table.options.filterFns?.[column.columnDef.filterFn as string] ??\n            filterFns[column.columnDef.filterFn as BuiltInFilterFn]\n      },\n      getCanFilter: () => {\n        return (\n          (column.columnDef.enableColumnFilter ?? true) &&\n          (table.options.enableColumnFilters ?? true) &&\n          (table.options.enableFilters ?? true) &&\n          !!column.accessorFn\n        )\n      },\n\n      getCanGlobalFilter: () => {\n        return (\n          (column.columnDef.enableGlobalFilter ?? true) &&\n          (table.options.enableGlobalFilter ?? true) &&\n          (table.options.enableFilters ?? true) &&\n          (table.options.getColumnCanGlobalFilter?.(column) ?? true) &&\n          !!column.accessorFn\n        )\n      },\n\n      getIsFiltered: () => column.getFilterIndex() > -1,\n\n      getFilterValue: () =>\n        table.getState().columnFilters?.find(d => d.id === column.id)?.value,\n\n      getFilterIndex: () =>\n        table.getState().columnFilters?.findIndex(d => d.id === column.id) ??\n        -1,\n\n      setFilterValue: value => {\n        table.setColumnFilters(old => {\n          const filterFn = column.getFilterFn()\n          const previousfilter = old?.find(d => d.id === column.id)\n\n          const newFilter = functionalUpdate(\n            value,\n            previousfilter ? previousfilter.value : undefined\n          )\n\n          //\n          if (\n            shouldAutoRemoveFilter(\n              filterFn as FilterFn<TData>,\n              newFilter,\n              column\n            )\n          ) {\n            return old?.filter(d => d.id !== column.id) ?? []\n          }\n\n          const newFilterObj = { id: column.id, value: newFilter }\n\n          if (previousfilter) {\n            return (\n              old?.map(d => {\n                if (d.id === column.id) {\n                  return newFilterObj\n                }\n                return d\n              }) ?? []\n            )\n          }\n\n          if (old?.length) {\n            return [...old, newFilterObj]\n          }\n\n          return [newFilterObj]\n        })\n      },\n      _getFacetedRowModel:\n        table.options.getFacetedRowModel &&\n        table.options.getFacetedRowModel(table, column.id),\n      getFacetedRowModel: () => {\n        if (!column._getFacetedRowModel) {\n          return table.getPreFilteredRowModel()\n        }\n\n        return column._getFacetedRowModel()\n      },\n      _getFacetedUniqueValues:\n        table.options.getFacetedUniqueValues &&\n        table.options.getFacetedUniqueValues(table, column.id),\n      getFacetedUniqueValues: () => {\n        if (!column._getFacetedUniqueValues) {\n          return new Map()\n        }\n\n        return column._getFacetedUniqueValues()\n      },\n      _getFacetedMinMaxValues:\n        table.options.getFacetedMinMaxValues &&\n        table.options.getFacetedMinMaxValues(table, column.id),\n      getFacetedMinMaxValues: () => {\n        if (!column._getFacetedMinMaxValues) {\n          return undefined\n        }\n\n        return column._getFacetedMinMaxValues()\n      },\n      // () => [column.getFacetedRowModel()],\n      // facetedRowModel => getRowModelMinMaxValues(facetedRowModel, column.id),\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): FiltersRow<TData> => {\n    return {\n      columnFilters: {},\n      columnFiltersMeta: {},\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): FiltersInstance<TData> => {\n    return {\n      getGlobalAutoFilterFn: () => {\n        return filterFns.includesString\n      },\n\n      getGlobalFilterFn: () => {\n        const { globalFilterFn: globalFilterFn } = table.options\n\n        return isFunction(globalFilterFn)\n          ? globalFilterFn\n          : globalFilterFn === 'auto'\n          ? table.getGlobalAutoFilterFn()\n          // @ts-ignore\n          : table.options.filterFns?.[globalFilterFn as string] ??\n            filterFns[globalFilterFn as BuiltInFilterFn]\n      },\n\n      setColumnFilters: (updater: Updater<ColumnFiltersState>) => {\n        const leafColumns = table.getAllLeafColumns()\n\n        const updateFn = (old: ColumnFiltersState) => {\n          return functionalUpdate(updater, old)?.filter(filter => {\n            const column = leafColumns.find(d => d.id === filter.id)\n\n            if (column) {\n              const filterFn = column.getFilterFn()\n\n              if (shouldAutoRemoveFilter(filterFn, filter.value, column)) {\n                return false\n              }\n            }\n\n            return true\n          })\n        }\n\n        table.options.onColumnFiltersChange?.(updateFn)\n      },\n\n      setGlobalFilter: updater => {\n        table.options.onGlobalFilterChange?.(updater)\n      },\n\n      resetGlobalFilter: defaultState => {\n        table.setGlobalFilter(\n          defaultState ? undefined : table.initialState.globalFilter\n        )\n      },\n\n      resetColumnFilters: defaultState => {\n        table.setColumnFilters(\n          defaultState ? [] : table.initialState?.columnFilters ?? []\n        )\n      },\n\n      getPreFilteredRowModel: () => table.getCoreRowModel(),\n      getFilteredRowModel: () => {\n        if (!table._getFilteredRowModel && table.options.getFilteredRowModel) {\n          table._getFilteredRowModel = table.options.getFilteredRowModel(table)\n        }\n\n        if (table.options.manualFiltering || !table._getFilteredRowModel) {\n          return table.getPreFilteredRowModel()\n        }\n\n        return table._getFilteredRowModel()\n      },\n\n      _getGlobalFacetedRowModel:\n        table.options.getFacetedRowModel &&\n        table.options.getFacetedRowModel(table, '__global__'),\n\n      getGlobalFacetedRowModel: () => {\n        if (table.options.manualFiltering || !table._getGlobalFacetedRowModel) {\n          return table.getPreFilteredRowModel()\n        }\n\n        return table._getGlobalFacetedRowModel()\n      },\n\n      _getGlobalFacetedUniqueValues:\n        table.options.getFacetedUniqueValues &&\n        table.options.getFacetedUniqueValues(table, '__global__'),\n      getGlobalFacetedUniqueValues: () => {\n        if (!table._getGlobalFacetedUniqueValues) {\n          return new Map()\n        }\n\n        return table._getGlobalFacetedUniqueValues()\n      },\n\n      _getGlobalFacetedMinMaxValues:\n        table.options.getFacetedMinMaxValues &&\n        table.options.getFacetedMinMaxValues(table, '__global__'),\n      getGlobalFacetedMinMaxValues: () => {\n        if (!table._getGlobalFacetedMinMaxValues) {\n          return\n        }\n\n        return table._getGlobalFacetedMinMaxValues()\n      },\n    }\n  },\n}\n\nexport function shouldAutoRemoveFilter<TData extends RowData>(\n  filterFn?: FilterFn<TData>,\n  value?: any,\n  column?: Column<TData, unknown>\n) {\n  return (\n    (filterFn && filterFn.autoRemove\n      ? filterFn.autoRemove(value, column)\n      : false) ||\n    typeof value === 'undefined' ||\n    (typeof value === 'string' && !value)\n  )\n}\n","import { AggregationFn } from './features/Grouping'\n\nconst sum: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  // It's faster to just add the aggregations together instead of\n  // process leaf nodes individually\n  return childRows.reduce((sum, next) => {\n    const nextValue = next.getValue(columnId)\n    return sum + (typeof nextValue === 'number' ? nextValue : 0)\n  }, 0)\n}\n\nconst min: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let min: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n\n    if (\n      value != null &&\n      (min! > value || (min === undefined && value >= value))\n    ) {\n      min = value\n    }\n  })\n\n  return min\n}\n\nconst max: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let max: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n    if (\n      value != null &&\n      (max! < value || (max === undefined && value >= value))\n    ) {\n      max = value\n    }\n  })\n\n  return max\n}\n\nconst extent: AggregationFn<any> = (columnId, _leafRows, childRows) => {\n  let min: number | undefined\n  let max: number | undefined\n\n  childRows.forEach(row => {\n    const value = row.getValue<number>(columnId)\n    if (value != null) {\n      if (min === undefined) {\n        if (value >= value) min = max = value\n      } else {\n        if (min > value) min = value\n        if (max! < value) max = value\n      }\n    }\n  })\n\n  return [min, max]\n}\n\nconst mean: AggregationFn<any> = (columnId, leafRows) => {\n  let count = 0\n  let sum = 0\n\n  leafRows.forEach(row => {\n    let value = row.getValue<number>(columnId)\n    if (value != null && (value = +value) >= value) {\n      ++count, (sum += value)\n    }\n  })\n\n  if (count) return sum / count\n\n  return\n}\n\nconst median: AggregationFn<any> = (columnId, leafRows) => {\n  if (!leafRows.length) {\n    return\n  }\n\n  let min = 0\n  let max = 0\n\n  leafRows.forEach(row => {\n    let value = row.getValue(columnId)\n    if (typeof value === 'number') {\n      min = Math.min(min, value)\n      max = Math.max(max, value)\n    }\n  })\n\n  return (min + max) / 2\n}\n\nconst unique: AggregationFn<any> = (columnId, leafRows) => {\n  return Array.from(new Set(leafRows.map(d => d.getValue(columnId))).values())\n}\n\nconst uniqueCount: AggregationFn<any> = (columnId, leafRows) => {\n  return new Set(leafRows.map(d => d.getValue(columnId))).size\n}\n\nconst count: AggregationFn<any> = (_columnId, leafRows) => {\n  return leafRows.length\n}\n\nexport const aggregationFns = {\n  sum,\n  min,\n  max,\n  extent,\n  mean,\n  median,\n  unique,\n  uniqueCount,\n  count,\n}\n\nexport type BuiltInAggregationFn = keyof typeof aggregationFns\n","import { makeStateUpdater, memo } from '../utils'\n\nimport { Table, OnChangeFn, Updater, Column, RowData } from '../types'\n\nimport { orderColumns } from './Grouping'\nimport { TableFeature } from '../core/table'\n\nexport interface ColumnOrderTableState {\n  columnOrder: ColumnOrderState\n}\n\nexport type ColumnOrderState = string[]\n\nexport interface ColumnOrderOptions {\n  onColumnOrderChange?: OnChangeFn<ColumnOrderState>\n}\n\nexport interface ColumnOrderDefaultOptions {\n  onColumnOrderChange: OnChangeFn<ColumnOrderState>\n}\n\nexport interface ColumnOrderInstance<TData extends RowData> {\n  setColumnOrder: (updater: Updater<ColumnOrderState>) => void\n  resetColumnOrder: (defaultState?: boolean) => void\n  _getOrderColumnsFn: () => (\n    columns: Column<TData, unknown>[]\n  ) => Column<TData, unknown>[]\n}\n\n//\n\nexport const Ordering: TableFeature = {\n  getInitialState: (state): ColumnOrderTableState => {\n    return {\n      columnOrder: [],\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnOrderDefaultOptions => {\n    return {\n      onColumnOrderChange: makeStateUpdater('columnOrder', table),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnOrderInstance<TData> => {\n    return {\n      setColumnOrder: updater => table.options.onColumnOrderChange?.(updater),\n      resetColumnOrder: defaultState => {\n        table.setColumnOrder(\n          defaultState ? [] : table.initialState.columnOrder ?? []\n        )\n      },\n      _getOrderColumnsFn: memo(\n        () => [\n          table.getState().columnOrder,\n          table.getState().grouping,\n          table.options.groupedColumnMode,\n        ],\n        (columnOrder, grouping, groupedColumnMode) => columns => {\n          // Sort grouped columns to the start of the column list\n          // before the headers are built\n          let orderedColumns: Column<TData, unknown>[] = []\n\n          // If there is no order, return the normal columns\n          if (!columnOrder?.length) {\n            orderedColumns = columns\n          } else {\n            const columnOrderCopy = [...columnOrder]\n\n            // If there is an order, make a copy of the columns\n            const columnsCopy = [...columns]\n\n            // And make a new ordered array of the columns\n\n            // Loop over the columns and place them in order into the new array\n            while (columnsCopy.length && columnOrderCopy.length) {\n              const targetColumnId = columnOrderCopy.shift()\n              const foundIndex = columnsCopy.findIndex(\n                d => d.id === targetColumnId\n              )\n              if (foundIndex > -1) {\n                orderedColumns.push(columnsCopy.splice(foundIndex, 1)[0]!)\n              }\n            }\n\n            // If there are any columns left, add them to the end\n            orderedColumns = [...orderedColumns, ...columnsCopy]\n          }\n\n          return orderColumns(orderedColumns, grouping, groupedColumnMode)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getOrderColumnsFn',\n          // debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n    }\n  },\n}\n","import { TableFeature } from '../core/table'\nimport { OnChangeFn, Table, Row, RowModel, Updater, RowData } from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type RowSelectionState = Record<string, boolean>\n\nexport interface RowSelectionTableState {\n  rowSelection: RowSelectionState\n}\n\nexport interface RowSelectionOptions<TData extends RowData> {\n  enableRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  enableMultiRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  enableSubRowSelection?: boolean | ((row: Row<TData>) => boolean)\n  onRowSelectionChange?: OnChangeFn<RowSelectionState>\n  // enableGroupingRowSelection?:\n  //   | boolean\n  //   | ((\n  //       row: Row<TData>\n  //     ) => boolean)\n  // isAdditiveSelectEvent?: (e: unknown) => boolean\n  // isInclusiveSelectEvent?: (e: unknown) => boolean\n  // selectRowsFn?: (\n  //   table: Table<TData>,\n  //   rowModel: RowModel<TData>\n  // ) => RowModel<TData>\n}\n\nexport interface RowSelectionRow {\n  getIsSelected: () => boolean\n  getIsSomeSelected: () => boolean\n  getIsAllSubRowsSelected: () => boolean\n  getCanSelect: () => boolean\n  getCanMultiSelect: () => boolean\n  getCanSelectSubRows: () => boolean\n  toggleSelected: (value?: boolean) => void\n  getToggleSelectedHandler: () => (event: unknown) => void\n}\n\nexport interface RowSelectionInstance<TData extends RowData> {\n  getToggleAllRowsSelectedHandler: () => (event: unknown) => void\n  getToggleAllPageRowsSelectedHandler: () => (event: unknown) => void\n  setRowSelection: (updater: Updater<RowSelectionState>) => void\n  resetRowSelection: (defaultState?: boolean) => void\n  getIsAllRowsSelected: () => boolean\n  getIsAllPageRowsSelected: () => boolean\n  getIsSomeRowsSelected: () => boolean\n  getIsSomePageRowsSelected: () => boolean\n  toggleAllRowsSelected: (value?: boolean) => void\n  toggleAllPageRowsSelected: (value?: boolean) => void\n  getPreSelectedRowModel: () => RowModel<TData>\n  getSelectedRowModel: () => RowModel<TData>\n  getFilteredSelectedRowModel: () => RowModel<TData>\n  getGroupedSelectedRowModel: () => RowModel<TData>\n}\n\n//\n\nexport const RowSelection: TableFeature = {\n  getInitialState: (state): RowSelectionTableState => {\n    return {\n      rowSelection: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): RowSelectionOptions<TData> => {\n    return {\n      onRowSelectionChange: makeStateUpdater('rowSelection', table),\n      enableRowSelection: true,\n      enableMultiRowSelection: true,\n      enableSubRowSelection: true,\n      // enableGroupingRowSelection: false,\n      // isAdditiveSelectEvent: (e: unknown) => !!e.metaKey,\n      // isInclusiveSelectEvent: (e: unknown) => !!e.shiftKey,\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): RowSelectionInstance<TData> => {\n    return {\n      setRowSelection: updater => table.options.onRowSelectionChange?.(updater),\n      resetRowSelection: defaultState =>\n        table.setRowSelection(\n          defaultState ? {} : table.initialState.rowSelection ?? {}\n        ),\n      toggleAllRowsSelected: value => {\n        table.setRowSelection(old => {\n          value =\n            typeof value !== 'undefined' ? value : !table.getIsAllRowsSelected()\n\n          const rowSelection = { ...old }\n\n          const preGroupedFlatRows = table.getPreGroupedRowModel().flatRows\n\n          // We don't use `mutateRowIsSelected` here for performance reasons.\n          // All of the rows are flat already, so it wouldn't be worth it\n          if (value) {\n            preGroupedFlatRows.forEach(row => {\n              if (!row.getCanSelect()) {\n                return\n              }\n              rowSelection[row.id] = true\n            })\n          } else {\n            preGroupedFlatRows.forEach(row => {\n              delete rowSelection[row.id]\n            })\n          }\n\n          return rowSelection\n        })\n      },\n      toggleAllPageRowsSelected: value =>\n        table.setRowSelection(old => {\n          const resolvedValue =\n            typeof value !== 'undefined'\n              ? value\n              : !table.getIsAllPageRowsSelected()\n\n          const rowSelection: RowSelectionState = { ...old }\n\n          table.getRowModel().rows.forEach(row => {\n            mutateRowIsSelected(rowSelection, row.id, resolvedValue, table)\n          })\n\n          return rowSelection\n        }),\n\n      // addRowSelectionRange: rowId => {\n      //   const {\n      //     rows,\n      //     rowsById,\n      //     options: { selectGroupingRows, selectSubRows },\n      //   } = table\n\n      //   const findSelectedRow = (rows: Row[]) => {\n      //     let found\n      //     rows.find(d => {\n      //       if (d.getIsSelected()) {\n      //         found = d\n      //         return true\n      //       }\n      //       const subFound = findSelectedRow(d.subRows || [])\n      //       if (subFound) {\n      //         found = subFound\n      //         return true\n      //       }\n      //       return false\n      //     })\n      //     return found\n      //   }\n\n      //   const firstRow = findSelectedRow(rows) || rows[0]\n      //   const lastRow = rowsById[rowId]\n\n      //   let include = false\n      //   const selectedRowIds = {}\n\n      //   const addRow = (row: Row) => {\n      //     mutateRowIsSelected(selectedRowIds, row.id, true, {\n      //       rowsById,\n      //       selectGroupingRows: selectGroupingRows!,\n      //       selectSubRows: selectSubRows!,\n      //     })\n      //   }\n\n      //   table.rows.forEach(row => {\n      //     const isFirstRow = row.id === firstRow.id\n      //     const isLastRow = row.id === lastRow.id\n\n      //     if (isFirstRow || isLastRow) {\n      //       if (!include) {\n      //         include = true\n      //       } else if (include) {\n      //         addRow(row)\n      //         include = false\n      //       }\n      //     }\n\n      //     if (include) {\n      //       addRow(row)\n      //     }\n      //   })\n\n      //   table.setRowSelection(selectedRowIds)\n      // },\n      getPreSelectedRowModel: () => table.getCoreRowModel(),\n      getSelectedRowModel: memo(\n        () => [table.getState().rowSelection, table.getCoreRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(table, rowModel)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getSelectedRowModel',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      getFilteredSelectedRowModel: memo(\n        () => [table.getState().rowSelection, table.getFilteredRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(table, rowModel)\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'getFilteredSelectedRowModel',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      getGroupedSelectedRowModel: memo(\n        () => [table.getState().rowSelection, table.getSortedRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(table, rowModel)\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'getGroupedSelectedRowModel',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      ///\n\n      // getGroupingRowCanSelect: rowId => {\n      //   const row = table.getRow(rowId)\n\n      //   if (!row) {\n      //     throw new Error()\n      //   }\n\n      //   if (typeof table.options.enableGroupingRowSelection === 'function') {\n      //     return table.options.enableGroupingRowSelection(row)\n      //   }\n\n      //   return table.options.enableGroupingRowSelection ?? false\n      // },\n\n      getIsAllRowsSelected: () => {\n        const preGroupedFlatRows = table.getFilteredRowModel().flatRows\n        const { rowSelection } = table.getState()\n\n        let isAllRowsSelected = Boolean(\n          preGroupedFlatRows.length && Object.keys(rowSelection).length\n        )\n\n        if (isAllRowsSelected) {\n          if (\n            preGroupedFlatRows.some(\n              row => row.getCanSelect() && !rowSelection[row.id]\n            )\n          ) {\n            isAllRowsSelected = false\n          }\n        }\n\n        return isAllRowsSelected\n      },\n\n      getIsAllPageRowsSelected: () => {\n        const paginationFlatRows = table.getPaginationRowModel().flatRows\n        const { rowSelection } = table.getState()\n\n        let isAllPageRowsSelected = !!paginationFlatRows.length\n\n        if (\n          isAllPageRowsSelected &&\n          paginationFlatRows.some(\n            row => row.getCanSelect() && !rowSelection[row.id]\n          )\n        ) {\n          isAllPageRowsSelected = false\n        }\n\n        return isAllPageRowsSelected\n      },\n\n      getIsSomeRowsSelected: () => {\n        const totalSelected = Object.keys(\n          table.getState().rowSelection ?? {}\n        ).length\n        return (\n          totalSelected > 0 &&\n          totalSelected < table.getFilteredRowModel().flatRows.length\n        )\n      },\n\n      getIsSomePageRowsSelected: () => {\n        const paginationFlatRows = table.getPaginationRowModel().flatRows\n        return table.getIsAllPageRowsSelected()\n          ? false\n          : paginationFlatRows.some(\n              d => d.getIsSelected() || d.getIsSomeSelected()\n            )\n      },\n\n      getToggleAllRowsSelectedHandler: () => {\n        return (e: unknown) => {\n          table.toggleAllRowsSelected(\n            ((e as MouseEvent).target as HTMLInputElement).checked\n          )\n        }\n      },\n\n      getToggleAllPageRowsSelectedHandler: () => {\n        return (e: unknown) => {\n          table.toggleAllPageRowsSelected(\n            ((e as MouseEvent).target as HTMLInputElement).checked\n          )\n        }\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): RowSelectionRow => {\n    return {\n      toggleSelected: value => {\n        const isSelected = row.getIsSelected()\n\n        table.setRowSelection(old => {\n          value = typeof value !== 'undefined' ? value : !isSelected\n\n          if (isSelected === value) {\n            return old\n          }\n\n          const selectedRowIds = { ...old }\n\n          mutateRowIsSelected(selectedRowIds, row.id, value, table)\n\n          return selectedRowIds\n        })\n      },\n      getIsSelected: () => {\n        const { rowSelection } = table.getState()\n        return isRowSelected(row, rowSelection)\n      },\n\n      getIsSomeSelected: () => {\n        const { rowSelection } = table.getState()\n        return isSubRowSelected(row, rowSelection, table) === 'some'\n      },\n\n      getIsAllSubRowsSelected: () => {\n        const { rowSelection } = table.getState()\n        return isSubRowSelected(row, rowSelection, table) === 'all'\n      },\n\n      getCanSelect: () => {\n        if (typeof table.options.enableRowSelection === 'function') {\n          return table.options.enableRowSelection(row)\n        }\n\n        return table.options.enableRowSelection ?? true\n      },\n\n      getCanSelectSubRows: () => {\n        if (typeof table.options.enableSubRowSelection === 'function') {\n          return table.options.enableSubRowSelection(row)\n        }\n\n        return table.options.enableSubRowSelection ?? true\n      },\n\n      getCanMultiSelect: () => {\n        if (typeof table.options.enableMultiRowSelection === 'function') {\n          return table.options.enableMultiRowSelection(row)\n        }\n\n        return table.options.enableMultiRowSelection ?? true\n      },\n      getToggleSelectedHandler: () => {\n        const canSelect = row.getCanSelect()\n\n        return (e: unknown) => {\n          if (!canSelect) return\n          row.toggleSelected(\n            ((e as MouseEvent).target as HTMLInputElement)?.checked\n          )\n        }\n      },\n    }\n  },\n}\n\nconst mutateRowIsSelected = <TData extends RowData>(\n  selectedRowIds: Record<string, boolean>,\n  id: string,\n  value: boolean,\n  table: Table<TData>\n) => {\n  const row = table.getRow(id)\n\n  // const isGrouped = row.getIsGrouped()\n\n  // if ( // TODO: enforce grouping row selection rules\n  //   !isGrouped ||\n  //   (isGrouped && table.options.enableGroupingRowSelection)\n  // ) {\n  if (value) {\n    if (!row.getCanMultiSelect()) {\n      Object.keys(selectedRowIds).forEach(key => delete selectedRowIds[key])\n    }\n    if (row.getCanSelect()) {\n      selectedRowIds[id] = true\n    }\n  } else {\n    delete selectedRowIds[id]\n  }\n  // }\n\n  if (row.subRows?.length && row.getCanSelectSubRows()) {\n    row.subRows.forEach(row =>\n      mutateRowIsSelected(selectedRowIds, row.id, value, table)\n    )\n  }\n}\n\nexport function selectRowsFn<TData extends RowData>(\n  table: Table<TData>,\n  rowModel: RowModel<TData>\n): RowModel<TData> {\n  const rowSelection = table.getState().rowSelection\n\n  const newSelectedFlatRows: Row<TData>[] = []\n  const newSelectedRowsById: Record<string, Row<TData>> = {}\n\n  // Filters top level and nested rows\n  const recurseRows = (rows: Row<TData>[], depth = 0): Row<TData>[] => {\n    return rows\n      .map(row => {\n        const isSelected = isRowSelected(row, rowSelection)\n\n        if (isSelected) {\n          newSelectedFlatRows.push(row)\n          newSelectedRowsById[row.id] = row\n        }\n\n        if (row.subRows?.length) {\n          row = {\n            ...row,\n            subRows: recurseRows(row.subRows, depth + 1),\n          }\n        }\n\n        if (isSelected) {\n          return row\n        }\n      })\n      .filter(Boolean) as Row<TData>[]\n  }\n\n  return {\n    rows: recurseRows(rowModel.rows),\n    flatRows: newSelectedFlatRows,\n    rowsById: newSelectedRowsById,\n  }\n}\n\nexport function isRowSelected<TData extends RowData>(\n  row: Row<TData>,\n  selection: Record<string, boolean>\n): boolean {\n  return selection[row.id] ?? false\n}\n\nexport function isSubRowSelected<TData extends RowData>(\n  row: Row<TData>,\n  selection: Record<string, boolean>,\n  table: Table<TData>\n): boolean | 'some' | 'all' {\n  if (row.subRows && row.subRows.length) {\n    let allChildrenSelected = true\n    let someSelected = false\n\n    row.subRows.forEach(subRow => {\n      // Bail out early if we know both of these\n      if (someSelected && !allChildrenSelected) {\n        return\n      }\n\n      if (isRowSelected(subRow, selection)) {\n        someSelected = true\n      } else {\n        allChildrenSelected = false\n      }\n    })\n\n    return allChildrenSelected ? 'all' : someSelected ? 'some' : false\n  }\n\n  return false\n}\n","import { SortingFn } from './features/Sorting'\n\nexport const reSplitAlphaNumeric = /([0-9]+)/gm\n\nconst alphanumeric: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(\n    toString(rowA.getValue(columnId)).toLowerCase(),\n    toString(rowB.getValue(columnId)).toLowerCase()\n  )\n}\n\nconst alphanumericCaseSensitive: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareAlphanumeric(\n    toString(rowA.getValue(columnId)),\n    toString(rowB.getValue(columnId))\n  )\n}\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nconst text: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(\n    toString(rowA.getValue(columnId)).toLowerCase(),\n    toString(rowB.getValue(columnId)).toLowerCase()\n  )\n}\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nconst textCaseSensitive: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(\n    toString(rowA.getValue(columnId)),\n    toString(rowB.getValue(columnId))\n  )\n}\n\nconst datetime: SortingFn<any> = (rowA, rowB, columnId) => {\n  const a = rowA.getValue<Date>(columnId)\n  const b = rowB.getValue<Date>(columnId)\n\n  // Can handle nullish values\n  // Use > and < because == (and ===) doesn't work with\n  // Date objects (would require calling getTime()).\n  return a > b ? 1 : a < b ? -1 : 0\n}\n\nconst basic: SortingFn<any> = (rowA, rowB, columnId) => {\n  return compareBasic(rowA.getValue(columnId), rowB.getValue(columnId))\n}\n\n// Utils\n\nfunction compareBasic(a: any, b: any) {\n  return a === b ? 0 : a > b ? 1 : -1\n}\n\nfunction toString(a: any) {\n  if (typeof a === 'number') {\n    if (isNaN(a) || a === Infinity || a === -Infinity) {\n      return ''\n    }\n    return String(a)\n  }\n  if (typeof a === 'string') {\n    return a\n  }\n  return ''\n}\n\n// Mixed sorting is slow, but very inclusive of many edge cases.\n// It handles numbers, mixed alphanumeric combinations, and even\n// null, undefined, and Infinity\nfunction compareAlphanumeric(aStr: string, bStr: string) {\n  // Split on number groups, but keep the delimiter\n  // Then remove falsey split values\n  const a = aStr.split(reSplitAlphaNumeric).filter(Boolean)\n  const b = bStr.split(reSplitAlphaNumeric).filter(Boolean)\n\n  // While\n  while (a.length && b.length) {\n    const aa = a.shift()!\n    const bb = b.shift()!\n\n    const an = parseInt(aa, 10)\n    const bn = parseInt(bb, 10)\n\n    const combo = [an, bn].sort()\n\n    // Both are string\n    if (isNaN(combo[0]!)) {\n      if (aa > bb) {\n        return 1\n      }\n      if (bb > aa) {\n        return -1\n      }\n      continue\n    }\n\n    // One is a string, one is a number\n    if (isNaN(combo[1]!)) {\n      return isNaN(an) ? -1 : 1\n    }\n\n    // Both are numbers\n    if (an > bn) {\n      return 1\n    }\n    if (bn > an) {\n      return -1\n    }\n  }\n\n  return a.length - b.length\n}\n\n// Exports\n\nexport const sortingFns = {\n  alphanumeric,\n  alphanumericCaseSensitive,\n  text,\n  textCaseSensitive,\n  datetime,\n  basic,\n}\n\nexport type BuiltInSortingFn = keyof typeof sortingFns\n","import { functionalUpdate, memo, RequiredKeys } from '../utils'\n\nimport {\n  Updater,\n  TableOptionsResolved,\n  TableState,\n  Table,\n  InitialTableState,\n  Row,\n  Column,\n  RowModel,\n  ColumnDef,\n  TableOptions,\n  RowData,\n  TableMeta,\n  ColumnDefResolved,\n  GroupColumnDef,\n} from '../types'\n\n//\nimport { createColumn } from './column'\nimport { Headers } from './headers'\n//\n\nimport { ColumnSizing } from '../features/ColumnSizing'\nimport { Expanding } from '../features/Expanding'\nimport { Filters } from '../features/Filters'\nimport { Grouping } from '../features/Grouping'\nimport { Ordering } from '../features/Ordering'\nimport { Pagination } from '../features/Pagination'\nimport { Pinning } from '../features/Pinning'\nimport { RowSelection } from '../features/RowSelection'\nimport { Sorting } from '../features/Sorting'\nimport { Visibility } from '../features/Visibility'\n\nexport interface TableFeature {\n  getDefaultOptions?: (table: any) => any\n  getInitialState?: (initialState?: InitialTableState) => any\n  createTable?: (table: any) => any\n  getDefaultColumnDef?: () => any\n  createColumn?: (column: any, table: any) => any\n  createHeader?: (column: any, table: any) => any\n  createCell?: (cell: any, column: any, row: any, table: any) => any\n  createRow?: (row: any, table: any) => any\n}\n\nconst features = [\n  Headers,\n  Visibility,\n  Ordering,\n  Pinning,\n  Filters,\n  Sorting,\n  Grouping,\n  Expanding,\n  Pagination,\n  RowSelection,\n  ColumnSizing,\n] as const\n\n//\n\nexport interface CoreTableState {}\n\nexport interface CoreOptions<TData extends RowData> {\n  data: TData[]\n  state: Partial<TableState>\n  onStateChange: (updater: Updater<TableState>) => void\n  debugAll?: boolean\n  debugTable?: boolean\n  debugHeaders?: boolean\n  debugColumns?: boolean\n  debugRows?: boolean\n  initialState?: InitialTableState\n  autoResetAll?: boolean\n  mergeOptions?: (\n    defaultOptions: TableOptions<TData>,\n    options: Partial<TableOptions<TData>>\n  ) => TableOptions<TData>\n  meta?: TableMeta<TData>\n  getCoreRowModel: (table: Table<any>) => () => RowModel<any>\n  getSubRows?: (originalRow: TData, index: number) => undefined | TData[]\n  getRowId?: (originalRow: TData, index: number, parent?: Row<TData>) => string\n  columns: ColumnDef<TData, any>[]\n  defaultColumn?: Partial<ColumnDef<TData, unknown>>\n  renderFallbackValue: any\n}\n\nexport interface CoreInstance<TData extends RowData> {\n  initialState: TableState\n  reset: () => void\n  options: RequiredKeys<TableOptionsResolved<TData>, 'state'>\n  setOptions: (newOptions: Updater<TableOptionsResolved<TData>>) => void\n  getState: () => TableState\n  setState: (updater: Updater<TableState>) => void\n  _features: readonly TableFeature[]\n  _queue: (cb: () => void) => void\n  _getRowId: (_: TData, index: number, parent?: Row<TData>) => string\n  getCoreRowModel: () => RowModel<TData>\n  _getCoreRowModel?: () => RowModel<TData>\n  getRowModel: () => RowModel<TData>\n  getRow: (id: string) => Row<TData>\n  _getDefaultColumnDef: () => Partial<ColumnDef<TData, unknown>>\n  _getColumnDefs: () => ColumnDef<TData, unknown>[]\n  _getAllFlatColumnsById: () => Record<string, Column<TData, unknown>>\n  getAllColumns: () => Column<TData, unknown>[]\n  getAllFlatColumns: () => Column<TData, unknown>[]\n  getAllLeafColumns: () => Column<TData, unknown>[]\n  getColumn: (columnId: string) => Column<TData, unknown> | undefined\n}\n\nexport function createTable<TData extends RowData>(\n  options: TableOptionsResolved<TData>\n): Table<TData> {\n  if (options.debugAll || options.debugTable) {\n    console.info('Creating Table Instance...')\n  }\n\n  let table = { _features: features } as unknown as Table<TData>\n\n  const defaultOptions = table._features.reduce((obj, feature) => {\n    return Object.assign(obj, feature.getDefaultOptions?.(table))\n  }, {}) as TableOptionsResolved<TData>\n\n  const mergeOptions = (options: TableOptionsResolved<TData>) => {\n    if (table.options.mergeOptions) {\n      return table.options.mergeOptions(defaultOptions, options)\n    }\n\n    return {\n      ...defaultOptions,\n      ...options,\n    }\n  }\n\n  const coreInitialState: CoreTableState = {}\n\n  let initialState = {\n    ...coreInitialState,\n    ...(options.initialState ?? {}),\n  } as TableState\n\n  table._features.forEach(feature => {\n    initialState = feature.getInitialState?.(initialState) ?? initialState\n  })\n\n  const queued: (() => void)[] = []\n  let queuedTimeout = false\n\n  const coreInstance: CoreInstance<TData> = {\n    _features: features,\n    options: {\n      ...defaultOptions,\n      ...options,\n    },\n    initialState,\n    _queue: cb => {\n      queued.push(cb)\n\n      if (!queuedTimeout) {\n        queuedTimeout = true\n\n        // Schedule a microtask to run the queued callbacks after\n        // the current call stack (render, etc) has finished.\n        Promise.resolve()\n          .then(() => {\n            while (queued.length) {\n              queued.shift()!()\n            }\n            queuedTimeout = false\n          })\n          .catch(error =>\n            setTimeout(() => {\n              throw error\n            })\n          )\n      }\n    },\n    reset: () => {\n      table.setState(table.initialState)\n    },\n    setOptions: updater => {\n      const newOptions = functionalUpdate(updater, table.options)\n      table.options = mergeOptions(newOptions) as RequiredKeys<\n        TableOptionsResolved<TData>,\n        'state'\n      >\n    },\n\n    getState: () => {\n      return table.options.state as TableState\n    },\n\n    setState: (updater: Updater<TableState>) => {\n      table.options.onStateChange?.(updater)\n    },\n\n    _getRowId: (row: TData, index: number, parent?: Row<TData>) =>\n      table.options.getRowId?.(row, index, parent) ??\n      `${parent ? [parent.id, index].join('.') : index}`,\n\n    getCoreRowModel: () => {\n      if (!table._getCoreRowModel) {\n        table._getCoreRowModel = table.options.getCoreRowModel(table)\n      }\n\n      return table._getCoreRowModel!()\n    },\n\n    // The final calls start at the bottom of the model,\n    // expanded rows, which then work their way up\n\n    getRowModel: () => {\n      return table.getPaginationRowModel()\n    },\n    getRow: (id: string) => {\n      const row = table.getRowModel().rowsById[id]\n\n      if (!row) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(`getRow expected an ID, but got ${id}`)\n        }\n        throw new Error()\n      }\n\n      return row\n    },\n    _getDefaultColumnDef: memo(\n      () => [table.options.defaultColumn],\n      defaultColumn => {\n        defaultColumn = (defaultColumn ?? {}) as Partial<\n          ColumnDef<TData, unknown>\n        >\n\n        return {\n          header: props => {\n            const resolvedColumnDef = props.header.column\n              .columnDef as ColumnDefResolved<TData>\n\n            if (resolvedColumnDef.accessorKey) {\n              return resolvedColumnDef.accessorKey\n            }\n\n            if (resolvedColumnDef.accessorFn) {\n              return resolvedColumnDef.id\n            }\n\n            return null\n          },\n          // footer: props => props.header.column.id,\n          cell: props => props.renderValue<any>()?.toString?.() ?? null,\n          ...table._features.reduce((obj, feature) => {\n            return Object.assign(obj, feature.getDefaultColumnDef?.())\n          }, {}),\n          ...defaultColumn,\n        } as Partial<ColumnDef<TData, unknown>>\n      },\n      {\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n        key: process.env.NODE_ENV === 'development' && 'getDefaultColumnDef',\n      }\n    ),\n\n    _getColumnDefs: () => table.options.columns,\n\n    getAllColumns: memo(\n      () => [table._getColumnDefs()],\n      columnDefs => {\n        const recurseColumns = (\n          columnDefs: ColumnDef<TData, unknown>[],\n          parent?: Column<TData, unknown>,\n          depth = 0\n        ): Column<TData, unknown>[] => {\n          return columnDefs.map(columnDef => {\n            const column = createColumn(table, columnDef, depth, parent)\n\n            const groupingColumnDef = columnDef as GroupColumnDef<\n              TData,\n              unknown\n            >\n\n            column.columns = groupingColumnDef.columns\n              ? recurseColumns(groupingColumnDef.columns, column, depth + 1)\n              : []\n\n            return column\n          })\n        }\n\n        return recurseColumns(columnDefs)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getAllFlatColumns: memo(\n      () => [table.getAllColumns()],\n      allColumns => {\n        return allColumns.flatMap(column => {\n          return column.getFlatColumns()\n        })\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllFlatColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    _getAllFlatColumnsById: memo(\n      () => [table.getAllFlatColumns()],\n      flatColumns => {\n        return flatColumns.reduce((acc, column) => {\n          acc[column.id] = column\n          return acc\n        }, {} as Record<string, Column<TData, unknown>>)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllFlatColumnsById',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getAllLeafColumns: memo(\n      () => [table.getAllColumns(), table._getOrderColumnsFn()],\n      (allColumns, orderColumns) => {\n        let leafColumns = allColumns.flatMap(column => column.getLeafColumns())\n        return orderColumns(leafColumns)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getAllLeafColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n\n    getColumn: columnId => {\n      const column = table._getAllFlatColumnsById()[columnId]\n\n      if (process.env.NODE_ENV !== 'production' && !column) {\n        console.error(`[Table] Column with id '${columnId}' does not exist.`)\n      }\n\n      return column\n    },\n  }\n\n  Object.assign(table, coreInstance)\n\n  table._features.forEach(feature => {\n    return Object.assign(table, feature.createTable?.(table))\n  })\n\n  return table\n}\n","import { TableFeature } from '../core/table'\nimport {\n  Cell,\n  Column,\n  OnChangeFn,\n  Table,\n  Updater,\n  Row,\n  RowData,\n} from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type VisibilityState = Record<string, boolean>\n\nexport interface VisibilityTableState {\n  columnVisibility: VisibilityState\n}\n\nexport interface VisibilityOptions {\n  onColumnVisibilityChange?: OnChangeFn<VisibilityState>\n  enableHiding?: boolean\n}\n\nexport interface VisibilityDefaultOptions {\n  onColumnVisibilityChange: OnChangeFn<VisibilityState>\n}\n\nexport interface VisibilityInstance<TData extends RowData> {\n  getVisibleFlatColumns: () => Column<TData, unknown>[]\n  getVisibleLeafColumns: () => Column<TData, unknown>[]\n  getLeftVisibleLeafColumns: () => Column<TData, unknown>[]\n  getRightVisibleLeafColumns: () => Column<TData, unknown>[]\n  getCenterVisibleLeafColumns: () => Column<TData, unknown>[]\n  setColumnVisibility: (updater: Updater<VisibilityState>) => void\n  resetColumnVisibility: (defaultState?: boolean) => void\n  toggleAllColumnsVisible: (value?: boolean) => void\n  getIsAllColumnsVisible: () => boolean\n  getIsSomeColumnsVisible: () => boolean\n  getToggleAllColumnsVisibilityHandler: () => (event: unknown) => void\n}\n\nexport interface VisibilityColumnDef {\n  enableHiding?: boolean\n}\n\nexport interface VisibilityRow<TData extends RowData> {\n  _getAllVisibleCells: () => Cell<TData, unknown>[]\n  getVisibleCells: () => Cell<TData, unknown>[]\n}\n\nexport interface VisibilityColumn {\n  getCanHide: () => boolean\n  getIsVisible: () => boolean\n  toggleVisibility: (value?: boolean) => void\n  getToggleVisibilityHandler: () => (event: unknown) => void\n}\n\n//\n\nexport const Visibility: TableFeature = {\n  getInitialState: (state): VisibilityTableState => {\n    return {\n      columnVisibility: {},\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): VisibilityDefaultOptions => {\n    return {\n      onColumnVisibilityChange: makeStateUpdater('columnVisibility', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): VisibilityColumn => {\n    return {\n      toggleVisibility: value => {\n        if (column.getCanHide()) {\n          table.setColumnVisibility(old => ({\n            ...old,\n            [column.id]: value ?? !column.getIsVisible(),\n          }))\n        }\n      },\n      getIsVisible: () => {\n        return table.getState().columnVisibility?.[column.id] ?? true\n      },\n\n      getCanHide: () => {\n        return (\n          (column.columnDef.enableHiding ?? true) &&\n          (table.options.enableHiding ?? true)\n        )\n      },\n      getToggleVisibilityHandler: () => {\n        return (e: unknown) => {\n          column.toggleVisibility?.(\n            ((e as MouseEvent).target as HTMLInputElement).checked\n          )\n        }\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): VisibilityRow<TData> => {\n    return {\n      _getAllVisibleCells: memo(\n        () => [row.getAllCells(), table.getState().columnVisibility],\n        cells => {\n          return cells.filter(cell => cell.column.getIsVisible())\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row._getAllVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n      getVisibleCells: memo(\n        () => [\n          row.getLeftVisibleCells(),\n          row.getCenterVisibleCells(),\n          row.getRightVisibleCells(),\n        ],\n        (left, center, right) => [...left, ...center, ...right],\n        {\n          key: process.env.NODE_ENV === 'development' && 'row.getVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): VisibilityInstance<TData> => {\n    const makeVisibleColumnsMethod = (\n      key: string,\n      getColumns: () => Column<TData, unknown>[]\n    ): (() => Column<TData, unknown>[]) => {\n      return memo(\n        () => [\n          getColumns(),\n          getColumns()\n            .filter(d => d.getIsVisible())\n            .map(d => d.id)\n            .join('_'),\n        ],\n        columns => {\n          return columns.filter(d => d.getIsVisible?.())\n        },\n        {\n          key,\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      )\n    }\n\n    return {\n      getVisibleFlatColumns: makeVisibleColumnsMethod(\n        'getVisibleFlatColumns',\n        () => table.getAllFlatColumns()\n      ),\n      getVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getVisibleLeafColumns',\n        () => table.getAllLeafColumns()\n      ),\n      getLeftVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getLeftVisibleLeafColumns',\n        () => table.getLeftLeafColumns()\n      ),\n      getRightVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getRightVisibleLeafColumns',\n        () => table.getRightLeafColumns()\n      ),\n      getCenterVisibleLeafColumns: makeVisibleColumnsMethod(\n        'getCenterVisibleLeafColumns',\n        () => table.getCenterLeafColumns()\n      ),\n\n      setColumnVisibility: updater =>\n        table.options.onColumnVisibilityChange?.(updater),\n\n      resetColumnVisibility: defaultState => {\n        table.setColumnVisibility(\n          defaultState ? {} : table.initialState.columnVisibility ?? {}\n        )\n      },\n\n      toggleAllColumnsVisible: value => {\n        value = value ?? !table.getIsAllColumnsVisible()\n\n        table.setColumnVisibility(\n          table.getAllLeafColumns().reduce(\n            (obj, column) => ({\n              ...obj,\n              [column.id]: !value ? !column.getCanHide?.() : value,\n            }),\n            {}\n          )\n        )\n      },\n\n      getIsAllColumnsVisible: () =>\n        !table.getAllLeafColumns().some(column => !column.getIsVisible?.()),\n\n      getIsSomeColumnsVisible: () =>\n        table.getAllLeafColumns().some(column => column.getIsVisible?.()),\n\n      getToggleAllColumnsVisibilityHandler: () => {\n        return (e: unknown) => {\n          table.toggleAllColumnsVisible(\n            ((e as MouseEvent).target as HTMLInputElement)?.checked\n          )\n        }\n      },\n    }\n  },\n}\n","import { RowModel } from '..'\nimport { BuiltInAggregationFn, aggregationFns } from '../aggregationFns'\nimport { TableFeature } from '../core/table'\nimport {\n  Cell,\n  Column,\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  ColumnDefTemplate,\n  RowData,\n  AggregationFns,\n} from '../types'\nimport { isFunction, makeStateUpdater } from '../utils'\n\nexport type GroupingState = string[]\n\nexport interface GroupingTableState {\n  grouping: GroupingState\n}\n\nexport type AggregationFn<TData extends RowData> = (\n  columnId: string,\n  leafRows: Row<TData>[],\n  childRows: Row<TData>[]\n) => any\n\nexport type CustomAggregationFns = Record<string, AggregationFn<any>>\n\nexport type AggregationFnOption<TData extends RowData> =\n  | 'auto'\n  | keyof AggregationFns\n  | BuiltInAggregationFn\n  | AggregationFn<TData>\n\nexport interface GroupingColumnDef<TData extends RowData, TValue> {\n  aggregationFn?: AggregationFnOption<TData>\n  aggregatedCell?: ColumnDefTemplate<\n    ReturnType<Cell<TData, TValue>['getContext']>\n  >\n  enableGrouping?: boolean\n}\n\nexport interface GroupingColumn<TData extends RowData> {\n  getCanGroup: () => boolean\n  getIsGrouped: () => boolean\n  getGroupedIndex: () => number\n  toggleGrouping: () => void\n  getToggleGroupingHandler: () => () => void\n  getAutoAggregationFn: () => AggregationFn<TData> | undefined\n  getAggregationFn: () => AggregationFn<TData> | undefined\n}\n\nexport interface GroupingRow {\n  groupingColumnId?: string\n  groupingValue?: unknown\n  getIsGrouped: () => boolean\n  _groupingValuesCache: Record<string, any>\n}\n\nexport interface GroupingCell {\n  getIsGrouped: () => boolean\n  getIsPlaceholder: () => boolean\n  getIsAggregated: () => boolean\n}\n\nexport interface ColumnDefaultOptions {\n  // Column\n  onGroupingChange: OnChangeFn<GroupingState>\n  enableGrouping: boolean\n}\n\ninterface GroupingOptionsBase {\n  manualGrouping?: boolean\n  onGroupingChange?: OnChangeFn<GroupingState>\n  enableGrouping?: boolean\n  getGroupedRowModel?: (table: Table<any>) => () => RowModel<any>\n  groupedColumnMode?: false | 'reorder' | 'remove'\n}\n\ntype ResolvedAggregationFns = keyof AggregationFns extends never\n  ? {\n      aggregationFns?: Record<string, AggregationFn<any>>\n    }\n  : {\n      aggregationFns: Record<keyof AggregationFns, AggregationFn<any>>\n    }\n\nexport interface GroupingOptions\n  extends GroupingOptionsBase,\n    ResolvedAggregationFns {}\n\nexport type GroupingColumnMode = false | 'reorder' | 'remove'\n\nexport interface GroupingInstance<TData extends RowData> {\n  setGrouping: (updater: Updater<GroupingState>) => void\n  resetGrouping: (defaultState?: boolean) => void\n  getPreGroupedRowModel: () => RowModel<TData>\n  getGroupedRowModel: () => RowModel<TData>\n  _getGroupedRowModel?: () => RowModel<TData>\n}\n\n//\n\nexport const Grouping: TableFeature = {\n  getDefaultColumnDef: <TData extends RowData>(): GroupingColumnDef<\n    TData,\n    unknown\n  > => {\n    return {\n      aggregatedCell: props => (props.getValue() as any)?.toString?.() ?? null,\n      aggregationFn: 'auto',\n    }\n  },\n\n  getInitialState: (state): GroupingTableState => {\n    return {\n      grouping: [],\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): GroupingOptions => {\n    return {\n      onGroupingChange: makeStateUpdater('grouping', table),\n      groupedColumnMode: 'reorder',\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): GroupingColumn<TData> => {\n    return {\n      toggleGrouping: () => {\n        table.setGrouping(old => {\n          // Find any existing grouping for this column\n          if (old?.includes(column.id)) {\n            return old.filter(d => d !== column.id)\n          }\n\n          return [...(old ?? []), column.id]\n        })\n      },\n\n      getCanGroup: () => {\n        return (\n          column.columnDef.enableGrouping ??\n          true ??\n          table.options.enableGrouping ??\n          true ??\n          !!column.accessorFn\n        )\n      },\n\n      getIsGrouped: () => {\n        return table.getState().grouping?.includes(column.id)\n      },\n\n      getGroupedIndex: () => table.getState().grouping?.indexOf(column.id),\n\n      getToggleGroupingHandler: () => {\n        const canGroup = column.getCanGroup()\n\n        return () => {\n          if (!canGroup) return\n          column.toggleGrouping()\n        }\n      },\n      getAutoAggregationFn: () => {\n        const firstRow = table.getCoreRowModel().flatRows[0]\n\n        const value = firstRow?.getValue(column.id)\n\n        if (typeof value === 'number') {\n          return aggregationFns.sum\n        }\n\n        if (Object.prototype.toString.call(value) === '[object Date]') {\n          return aggregationFns.extent\n        }\n      },\n      getAggregationFn: () => {\n        if (!column) {\n          throw new Error()\n        }\n\n        return isFunction(column.columnDef.aggregationFn)\n          ? column.columnDef.aggregationFn\n          : column.columnDef.aggregationFn === 'auto'\n          ? column.getAutoAggregationFn()\n          : table.options.aggregationFns?.[\n              column.columnDef.aggregationFn as string\n            ] ??\n            aggregationFns[\n              column.columnDef.aggregationFn as BuiltInAggregationFn\n            ]\n      },\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): GroupingInstance<TData> => {\n    return {\n      setGrouping: updater => table.options.onGroupingChange?.(updater),\n\n      resetGrouping: defaultState => {\n        table.setGrouping(\n          defaultState ? [] : table.initialState?.grouping ?? []\n        )\n      },\n\n      getPreGroupedRowModel: () => table.getFilteredRowModel(),\n      getGroupedRowModel: () => {\n        if (!table._getGroupedRowModel && table.options.getGroupedRowModel) {\n          table._getGroupedRowModel = table.options.getGroupedRowModel(table)\n        }\n\n        if (table.options.manualGrouping || !table._getGroupedRowModel) {\n          return table.getPreGroupedRowModel()\n        }\n\n        return table._getGroupedRowModel()\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(row: Row<TData>): GroupingRow => {\n    return {\n      getIsGrouped: () => !!row.groupingColumnId,\n      _groupingValuesCache: {},\n    }\n  },\n\n  createCell: <TData extends RowData, TValue>(\n    cell: Cell<TData, TValue>,\n    column: Column<TData, TValue>,\n    row: Row<TData>,\n    table: Table<TData>\n  ): GroupingCell => {\n    const getRenderValue = () =>\n      cell.getValue() ?? table.options.renderFallbackValue\n\n    return {\n      getIsGrouped: () =>\n        column.getIsGrouped() && column.id === row.groupingColumnId,\n      getIsPlaceholder: () => !cell.getIsGrouped() && column.getIsGrouped(),\n      getIsAggregated: () =>\n        !cell.getIsGrouped() &&\n        !cell.getIsPlaceholder() &&\n        !!row.subRows?.length,\n    }\n  },\n}\n\nexport function orderColumns<TData extends RowData>(\n  leafColumns: Column<TData, unknown>[],\n  grouping: string[],\n  groupedColumnMode?: GroupingColumnMode\n) {\n  if (!grouping?.length || !groupedColumnMode) {\n    return leafColumns\n  }\n\n  const nonGroupingColumns = leafColumns.filter(\n    col => !grouping.includes(col.id)\n  )\n\n  if (groupedColumnMode === 'remove') {\n    return nonGroupingColumns\n  }\n\n  const groupingColumns = grouping\n    .map(g => leafColumns.find(col => col.id === g)!)\n    .filter(Boolean)\n\n  return [...groupingColumns, ...nonGroupingColumns]\n}\n","import { TableFeature } from '../core/table'\nimport {\n  OnChangeFn,\n  Updater,\n  Table,\n  Column,\n  Row,\n  Cell,\n  RowData,\n} from '../types'\nimport { makeStateUpdater, memo } from '../utils'\n\nexport type ColumnPinningPosition = false | 'left' | 'right'\n\nexport interface ColumnPinningState {\n  left?: string[]\n  right?: string[]\n}\n\nexport interface ColumnPinningTableState {\n  columnPinning: ColumnPinningState\n}\n\nexport interface ColumnPinningOptions {\n  onColumnPinningChange?: OnChangeFn<ColumnPinningState>\n  enablePinning?: boolean\n}\n\nexport interface ColumnPinningDefaultOptions {\n  onColumnPinningChange: OnChangeFn<ColumnPinningState>\n}\n\nexport interface ColumnPinningColumnDef {\n  enablePinning?: boolean\n}\n\nexport interface ColumnPinningColumn {\n  getCanPin: () => boolean\n  getPinnedIndex: () => number\n  getIsPinned: () => ColumnPinningPosition\n  pin: (position: ColumnPinningPosition) => void\n}\n\nexport interface ColumnPinningRow<TData extends RowData> {\n  getLeftVisibleCells: () => Cell<TData, unknown>[]\n  getCenterVisibleCells: () => Cell<TData, unknown>[]\n  getRightVisibleCells: () => Cell<TData, unknown>[]\n}\n\nexport interface ColumnPinningInstance<TData extends RowData> {\n  setColumnPinning: (updater: Updater<ColumnPinningState>) => void\n  resetColumnPinning: (defaultState?: boolean) => void\n  getIsSomeColumnsPinned: (position?: ColumnPinningPosition) => boolean\n  getLeftLeafColumns: () => Column<TData, unknown>[]\n  getRightLeafColumns: () => Column<TData, unknown>[]\n  getCenterLeafColumns: () => Column<TData, unknown>[]\n}\n\n//\n\nconst getDefaultPinningState = (): ColumnPinningState => ({\n  left: [],\n  right: [],\n})\n\nexport const Pinning: TableFeature = {\n  getInitialState: (state): ColumnPinningTableState => {\n    return {\n      columnPinning: getDefaultPinningState(),\n      ...state,\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnPinningDefaultOptions => {\n    return {\n      onColumnPinningChange: makeStateUpdater('columnPinning', table),\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): ColumnPinningColumn => {\n    return {\n      pin: position => {\n        const columnIds = column\n          .getLeafColumns()\n          .map(d => d.id)\n          .filter(Boolean) as string[]\n\n        table.setColumnPinning(old => {\n          if (position === 'right') {\n            return {\n              left: (old?.left ?? []).filter(d => !columnIds?.includes(d)),\n              right: [\n                ...(old?.right ?? []).filter(d => !columnIds?.includes(d)),\n                ...columnIds,\n              ],\n            }\n          }\n\n          if (position === 'left') {\n            return {\n              left: [\n                ...(old?.left ?? []).filter(d => !columnIds?.includes(d)),\n                ...columnIds,\n              ],\n              right: (old?.right ?? []).filter(d => !columnIds?.includes(d)),\n            }\n          }\n\n          return {\n            left: (old?.left ?? []).filter(d => !columnIds?.includes(d)),\n            right: (old?.right ?? []).filter(d => !columnIds?.includes(d)),\n          }\n        })\n      },\n\n      getCanPin: () => {\n        const leafColumns = column.getLeafColumns()\n\n        return leafColumns.some(\n          d =>\n            (d.columnDef.enablePinning ?? true) &&\n            (table.options.enablePinning ?? true)\n        )\n      },\n\n      getIsPinned: () => {\n        const leafColumnIds = column.getLeafColumns().map(d => d.id)\n\n        const { left, right } = table.getState().columnPinning\n\n        const isLeft = leafColumnIds.some(d => left?.includes(d))\n        const isRight = leafColumnIds.some(d => right?.includes(d))\n\n        return isLeft ? 'left' : isRight ? 'right' : false\n      },\n\n      getPinnedIndex: () => {\n        const position = column.getIsPinned()\n\n        return position\n          ? table.getState().columnPinning?.[position]?.indexOf(column.id) ?? -1\n          : 0\n      },\n    }\n  },\n\n  createRow: <TData extends RowData>(\n    row: Row<TData>,\n    table: Table<TData>\n  ): ColumnPinningRow<TData> => {\n    return {\n      getCenterVisibleCells: memo(\n        () => [\n          row._getAllVisibleCells(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allCells, left, right) => {\n          const leftAndRight: string[] = [...(left ?? []), ...(right ?? [])]\n\n          return allCells.filter(d => !leftAndRight.includes(d.column.id))\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' &&\n            'row.getCenterVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n      getLeftVisibleCells: memo(\n        () => [\n          row._getAllVisibleCells(),\n          table.getState().columnPinning.left,\n          ,\n        ],\n        (allCells, left) => {\n          const cells = (left ?? [])\n            .map(\n              columnId => allCells.find(cell => cell.column.id === columnId)!\n            )\n            .filter(Boolean)\n            .map(d => ({ ...d, position: 'left' } as Cell<TData, unknown>))\n\n          return cells\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row.getLeftVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n      getRightVisibleCells: memo(\n        () => [row._getAllVisibleCells(), table.getState().columnPinning.right],\n        (allCells, right) => {\n          const cells = (right ?? [])\n            .map(\n              columnId => allCells.find(cell => cell.column.id === columnId)!\n            )\n            .filter(Boolean)\n            .map(d => ({ ...d, position: 'right' } as Cell<TData, unknown>))\n\n          return cells\n        },\n        {\n          key:\n            process.env.NODE_ENV === 'production' && 'row.getRightVisibleCells',\n          debug: () => table.options.debugAll ?? table.options.debugRows,\n        }\n      ),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): ColumnPinningInstance<TData> => {\n    return {\n      setColumnPinning: updater =>\n        table.options.onColumnPinningChange?.(updater),\n\n      resetColumnPinning: defaultState =>\n        table.setColumnPinning(\n          defaultState\n            ? getDefaultPinningState()\n            : table.initialState?.columnPinning ?? getDefaultPinningState()\n        ),\n\n      getIsSomeColumnsPinned: position => {\n        const pinningState = table.getState().columnPinning\n\n        if (!position) {\n          return Boolean(\n            pinningState.left?.length || pinningState.right?.length\n          )\n        }\n        return Boolean(pinningState[position]?.length)\n      },\n\n      getLeftLeafColumns: memo(\n        () => [table.getAllLeafColumns(), table.getState().columnPinning.left],\n        (allColumns, left) => {\n          return (left ?? [])\n            .map(columnId => allColumns.find(column => column.id === columnId)!)\n            .filter(Boolean)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getLeftLeafColumns',\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      ),\n\n      getRightLeafColumns: memo(\n        () => [table.getAllLeafColumns(), table.getState().columnPinning.right],\n        (allColumns, right) => {\n          return (right ?? [])\n            .map(columnId => allColumns.find(column => column.id === columnId)!)\n            .filter(Boolean)\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getRightLeafColumns',\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      ),\n\n      getCenterLeafColumns: memo(\n        () => [\n          table.getAllLeafColumns(),\n          table.getState().columnPinning.left,\n          table.getState().columnPinning.right,\n        ],\n        (allColumns, left, right) => {\n          const leftAndRight: string[] = [...(left ?? []), ...(right ?? [])]\n\n          return allColumns.filter(d => !leftAndRight.includes(d.id))\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getCenterLeafColumns',\n          debug: () => table.options.debugAll ?? table.options.debugColumns,\n        }\n      ),\n    }\n  },\n}\n","import { RowModel } from '..'\nimport { TableFeature } from '../core/table'\nimport {\n  BuiltInSortingFn,\n  reSplitAlphaNumeric,\n  sortingFns,\n} from '../sortingFns'\n\nimport {\n  Column,\n  OnChangeFn,\n  Table,\n  Row,\n  Updater,\n  RowData,\n  SortingFns,\n} from '../types'\n\nimport { isFunction, makeStateUpdater } from '../utils'\n\nexport type SortDirection = 'asc' | 'desc'\n\nexport interface ColumnSort {\n  id: string\n  desc: boolean\n}\n\nexport type SortingState = ColumnSort[]\n\nexport interface SortingTableState {\n  sorting: SortingState\n}\n\nexport interface SortingFn<TData extends RowData> {\n  (rowA: Row<TData>, rowB: Row<TData>, columnId: string): number\n}\n\nexport type CustomSortingFns<TData extends RowData> = Record<\n  string,\n  SortingFn<TData>\n>\n\nexport type SortingFnOption<TData extends RowData> =\n  | 'auto'\n  | keyof SortingFns\n  | BuiltInSortingFn\n  | SortingFn<TData>\n\nexport interface SortingColumnDef<TData extends RowData> {\n  sortingFn?: SortingFnOption<TData>\n  sortDescFirst?: boolean\n  enableSorting?: boolean\n  enableMultiSort?: boolean\n  invertSorting?: boolean\n  sortUndefined?: false | -1 | 1\n}\n\nexport interface SortingColumn<TData extends RowData> {\n  getAutoSortingFn: () => SortingFn<TData>\n  getAutoSortDir: () => SortDirection\n  getSortingFn: () => SortingFn<TData>\n  getFirstSortDir: () => SortDirection\n  getNextSortingOrder: () => SortDirection | false\n  getCanSort: () => boolean\n  getCanMultiSort: () => boolean\n  getSortIndex: () => number\n  getIsSorted: () => false | SortDirection\n  clearSorting: () => void\n  toggleSorting: (desc?: boolean, isMulti?: boolean) => void\n  getToggleSortingHandler: () => undefined | ((event: unknown) => void)\n}\n\ninterface SortingOptionsBase {\n  manualSorting?: boolean\n  onSortingChange?: OnChangeFn<SortingState>\n  enableSorting?: boolean\n  enableSortingRemoval?: boolean\n  enableMultiRemove?: boolean\n  enableMultiSort?: boolean\n  sortDescFirst?: boolean\n  getSortedRowModel?: (table: Table<any>) => () => RowModel<any>\n  maxMultiSortColCount?: number\n  isMultiSortEvent?: (e: unknown) => boolean\n}\n\ntype ResolvedSortingFns = keyof SortingFns extends never\n  ? {\n      sortingFns?: Record<string, SortingFn<any>>\n    }\n  : {\n      sortingFns: Record<keyof SortingFns, SortingFn<any>>\n    }\n\nexport interface SortingOptions<TData extends RowData>\n  extends SortingOptionsBase,\n    ResolvedSortingFns {}\n\nexport interface SortingInstance<TData extends RowData> {\n  setSorting: (updater: Updater<SortingState>) => void\n  resetSorting: (defaultState?: boolean) => void\n  getPreSortedRowModel: () => RowModel<TData>\n  getSortedRowModel: () => RowModel<TData>\n  _getSortedRowModel?: () => RowModel<TData>\n}\n\n//\n\nexport const Sorting: TableFeature = {\n  getInitialState: (state): SortingTableState => {\n    return {\n      sorting: [],\n      ...state,\n    }\n  },\n\n  getDefaultColumnDef: <TData extends RowData>(): SortingColumnDef<TData> => {\n    return {\n      sortingFn: 'auto',\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): SortingOptions<TData> => {\n    return {\n      onSortingChange: makeStateUpdater('sorting', table),\n      isMultiSortEvent: (e: unknown) => {\n        return (e as MouseEvent).shiftKey\n      },\n    }\n  },\n\n  createColumn: <TData extends RowData, TValue>(\n    column: Column<TData, TValue>,\n    table: Table<TData>\n  ): SortingColumn<TData> => {\n    return {\n      getAutoSortingFn: () => {\n        const firstRows = table.getFilteredRowModel().flatRows.slice(10)\n\n        let isString = false\n\n        for (const row of firstRows) {\n          const value = row?.getValue(column.id)\n\n          if (Object.prototype.toString.call(value) === '[object Date]') {\n            return sortingFns.datetime\n          }\n\n          if (typeof value === 'string') {\n            isString = true\n\n            if (value.split(reSplitAlphaNumeric).length > 1) {\n              return sortingFns.alphanumeric\n            }\n          }\n        }\n\n        if (isString) {\n          return sortingFns.text\n        }\n\n        return sortingFns.basic\n      },\n      getAutoSortDir: () => {\n        const firstRow = table.getFilteredRowModel().flatRows[0]\n\n        const value = firstRow?.getValue(column.id)\n\n        if (typeof value === 'string') {\n          return 'asc'\n        }\n\n        return 'desc'\n      },\n      getSortingFn: () => {\n        if (!column) {\n          throw new Error()\n        }\n\n        return isFunction(column.columnDef.sortingFn)\n          ? column.columnDef.sortingFn\n          : column.columnDef.sortingFn === 'auto'\n          ? column.getAutoSortingFn()\n          : table.options.sortingFns?.[column.columnDef.sortingFn as string] ??\n            sortingFns[column.columnDef.sortingFn as BuiltInSortingFn]\n      },\n      toggleSorting: (desc, multi) => {\n        // if (column.columns.length) {\n        //   column.columns.forEach((c, i) => {\n        //     if (c.id) {\n        //       table.toggleColumnSorting(c.id, undefined, multi || !!i)\n        //     }\n        //   })\n        //   return\n        // }\n\n        // this needs to be outside of table.setSorting to be in sync with rerender\n        const nextSortingOrder = column.getNextSortingOrder()\n        const hasManualValue = typeof desc !== 'undefined' && desc !== null\n\n        table.setSorting(old => {\n          // Find any existing sorting for this column\n          const existingSorting = old?.find(d => d.id === column.id)\n          const existingIndex = old?.findIndex(d => d.id === column.id)\n\n          let newSorting: SortingState = []\n\n          // What should we do with this sort action?\n          let sortAction: 'add' | 'remove' | 'toggle' | 'replace'\n          let nextDesc = hasManualValue ? desc : nextSortingOrder === 'desc'\n\n          // Multi-mode\n          if (old?.length && column.getCanMultiSort() && multi) {\n            if (existingSorting) {\n              sortAction = 'toggle'\n            } else {\n              sortAction = 'add'\n            }\n          } else {\n            // Normal mode\n            if (old?.length && existingIndex !== old.length - 1) {\n              sortAction = 'replace'\n            } else if (existingSorting) {\n              sortAction = 'toggle'\n            } else {\n              sortAction = 'replace'\n            }\n          }\n\n          // Handle toggle states that will remove the sorting\n          if (sortAction === 'toggle') {\n            // If we are \"actually\" toggling (not a manual set value), should we remove the sorting?\n            if (!hasManualValue) {\n              // Is our intention to remove?\n              if (!nextSortingOrder) {\n                sortAction = 'remove'\n              }\n            }\n          }\n\n          if (sortAction === 'add') {\n            newSorting = [\n              ...old,\n              {\n                id: column.id,\n                desc: nextDesc,\n              },\n            ]\n            // Take latest n columns\n            newSorting.splice(\n              0,\n              newSorting.length -\n                (table.options.maxMultiSortColCount ?? Number.MAX_SAFE_INTEGER)\n            )\n          } else if (sortAction === 'toggle') {\n            // This flips (or sets) the\n            newSorting = old.map(d => {\n              if (d.id === column.id) {\n                return {\n                  ...d,\n                  desc: nextDesc,\n                }\n              }\n              return d\n            })\n          } else if (sortAction === 'remove') {\n            newSorting = old.filter(d => d.id !== column.id)\n          } else {\n            newSorting = [\n              {\n                id: column.id,\n                desc: nextDesc,\n              },\n            ]\n          }\n\n          return newSorting\n        })\n      },\n\n      getFirstSortDir: () => {\n        const sortDescFirst =\n          column.columnDef.sortDescFirst ??\n          table.options.sortDescFirst ??\n          column.getAutoSortDir() === 'desc'\n        return sortDescFirst ? 'desc' : 'asc'\n      },\n\n      getNextSortingOrder: (multi?: boolean) => {\n        const firstSortDirection = column.getFirstSortDir()\n        const isSorted = column.getIsSorted()\n\n        if (!isSorted) {\n          return firstSortDirection\n        }\n\n        if (\n          isSorted !== firstSortDirection &&\n          (table.options.enableSortingRemoval ?? true) && // If enableSortRemove, enable in general\n          (multi ? table.options.enableMultiRemove ?? true : true) // If multi, don't allow if enableMultiRemove))\n        ) {\n          return false\n        }\n        return isSorted === 'desc' ? 'asc' : 'desc'\n      },\n\n      getCanSort: () => {\n        return (\n          (column.columnDef.enableSorting ?? true) &&\n          (table.options.enableSorting ?? true) &&\n          !!column.accessorFn\n        )\n      },\n\n      getCanMultiSort: () => {\n        return (\n          column.columnDef.enableMultiSort ??\n          table.options.enableMultiSort ??\n          !!column.accessorFn\n        )\n      },\n\n      getIsSorted: () => {\n        const columnSort = table\n          .getState()\n          .sorting?.find(d => d.id === column.id)\n\n        return !columnSort ? false : columnSort.desc ? 'desc' : 'asc'\n      },\n\n      getSortIndex: () =>\n        table.getState().sorting?.findIndex(d => d.id === column.id) ?? -1,\n\n      clearSorting: () => {\n        //clear sorting for just 1 column\n        table.setSorting(old =>\n          old?.length ? old.filter(d => d.id !== column.id) : []\n        )\n      },\n\n      getToggleSortingHandler: () => {\n        const canSort = column.getCanSort()\n\n        return (e: unknown) => {\n          if (!canSort) return\n          ;(e as any).persist?.()\n          column.toggleSorting?.(\n            undefined,\n            column.getCanMultiSort()\n              ? table.options.isMultiSortEvent?.(e)\n              : false\n          )\n        }\n      },\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): SortingInstance<TData> => {\n    return {\n      setSorting: updater => table.options.onSortingChange?.(updater),\n      resetSorting: defaultState => {\n        table.setSorting(defaultState ? [] : table.initialState?.sorting ?? [])\n      },\n      getPreSortedRowModel: () => table.getGroupedRowModel(),\n      getSortedRowModel: () => {\n        if (!table._getSortedRowModel && table.options.getSortedRowModel) {\n          table._getSortedRowModel = table.options.getSortedRowModel(table)\n        }\n\n        if (table.options.manualSorting || !table._getSortedRowModel) {\n          return table.getPreSortedRowModel()\n        }\n\n        return table._getSortedRowModel()\n      },\n    }\n  },\n}\n","import { TableFeature } from '../core/table'\nimport { OnChangeFn, Table, RowModel, Updater, RowData } from '../types'\nimport { functionalUpdate, makeStateUpdater, memo } from '../utils'\n\nexport interface PaginationState {\n  pageIndex: number\n  pageSize: number\n}\n\nexport interface PaginationTableState {\n  pagination: PaginationState\n}\n\nexport interface PaginationInitialTableState {\n  pagination?: Partial<PaginationState>\n}\n\nexport interface PaginationOptions {\n  pageCount?: number\n  manualPagination?: boolean\n  onPaginationChange?: OnChangeFn<PaginationState>\n  autoResetPageIndex?: boolean\n  getPaginationRowModel?: (table: Table<any>) => () => RowModel<any>\n}\n\nexport interface PaginationDefaultOptions {\n  onPaginationChange: OnChangeFn<PaginationState>\n}\n\nexport interface PaginationInstance<TData extends RowData> {\n  _autoResetPageIndex: () => void\n  setPagination: (updater: Updater<PaginationState>) => void\n  resetPagination: (defaultState?: boolean) => void\n  setPageIndex: (updater: Updater<number>) => void\n  resetPageIndex: (defaultState?: boolean) => void\n  setPageSize: (updater: Updater<number>) => void\n  resetPageSize: (defaultState?: boolean) => void\n  setPageCount: (updater: Updater<number>) => void\n  getPageOptions: () => number[]\n  getCanPreviousPage: () => boolean\n  getCanNextPage: () => boolean\n  previousPage: () => void\n  nextPage: () => void\n  getPrePaginationRowModel: () => RowModel<TData>\n  getPaginationRowModel: () => RowModel<TData>\n  _getPaginationRowModel?: () => RowModel<TData>\n  getPageCount: () => number\n}\n\n//\n\nconst defaultPageIndex = 0\nconst defaultPageSize = 10\n\nconst getDefaultPaginationState = (): PaginationState => ({\n  pageIndex: defaultPageIndex,\n  pageSize: defaultPageSize,\n})\n\nexport const Pagination: TableFeature = {\n  getInitialState: (state): PaginationTableState => {\n    return {\n      ...state,\n      pagination: {\n        ...getDefaultPaginationState(),\n        ...state?.pagination,\n      },\n    }\n  },\n\n  getDefaultOptions: <TData extends RowData>(\n    table: Table<TData>\n  ): PaginationDefaultOptions => {\n    return {\n      onPaginationChange: makeStateUpdater('pagination', table),\n    }\n  },\n\n  createTable: <TData extends RowData>(\n    table: Table<TData>\n  ): PaginationInstance<TData> => {\n    let registered = false\n    let queued = false\n\n    return {\n      _autoResetPageIndex: () => {\n        if (!registered) {\n          table._queue(() => {\n            registered = true\n          })\n          return\n        }\n\n        if (\n          table.options.autoResetAll ??\n          table.options.autoResetPageIndex ??\n          !table.options.manualPagination\n        ) {\n          if (queued) return\n          queued = true\n          table._queue(() => {\n            table.resetPageIndex()\n            queued = false\n          })\n        }\n      },\n      setPagination: updater => {\n        const safeUpdater: Updater<PaginationState> = old => {\n          let newState = functionalUpdate(updater, old)\n\n          return newState\n        }\n\n        return table.options.onPaginationChange?.(safeUpdater)\n      },\n      resetPagination: defaultState => {\n        table.setPagination(\n          defaultState\n            ? getDefaultPaginationState()\n            : table.initialState.pagination ?? getDefaultPaginationState()\n        )\n      },\n      setPageIndex: updater => {\n        table.setPagination(old => {\n          let pageIndex = functionalUpdate(updater, old.pageIndex)\n\n          const maxPageIndex =\n            typeof table.options.pageCount === 'undefined' ||\n            table.options.pageCount === -1\n              ? Number.MAX_SAFE_INTEGER\n              : table.options.pageCount - 1\n\n          pageIndex = Math.max(0, Math.min(pageIndex, maxPageIndex))\n\n          return {\n            ...old,\n            pageIndex,\n          }\n        })\n      },\n      resetPageIndex: defaultState => {\n        table.setPageIndex(\n          defaultState\n            ? defaultPageIndex\n            : table.initialState?.pagination?.pageIndex ?? defaultPageIndex\n        )\n      },\n      resetPageSize: defaultState => {\n        table.setPageSize(\n          defaultState\n            ? defaultPageSize\n            : table.initialState?.pagination?.pageSize ?? defaultPageSize\n        )\n      },\n      setPageSize: updater => {\n        table.setPagination(old => {\n          const pageSize = Math.max(1, functionalUpdate(updater, old.pageSize))\n          const topRowIndex = old.pageSize * old.pageIndex!\n          const pageIndex = Math.floor(topRowIndex / pageSize)\n\n          return {\n            ...old,\n            pageIndex,\n            pageSize,\n          }\n        })\n      },\n      setPageCount: updater =>\n        table.setPagination(old => {\n          let newPageCount = functionalUpdate(\n            updater,\n            table.options.pageCount ?? -1\n          )\n\n          if (typeof newPageCount === 'number') {\n            newPageCount = Math.max(-1, newPageCount)\n          }\n\n          return {\n            ...old,\n            pageCount: newPageCount,\n          }\n        }),\n\n      getPageOptions: memo(\n        () => [table.getPageCount()],\n        pageCount => {\n          let pageOptions: number[] = []\n          if (pageCount && pageCount > 0) {\n            pageOptions = [...new Array(pageCount)].fill(null).map((_, i) => i)\n          }\n          return pageOptions\n        },\n        {\n          key: process.env.NODE_ENV === 'development' && 'getPageOptions',\n          debug: () => table.options.debugAll ?? table.options.debugTable,\n        }\n      ),\n\n      getCanPreviousPage: () => table.getState().pagination.pageIndex > 0,\n\n      getCanNextPage: () => {\n        const { pageIndex } = table.getState().pagination\n\n        const pageCount = table.getPageCount()\n\n        if (pageCount === -1) {\n          return true\n        }\n\n        if (pageCount === 0) {\n          return false\n        }\n\n        return pageIndex < pageCount - 1\n      },\n\n      previousPage: () => {\n        return table.setPageIndex(old => old - 1)\n      },\n\n      nextPage: () => {\n        return table.setPageIndex(old => {\n          return old + 1\n        })\n      },\n\n      getPrePaginationRowModel: () => table.getExpandedRowModel(),\n      getPaginationRowModel: () => {\n        if (\n          !table._getPaginationRowModel &&\n          table.options.getPaginationRowModel\n        ) {\n          table._getPaginationRowModel =\n            table.options.getPaginationRowModel(table)\n        }\n\n        if (table.options.manualPagination || !table._getPaginationRowModel) {\n          return table.getPrePaginationRowModel()\n        }\n\n        return table._getPaginationRowModel()\n      },\n\n      getPageCount: () => {\n        return (\n          table.options.pageCount ??\n          Math.ceil(\n            table.getPrePaginationRowModel().rows.length /\n              table.getState().pagination.pageSize\n          )\n        )\n      },\n    }\n  },\n}\n","import {\n  Column,\n  Table,\n  AccessorFn,\n  ColumnDef,\n  RowData,\n  ColumnDefResolved,\n} from '../types'\nimport { memo } from '../utils'\n\nexport interface CoreColumn<TData extends RowData, TValue> {\n  id: string\n  depth: number\n  accessorFn?: AccessorFn<TData, TValue>\n  columnDef: ColumnDef<TData, TValue>\n  columns: Column<TData, TValue>[]\n  parent?: Column<TData, TValue>\n  getFlatColumns: () => Column<TData, TValue>[]\n  getLeafColumns: () => Column<TData, TValue>[]\n}\n\nexport function createColumn<TData extends RowData, TValue>(\n  table: Table<TData>,\n  columnDef: ColumnDef<TData, TValue>,\n  depth: number,\n  parent?: Column<TData, TValue>\n): Column<TData, TValue> {\n  const defaultColumn = table._getDefaultColumnDef()\n\n  const resolvedColumnDef = {\n    ...defaultColumn,\n    ...columnDef,\n  } as ColumnDefResolved<TData>\n\n  const accessorKey = resolvedColumnDef.accessorKey\n\n  let id =\n    resolvedColumnDef.id ??\n    (accessorKey ? accessorKey.replace('.', '_') : undefined) ??\n    (typeof resolvedColumnDef.header === 'string'\n      ? resolvedColumnDef.header\n      : undefined)\n\n  let accessorFn: AccessorFn<TData> | undefined\n\n  if (resolvedColumnDef.accessorFn) {\n    accessorFn = resolvedColumnDef.accessorFn\n  } else if (accessorKey) {\n    // Support deep accessor keys\n    if (accessorKey.includes('.')) {\n      accessorFn = (originalRow: TData) => {\n        let result = originalRow as Record<string, any>\n\n        for (const key of accessorKey.split('.')) {\n          result = result?.[key]\n          if (process.env.NODE_ENV !== 'production' && result === undefined) {\n            console.warn(\n              `\"${key}\" in deeply nested key \"${accessorKey}\" returned undefined.`\n            )\n          }\n        }\n\n        return result\n      }\n    } else {\n      accessorFn = (originalRow: TData) =>\n        (originalRow as any)[resolvedColumnDef.accessorKey]\n    }\n  }\n\n  if (!id) {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        resolvedColumnDef.accessorFn\n          ? `Columns require an id when using an accessorFn`\n          : `Columns require an id when using a non-string header`\n      )\n    }\n    throw new Error()\n  }\n\n  let column: CoreColumn<TData, any> = {\n    id: `${String(id)}`,\n    accessorFn,\n    parent: parent as any,\n    depth,\n    columnDef: resolvedColumnDef as ColumnDef<TData, any>,\n    columns: [],\n    getFlatColumns: memo(\n      () => [true],\n      () => {\n        return [\n          column as Column<TData, TValue>,\n          ...column.columns?.flatMap(d => d.getFlatColumns()),\n        ]\n      },\n      {\n        key: process.env.NODE_ENV === 'production' && 'column.getFlatColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n    getLeafColumns: memo(\n      () => [table._getOrderColumnsFn()],\n      orderColumns => {\n        if (column.columns?.length) {\n          let leafColumns = column.columns.flatMap(column =>\n            column.getLeafColumns()\n          )\n\n          return orderColumns(leafColumns)\n        }\n\n        return [column as Column<TData, TValue>]\n      },\n      {\n        key: process.env.NODE_ENV === 'production' && 'column.getLeafColumns',\n        debug: () => table.options.debugAll ?? table.options.debugColumns,\n      }\n    ),\n  }\n\n  column = table._features.reduce((obj, feature) => {\n    return Object.assign(obj, feature.createColumn?.(column, table))\n  }, column)\n\n  // Yes, we have to convert table to uknown, because we know more than the compiler here.\n  return column as Column<TData, TValue>\n}\n","import { RowData, Cell, Row, Table } from '../types'\nimport { flattenBy, memo } from '../utils'\nimport { createCell } from './cell'\n\nexport interface CoreRow<TData extends RowData> {\n  id: string\n  index: number\n  original: TData\n  depth: number\n  _valuesCache: Record<string, unknown>\n  _uniqueValuesCache: Record<string, unknown>\n  getValue: <TValue>(columnId: string) => TValue\n  getUniqueValues: <TValue>(columnId: string) => TValue[]\n  renderValue: <TValue>(columnId: string) => TValue\n  subRows: Row<TData>[]\n  getLeafRows: () => Row<TData>[]\n  originalSubRows?: TData[]\n  getAllCells: () => Cell<TData, unknown>[]\n  _getAllCellsByColumnId: () => Record<string, Cell<TData, unknown>>\n}\n\nexport const createRow = <TData extends RowData>(\n  table: Table<TData>,\n  id: string,\n  original: TData,\n  rowIndex: number,\n  depth: number,\n  subRows?: Row<TData>[]\n): Row<TData> => {\n  let row: CoreRow<TData> = {\n    id,\n    index: rowIndex,\n    original,\n    depth,\n    _valuesCache: {},\n    _uniqueValuesCache: {},\n    getValue: columnId => {\n      if (row._valuesCache.hasOwnProperty(columnId)) {\n        return row._valuesCache[columnId]\n      }\n\n      const column = table.getColumn(columnId)\n\n      if (!column?.accessorFn) {\n        return undefined\n      }\n\n      row._valuesCache[columnId] = column.accessorFn(\n        row.original as TData,\n        rowIndex\n      )\n\n      return row._valuesCache[columnId] as any\n    },\n    getUniqueValues: columnId => {\n      if (row._uniqueValuesCache.hasOwnProperty(columnId)) {\n        return row._uniqueValuesCache[columnId]\n      }\n\n      const column = table.getColumn(columnId)\n\n      if (!column?.accessorFn) {\n        return undefined\n      }\n\n      if (!column.columnDef.getUniqueValues) {\n        row._uniqueValuesCache[columnId] = [row.getValue(columnId)]\n        return row._uniqueValuesCache[columnId]\n      }\n\n      row._uniqueValuesCache[columnId] = column.columnDef.getUniqueValues(\n        row.original as TData,\n        rowIndex\n      )\n\n      return row._uniqueValuesCache[columnId] as any\n    },\n    renderValue: columnId =>\n      row.getValue(columnId) ?? table.options.renderFallbackValue,\n    subRows: subRows ?? [],\n    getLeafRows: () => flattenBy(row.subRows, d => d.subRows),\n    getAllCells: memo(\n      () => [table.getAllLeafColumns()],\n      leafColumns => {\n        return leafColumns.map(column => {\n          return createCell(table, row as Row<TData>, column, column.id)\n        })\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'row.getAllCells',\n        debug: () => table.options.debugAll ?? table.options.debugRows,\n      }\n    ),\n\n    _getAllCellsByColumnId: memo(\n      () => [row.getAllCells()],\n      allCells => {\n        return allCells.reduce((acc, cell) => {\n          acc[cell.column.id] = cell\n          return acc\n        }, {} as Record<string, Cell<TData, unknown>>)\n      },\n      {\n        key:\n          process.env.NODE_ENV === 'production' && 'row.getAllCellsByColumnId',\n        debug: () => table.options.debugAll ?? table.options.debugRows,\n      }\n    ),\n  }\n\n  for (let i = 0; i < table._features.length; i++) {\n    const feature = table._features[i]\n    Object.assign(row, feature?.createRow?.(row, table))\n  }\n\n  return row as Row<TData>\n}\n","import { RowData, Cell, Column, Row, Table } from '../types'\nimport { Getter, memo } from '../utils'\n\nexport interface CellContext<TData extends RowData, TValue> {\n  table: Table<TData>\n  column: Column<TData, TValue>\n  row: Row<TData>\n  cell: Cell<TData, TValue>\n  getValue: Getter<TValue>\n  renderValue: Getter<TValue | null>\n}\n\nexport interface CoreCell<TData extends RowData, TValue> {\n  id: string\n  getValue: CellContext<TData, TValue>['getValue']\n  renderValue: CellContext<TData, TValue>['renderValue']\n  row: Row<TData>\n  column: Column<TData, TValue>\n  getContext: () => CellContext<TData, TValue>\n}\n\nexport function createCell<TData extends RowData, TValue>(\n  table: Table<TData>,\n  row: Row<TData>,\n  column: Column<TData, TValue>,\n  columnId: string\n): Cell<TData, TValue> {\n  const getRenderValue = () =>\n    cell.getValue() ?? table.options.renderFallbackValue\n\n  const cell: CoreCell<TData, TValue> = {\n    id: `${row.id}_${column.id}`,\n    row,\n    column,\n    getValue: () => row.getValue(columnId),\n    renderValue: getRenderValue,\n    getContext: memo(\n      () => [table, column, row, cell],\n      (table, column, row, cell) => ({\n        table,\n        column,\n        row,\n        cell: cell as Cell<TData, TValue>,\n        getValue: cell.getValue,\n        renderValue: cell.renderValue,\n      }),\n      {\n        key: process.env.NODE_ENV === 'development' && 'cell.getContext',\n        debug: () => table.options.debugAll,\n      }\n    ),\n  }\n\n  table._features.forEach(feature => {\n    Object.assign(\n      cell,\n      feature.createCell?.(\n        cell as Cell<TData, TValue>,\n        column,\n        row as Row<TData>,\n        table\n      )\n    )\n  }, {})\n\n  return cell as Cell<TData, TValue>\n}\n","import { createRow } from '../core/row'\nimport { Table, Row, RowModel, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getCoreRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.options.data],\n      (\n        data\n      ): {\n        rows: Row<TData>[]\n        flatRows: Row<TData>[]\n        rowsById: Record<string, Row<TData>>\n      } => {\n        const rowModel: RowModel<TData> = {\n          rows: [],\n          flatRows: [],\n          rowsById: {},\n        }\n\n        const accessRows = (\n          originalRows: TData[],\n          depth = 0,\n          parent?: Row<TData>\n        ): Row<TData>[] => {\n          const rows = [] as Row<TData>[]\n\n          for (let i = 0; i < originalRows.length; i++) {\n            // This could be an expensive check at scale, so we should move it somewhere else, but where?\n            // if (!id) {\n            //   if (process.env.NODE_ENV !== 'production') {\n            //     throw new Error(`getRowId expected an ID, but got ${id}`)\n            //   }\n            // }\n\n            // Make the row\n            const row = createRow(\n              table,\n              table._getRowId(originalRows[i]!, i, parent),\n              originalRows[i]!,\n              i,\n              depth\n            )\n\n            // Keep track of every row in a flat array\n            rowModel.flatRows.push(row)\n            // Also keep track of every row by its ID\n            rowModel.rowsById[row.id] = row\n            // Push table row into parent\n            rows.push(row)\n\n            // Get the original subrows\n            if (table.options.getSubRows) {\n              row.originalSubRows = table.options.getSubRows(\n                originalRows[i]!,\n                i\n              )\n\n              // Then recursively access them\n              if (row.originalSubRows?.length) {\n                row.subRows = accessRows(row.originalSubRows, depth + 1, row)\n              }\n            }\n          }\n\n          return rows\n        }\n\n        rowModel.rows = accessRows(data)\n\n        return rowModel\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._autoResetPageIndex()\n        },\n      }\n    )\n}\n","import { Table, Row, RowModel, RowData } from '../types'\nimport { SortingFn } from '../features/Sorting'\nimport { memo } from '../utils'\n\nexport function getSortedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [table.getState().sorting, table.getPreSortedRowModel()],\n      (sorting, rowModel) => {\n        if (!rowModel.rows.length || !sorting?.length) {\n          return rowModel\n        }\n\n        const sortingState = table.getState().sorting\n\n        const sortedFlatRows: Row<TData>[] = []\n\n        // Filter out sortings that correspond to non existing columns\n        const availableSorting = sortingState.filter(sort =>\n          table.getColumn(sort.id)?.getCanSort()\n        )\n\n        const columnInfoById: Record<\n          string,\n          {\n            sortUndefined?: false | -1 | 1\n            invertSorting?: boolean\n            sortingFn: SortingFn<TData>\n          }\n        > = {}\n\n        availableSorting.forEach(sortEntry => {\n          const column = table.getColumn(sortEntry.id)\n          if(!column) return\n\n          columnInfoById[sortEntry.id] = {\n            sortUndefined: column.columnDef.sortUndefined,\n            invertSorting: column.columnDef.invertSorting,\n            sortingFn: column.getSortingFn(),\n          }\n        })\n\n        const sortData = (rows: Row<TData>[]) => {\n          // This will also perform a stable sorting using the row index\n          // if needed.\n          const sortedData = [...rows]\n\n          sortedData.sort((rowA, rowB) => {\n            for (let i = 0; i < availableSorting.length; i += 1) {\n              const sortEntry = availableSorting[i]!\n              const columnInfo = columnInfoById[sortEntry.id]!\n              const isDesc = sortEntry?.desc ?? false\n\n              if (columnInfo.sortUndefined) {\n                const aValue = rowA.getValue(sortEntry.id)\n                const bValue = rowB.getValue(sortEntry.id)\n\n                const aUndefined = typeof aValue === 'undefined'\n                const bUndefined = typeof bValue === 'undefined'\n\n                if (aUndefined || bUndefined) {\n                  return aUndefined && bUndefined\n                    ? 0\n                    : aUndefined\n                    ? columnInfo.sortUndefined\n                    : -columnInfo.sortUndefined\n                }\n              }\n\n              // This function should always return in ascending order\n              let sortInt = columnInfo.sortingFn(rowA, rowB, sortEntry.id)\n\n              if (sortInt !== 0) {\n                if (isDesc) {\n                  sortInt *= -1\n                }\n\n                if (columnInfo.invertSorting) {\n                  sortInt *= -1\n                }\n\n                return sortInt\n              }\n            }\n\n            return rowA.index - rowB.index\n          })\n\n          // If there are sub-rows, sort them\n          sortedData.forEach(row => {\n            sortedFlatRows.push(row)\n            if (row.subRows?.length) {\n              row.subRows = sortData(row.subRows)\n            }\n          })\n\n          return sortedData\n        }\n\n        return {\n          rows: sortData(rowModel.rows),\n          flatRows: sortedFlatRows,\n          rowsById: rowModel.rowsById,\n        }\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getSortedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n        onChange: () => {\n          table._autoResetPageIndex()\n        },\n      }\n    )\n}\n","import { Table, Row, RowModel, RowData } from '../types'\nimport { memo } from '../utils'\n\nexport function getExpandedRowModel<TData extends RowData>(): (\n  table: Table<TData>\n) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getState().expanded,\n        table.getPreExpandedRowModel(),\n        table.options.paginateExpandedRows,\n      ],\n      (expanded, rowModel, paginateExpandedRows) => {\n        if (\n          !rowModel.rows.length ||\n          (expanded !== true && !Object.keys(expanded ?? {}).length)\n        ) {\n          return rowModel\n        }\n\n        if (!paginateExpandedRows) {\n          // Only expand rows at this point if they are being paginated\n          return rowModel\n        }\n\n        return expandRows(rowModel)\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getExpandedRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n      }\n    )\n}\n\nexport function expandRows<TData extends RowData>(rowModel: RowModel<TData>) {\n  const expandedRows: Row<TData>[] = []\n\n  const handleRow = (row: Row<TData>) => {\n    expandedRows.push(row)\n\n    if (row.subRows?.length && row.getIsExpanded()) {\n      row.subRows.forEach(handleRow)\n    }\n  }\n\n  rowModel.rows.forEach(handleRow)\n\n  return {\n    rows: expandedRows,\n    flatRows: rowModel.flatRows,\n    rowsById: rowModel.rowsById,\n  }\n}\n","import { Table, RowModel, Row, RowData } from '../types'\nimport { memo } from '../utils'\nimport { expandRows } from './getExpandedRowModel'\n\nexport function getPaginationRowModel<TData extends RowData>(opts?: {\n  initialSync: boolean\n}): (table: Table<TData>) => () => RowModel<TData> {\n  return table =>\n    memo(\n      () => [\n        table.getState().pagination,\n        table.getPrePaginationRowModel(),\n        table.options.paginateExpandedRows\n          ? undefined\n          : table.getState().expanded,\n      ],\n      (pagination, rowModel) => {\n        if (!rowModel.rows.length) {\n          return rowModel\n        }\n\n        const { pageSize, pageIndex } = pagination\n        let { rows, flatRows, rowsById } = rowModel\n        const pageStart = pageSize * pageIndex\n        const pageEnd = pageStart + pageSize\n\n        rows = rows.slice(pageStart, pageEnd)\n\n        let paginatedRowModel: RowModel<TData>\n\n        if (!table.options.paginateExpandedRows) {\n          paginatedRowModel = expandRows({\n            rows,\n            flatRows,\n            rowsById,\n          })\n        } else {\n          paginatedRowModel = {\n            rows,\n            flatRows,\n            rowsById,\n          }\n        }\n\n        paginatedRowModel.flatRows = []\n\n        const handleRow = (row: Row<TData>) => {\n          paginatedRowModel.flatRows.push(row)\n          if (row.subRows.length) {\n            row.subRows.forEach(handleRow)\n          }\n        }\n\n        paginatedRowModel.rows.forEach(handleRow)\n\n        return paginatedRowModel\n      },\n      {\n        key: process.env.NODE_ENV === 'development' && 'getPaginationRowModel',\n        debug: () => table.options.debugAll ?? table.options.debugTable,\n      }\n    )\n}\n"],"names":["flexRender","Comp","props","component","proto","Object","getPrototypeOf","prototype","isReactComponent","isClassComponent","$$typeof","includes","description","isExoticComponent","React","useReactTable","options","resolvedOptions","state","onStateChange","renderFallbackValue","current","createTable","tableRef","initialState","setState","setOptions","prev","updater","functionalUpdate","input","makeStateUpdater","key","instance","old","isFunction","d","Function","flattenBy","arr","getChildren","flat","subArr","recurse","forEach","item","push","children","length","memo","getDeps","fn","opts","result","deps","depTime","debug","Date","now","resultTime","newDeps","some","dep","index","onChange","depEndTime","Math","round","resultEndTime","resultFpsPercentage","pad","str","num","String","console","info","max","min","createHeader","table","column","header","id","isPlaceholder","placeholderId","depth","subHeaders","colSpan","rowSpan","headerGroup","getLeafHeaders","leafHeaders","h","recurseHeader","map","getContext","_features","feature","assign","Headers","getHeaderGroups","getAllColumns","getVisibleLeafColumns","getState","columnPinning","left","right","allColumns","leafColumns","leftColumns","columnId","find","filter","Boolean","rightColumns","centerColumns","buildHeaderGroups","process","debugAll","debugHeaders","getCenterHeaderGroups","getLeftHeaderGroups","getRightHeaderGroups","getFooterGroups","headerGroups","reverse","getLeftFooterGroups","getCenterFooterGroups","getRightFooterGroups","getFlatHeaders","headers","getLeftFlatHeaders","getCenterFlatHeaders","getRightFlatHeaders","getCenterLeafHeaders","flatHeaders","_header$subHeaders","getLeftLeafHeaders","_header$subHeaders2","getRightLeafHeaders","_header$subHeaders3","center","_left$","_right$","columnsToGroup","headerFamily","maxDepth","findMaxDepth","columns","getIsVisible","createHeaderGroup","headersToGroup","join","pendingParentHeaders","headerToGroup","latestPendingParentHeader","parent","undefined","recurseHeadersForSpans","childRowSpans","childColSpan","_ref","childRowSpan","_headerGroups$","defaultColumnSizing","size","minSize","maxSize","Number","MAX_SAFE_INTEGER","ColumnSizing","getDefaultColumnDef","getInitialState","columnSizing","columnSizingInfo","startOffset","startSize","deltaOffset","deltaPercentage","isResizingColumn","columnSizingStart","getDefaultOptions","columnResizeMode","onColumnSizingChange","onColumnSizingInfoChange","createColumn","getSize","columnSize","columnDef","getStart","position","getLeftVisibleLeafColumns","getRightVisibleLeafColumns","findIndex","prevSiblingColumn","resetSize","setColumnSizing","_ref2","rest","getCanResize","enableResizing","enableColumnResizing","getIsResizing","sum","prevSiblingHeader","getResizeHandler","getColumn","canResize","e","persist","isTouchStartEvent","touches","clientX","newColumnSizing","updateOffset","eventType","clientXPos","setColumnSizingInfo","_ref3","headerSize","onMove","onEnd","mouseEvents","moveHandler","upHandler","document","removeEventListener","touchEvents","cancelable","preventDefault","stopPropagation","_e$touches$","passiveIfSupported","passiveSupported","supported","passive","noop","window","addEventListener","err","passiveEventSupported","resetColumnSizing","defaultState","resetHeaderSizeInfo","getDefaultColumnSizingInfoState","getTotalSize","_table$getHeaderGroup2","reduce","getLeftTotalSize","_table$getLeftHeaderG2","getCenterTotalSize","_table$getCenterHeade2","getRightTotalSize","_table$getRightHeader2","type","Expanding","expanded","onExpandedChange","paginateExpandedRows","registered","queued","_autoResetExpanded","autoResetAll","autoResetExpanded","manualExpanding","_queue","resetExpanded","setExpanded","toggleAllRowsExpanded","getIsAllRowsExpanded","getCanSomeRowsExpand","getRowModel","flatRows","row","getCanExpand","getToggleAllRowsExpandedHandler","getIsSomeRowsExpanded","values","keys","getIsExpanded","getExpandedDepth","rowsById","splitId","split","getPreExpandedRowModel","getSortedRowModel","getExpandedRowModel","_getExpandedRowModel","createRow","toggleExpanded","exists","oldExpanded","rowId","getIsRowExpanded","getRowCanExpand","enableExpanding","subRows","_row$subRows","getToggleExpandedHandler","canExpand","includesString","filterValue","search","toLowerCase","getValue","autoRemove","val","testFalsey","includesStringSensitive","_row$getValue2","equalsString","arrIncludes","_row$getValue4","arrIncludesAll","_row$getValue5","arrIncludesSome","_row$getValue6","equals","weakEquals","inNumberRange","rowValue","resolveFilterValue","unsafeMin","unsafeMax","parsedMin","parseFloat","parsedMax","isNaN","Infinity","temp","filterFns","shouldAutoRemoveFilter","filterFn","value","aggregationFns","_leafRows","childRows","next","nextValue","extent","mean","leafRows","count","median","unique","Array","from","Set","uniqueCount","_columnId","RowSelection","rowSelection","onRowSelectionChange","enableRowSelection","enableMultiRowSelection","enableSubRowSelection","setRowSelection","resetRowSelection","toggleAllRowsSelected","getIsAllRowsSelected","preGroupedFlatRows","getPreGroupedRowModel","getCanSelect","toggleAllPageRowsSelected","resolvedValue","getIsAllPageRowsSelected","rows","mutateRowIsSelected","getPreSelectedRowModel","getCoreRowModel","getSelectedRowModel","rowModel","selectRowsFn","debugTable","getFilteredSelectedRowModel","getFilteredRowModel","getGroupedSelectedRowModel","isAllRowsSelected","paginationFlatRows","getPaginationRowModel","isAllPageRowsSelected","getIsSomeRowsSelected","totalSelected","getIsSomePageRowsSelected","getIsSelected","getIsSomeSelected","getToggleAllRowsSelectedHandler","target","checked","getToggleAllPageRowsSelectedHandler","toggleSelected","isSelected","selectedRowIds","isRowSelected","isSubRowSelected","getIsAllSubRowsSelected","getCanSelectSubRows","getCanMultiSelect","getToggleSelectedHandler","canSelect","_target","getRow","newSelectedFlatRows","newSelectedRowsById","recurseRows","selection","allChildrenSelected","someSelected","subRow","reSplitAlphaNumeric","compareBasic","a","b","toString","compareAlphanumeric","aStr","bStr","aa","shift","bb","an","parseInt","bn","combo","sort","sortingFns","alphanumeric","rowA","rowB","alphanumericCaseSensitive","text","textCaseSensitive","datetime","basic","features","columnVisibility","onColumnVisibilityChange","toggleVisibility","getCanHide","setColumnVisibility","enableHiding","getToggleVisibilityHandler","_getAllVisibleCells","getAllCells","cells","cell","debugRows","getVisibleCells","getLeftVisibleCells","getCenterVisibleCells","getRightVisibleCells","makeVisibleColumnsMethod","getColumns","debugColumns","getVisibleFlatColumns","getAllFlatColumns","getAllLeafColumns","getLeftLeafColumns","getRightLeafColumns","getCenterVisibleLeafColumns","getCenterLeafColumns","resetColumnVisibility","toggleAllColumnsVisible","getIsAllColumnsVisible","obj","getIsSomeColumnsVisible","getToggleAllColumnsVisibilityHandler","columnOrder","onColumnOrderChange","setColumnOrder","resetColumnOrder","_getOrderColumnsFn","grouping","groupedColumnMode","orderedColumns","columnOrderCopy","columnsCopy","targetColumnId","foundIndex","splice","nonGroupingColumns","col","groupingColumns","g","orderColumns","onColumnPinningChange","pin","columnIds","getLeafColumns","setColumnPinning","getCanPin","enablePinning","getIsPinned","leafColumnIds","isLeft","isRight","getPinnedIndex","_table$getState$colum3","indexOf","allCells","leftAndRight","resetColumnPinning","getDefaultPinningState","getIsSomeColumnsPinned","pinningState","_pinningState$positio","columnFilters","globalFilter","onColumnFiltersChange","onGlobalFilterChange","filterFromLeafRows","maxLeafRowFilterDepth","globalFilterFn","getColumnCanGlobalFilter","_table$getCoreRowMode","_getAllCellsByColumnId","_table$getCoreRowMode2","getAutoFilterFn","firstRow","isArray","getFilterFn","getCanFilter","enableColumnFilter","enableColumnFilters","enableFilters","accessorFn","getCanGlobalFilter","enableGlobalFilter","getIsFiltered","getFilterIndex","getFilterValue","_table$getState$colum","_table$getState$colum4","setFilterValue","setColumnFilters","previousfilter","newFilter","newFilterObj","_getFacetedRowModel","getFacetedRowModel","getPreFilteredRowModel","_getFacetedUniqueValues","getFacetedUniqueValues","Map","_getFacetedMinMaxValues","getFacetedMinMaxValues","columnFiltersMeta","getGlobalAutoFilterFn","getGlobalFilterFn","_table$options$filter4","_functionalUpdate","setGlobalFilter","resetGlobalFilter","resetColumnFilters","_getFilteredRowModel","manualFiltering","_getGlobalFacetedRowModel","getGlobalFacetedRowModel","_getGlobalFacetedUniqueValues","getGlobalFacetedUniqueValues","_getGlobalFacetedMinMaxValues","getGlobalFacetedMinMaxValues","sorting","sortingFn","onSortingChange","isMultiSortEvent","shiftKey","getAutoSortingFn","firstRows","slice","isString","call","getAutoSortDir","getSortingFn","Error","toggleSorting","desc","multi","nextSortingOrder","getNextSortingOrder","hasManualValue","setSorting","sortAction","existingSorting","existingIndex","newSorting","nextDesc","getCanMultiSort","maxMultiSortColCount","getFirstSortDir","sortDescFirst","firstSortDirection","isSorted","getIsSorted","enableSortingRemoval","enableMultiRemove","getCanSort","enableSorting","enableMultiSort","columnSort","getSortIndex","_table$getState$sorti3","clearSorting","getToggleSortingHandler","canSort","resetSorting","getPreSortedRowModel","getGroupedRowModel","_getSortedRowModel","manualSorting","aggregatedCell","_props$getValue","aggregationFn","onGroupingChange","toggleGrouping","setGrouping","getCanGroup","enableGrouping","getIsGrouped","getGroupedIndex","getToggleGroupingHandler","canGroup","getAutoAggregationFn","getAggregationFn","resetGrouping","_getGroupedRowModel","manualGrouping","groupingColumnId","_groupingValuesCache","createCell","getIsPlaceholder","getIsAggregated","pagination","pageIndex","pageSize","onPaginationChange","_autoResetPageIndex","autoResetPageIndex","manualPagination","resetPageIndex","setPagination","resetPagination","getDefaultPaginationState","setPageIndex","maxPageIndex","pageCount","_table$initialState","_table$initialState$p3","resetPageSize","setPageSize","_table$initialState2","_table$initialState2$","topRowIndex","floor","setPageCount","newPageCount","getPageOptions","getPageCount","pageOptions","fill","_","i","getCanPreviousPage","getCanNextPage","previousPage","nextPage","getPrePaginationRowModel","_getPaginationRowModel","ceil","defaultOptions","queuedTimeout","coreInstance","cb","Promise","resolve","then","catch","error","setTimeout","reset","newOptions","mergeOptions","_getRowId","getRowId","_getCoreRowModel","_getDefaultColumnDef","defaultColumn","resolvedColumnDef","accessorKey","renderValue","_props$renderValue","_getColumnDefs","columnDefs","recurseColumns","replace","originalRow","getFlatColumns","flatMap","groupingColumnDef","_getAllFlatColumnsById","flatColumns","acc","original","rowIndex","_valuesCache","_uniqueValuesCache","hasOwnProperty","getUniqueValues","getLeafRows","data","accessRows","originalRows","getSubRows","originalSubRows","sortingState","sortedFlatRows","availableSorting","_table$getColumn","columnInfoById","sortEntry","sortUndefined","invertSorting","sortData","sortedData","columnInfo","isDesc","aUndefined","bUndefined","sortInt","expandRows","expandedRows","handleRow","paginatedRowModel","pageStart","pageEnd"],"sourceRoot":""}